[{"company": "Agent Oriented Software", "introduction": "autonomous and semi-autonomous software systems", "end_market": "Aerospace, defence, oil & gas, SME", "industry": "IT - Software", "link": "http://www.agent-software.com.au/", "search_text": "http://www.agent-software.com.au/", "title": "AOS Group", "link_corrected": "http://www.agent-software.com/", "description": "Agent Oriented Software \u2013 the Australian AI company since 1997. AOS is a software and robotics company specialising in autonomous and intelligent systems.", "crawled_links": ["http://www.agent-software.com/", "http://www.agent-software.com/news/aos-developing-next-gen-of-intelligent-software-agent-technology/", "http://www.agent-software.com/news/seminar-on-testing-and-certification-of-automated-driving-systems/", "http://www.agent-software.com/news/come-and-see-the-kelpietm-at-avalon/", "http://www.agent-software.com/news/australian-bushfires/", "http://www.agent-software.com/news/kelpie-leaves-avalon/", "http://www.agent-software.com/news/aos-participates-in-the-australian-armys-human-machine-team-development-workshops-1st-and-2nd-july/", "http://www.agent-software.com/news/kelpie-autonomous-testing-to-commence/", "http://www.agent-software.com/news/aos-attends-adm-congress-2020/", "http://www.agent-software.com/privacy_policy/", "http://www.agent-software.com/news/", "http://www.agent-software.com/products/", "http://www.agent-software.com/team/", "http://www.agent-software.com/support/", "http://www.agent-software.com/research/", "http://www.agent-software.com/contact/", "http://www.agent-software.com/news/second-generation-kelpie-enhanced-nearing-completion/", "http://www.agent-software.com/research/agent-technology/", "http://www.agent-software.com/products/cojack/", "http://www.agent-software.com/research/autonomous-systems/", "http://www.agent-software.com/research/agent-based-impact-analysis-of-an-air-traffic-management-system/", "http://www.agent-software.com/products/jackteamstm/", "http://www.agent-software.com/research/developing-a-person-following-mobile-robot-using-prometheus-and-jack/", "http://www.agent-software.com/products/jack-simtm/", "http://www.agent-software.com/products/iwatchdogtm/", "http://www.agent-software.com/products/autonomous-vehicles/", "http://www.agent-software.com/news/ahead-of-air-6500-afhq-identifies-ai-as-a-key-developing-technology-to-enhance-air-missile-defence/", "http://www.agent-software.com/products/jack/", "http://www.agent-software.com/media/documentation/jack/jackdocs.html", "http://www.agent-software.com/media/documentation/jack/JACK_FAQ.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/index.html", "http://www.agent-software.com/media/documentation/jack/WebBot_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/JACK_Sim_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/JACK_Teams_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/practicals/teams/html/index.html", "http://www.agent-software.com/media/documentation/jack/JACOB_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/index.html", "http://www.agent-software.com/media/documentation/jack/JACK_Tracing_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/DesignTool_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/JDE_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/api/user/index.html", "http://www.agent-software.com/media/documentation/jack/Plan_Editor_Guide_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/api/teams/index.html", "http://www.agent-software.com/media/documentation/jack/Agent_Manual_WEB/index.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/package-summary.html", "http://www.agent-software.com/media/documentation/jack/practicals/teams/html/index_1.html", "http://www.agent-software.com/media/documentation/jack/practicals/teams/html/p1teams.html", "http://www.agent-software.com/media/documentation/jack/practicals/teams/html/index_2.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p2s.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p1n.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/index_1.html", "http://www.agent-software.com/media/documentation/jack/api/teams/overview-summary.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p2e.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p1e.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p2n.html", "http://www.agent-software.com/media/documentation/jack/practicals/jack_jde/html/p1s.html", "http://www.agent-software.com/media/documentation/jack/api/user/overview-summary.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/MemoryBuffer.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/JDBCOutStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/InStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/JacobReader.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/JDBCInStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/Convert.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/GetStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/BinaryInStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/BinaryOutStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/XMLOutStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/XMLInStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/StreamerSupport.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/TypeDict.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/SetStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/OutStream.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/BaseListEnumeration.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/aos/apib/BaseList.html", "http://www.agent-software.com/media/documentation/jack/api/teams/aos/team/plugins/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/logic/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/fsm/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/messages/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/time/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/team/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/jacob/serialized-form.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/util/timer/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/util/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/thread/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/main/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/visual/awt/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/cursor/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/run/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/visual/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/jse/rt/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/models/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/jse/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/teams/aos/team/plugins/TeamAchieve.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/util/timer/package-summary.html", "http://www.agent-software.com/media/documentation/jack/api/teams/aos/team/plugins/TeamAgent.html", "http://www.agent-software.com/media/documentation/jack/api/teams/aos/team/plugins/TeamPlan.html", "http://www.agent-software.com/media/documentation/jack/api/teams/aos/team/plugins/TeamMessage.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/team/TeamManagerInit.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/messages/EventMessage.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/team/DefaultTeamStarting.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/util/timer/RTClock.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/util/timer/BaseClock.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/util/timer/TimerHandle.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/HasChangeTime.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/main/Jacob.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/main/JacobBuild.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/JACKRuntimeError.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/visual/awt/TextLine.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/util/package-tree.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/visual/awt/Transform.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/visual/awt/XORArea.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/util/timer/SimClock.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/util/timer/DilationController.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/util/timer/DilatedClock.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/jak/util/timer/package-tree.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/models/VisualizerFields.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/models/Visualizer.html", "http://www.agent-software.com/media/documentation/jack/api/user/aos/jack/sim/models/Space.html", "http://www.agent-software.com/media/documentation/jack/api/teams/serialized-form.html"], "header_text": ["What We Do", "Our Featured Customers", "Who We Work With", "Agent Oriented Software \u2013 the Australian AI company since 1997. ", "AOS is a software and robotics company specialising in autonomous and intelligent systems. ", "Its Australian-developed \u201cBeliefs, Desires and Intentions\u201d, or BDI, intelligent software agent technology provides the foundation for machines and systems capable of rational reasoning. This allows humans to understand why the autonomous system did what it did, generating trust and providing the means to achieve the ", ".  ", "AOS markets JACK\u00ae, a multi-agent software development platform, which developers can use to produce intelligent software and decision applications. AOS is developing C-BDI\u2122, to be released in early 2020, which is AOS\u2019s flagship 4th generation BDI software platform for intelligent agents and decision-making systems. AOS is going further, and with its C-BDI Resilient Agent Teams\u2122, is producing a world-first capability for building teams of software agents that work with humans as a human/autonomous machines team, to be released in 2021. ", "AOS is developing its Kelpie range of autonomous, off-road ground vehicles, for both defence and agricultural applications.", "Agent Oriented Software \u2013 the Australian AI company since 1997 \u2013 was founded to develop software products based on the concept of intelligent software agents. These agents, known as BDI, or Beliefs, Desires and Intentions agents, draw from the theories of rational agency, first proposed by Stanford philosopher Michael Bratman in the 1980s. We have realised that aim and now produce intelligent agent software products, and applications, including the development of a range of autonomous, off road, ground vehicles.", "Dr Andrew Lucas, Founder of AOS", "AOS developing next-gen Intelligent Software Agent technology", "News Subscription", "News Subscription", "Subscription successful", "Seminar on Testing and Certification of Automated Driving Systems", "News Subscription", "News Subscription", "Subscription successful", "Come and see the Kelpie\u2122 at Avalon!", "News Subscription", "News Subscription", "Subscription successful", "Australian Bushfires", "News Subscription", "News Subscription", "Subscription successful", "Kelpie leaves Avalon!", "News Subscription", "News Subscription", "Subscription successful", "AOS Participates in the Australian Army\u2019s Human Machine Team Development Workshops, 1st and 2nd July", "News Subscription", "News Subscription", "Subscription successful", "Kelpie autonomous testing to commence", "News Subscription", "News Subscription", "Subscription successful", "AOS attends ADM Congress 2020", "News Subscription", "News Subscription", "Subscription successful", "Privacy Policy", "Second-Generation Kelpie Enhanced - Nearing Completion", "AOS attends ADM Congress 2020", "Australian Bushfires", "AOS Participates in the Australian Army\u2019s Human Machine Team Development Workshops, 1st and 2nd July", "Kelpie autonomous testing to commence", "Ahead of AIR 6500 AFHQ identifies AI as a key developing technology to enhance air, missile defence", "Seminar on Testing and Certification of Automated Driving Systems", "AOS developing next-gen Intelligent Software Agent technology", "Kelpie leaves Avalon!", "Come and see the Kelpie\u2122 at Avalon!", "News Subscription", "News Subscription", "Subscription successful", "Autonomous Vehicles", "iWatchdog\u2122", "JACK\u00ae", "JACKTeams\u2122", "JACK Sim\u2122", "CoJACK", "Dr Charles Andrew Lucas", "Avdo Hanjalic", "Matteo Pedrotti", "Nathan Hamilton", "James Cooper", "Weixun (Leon) Liu", "Chung Sing Leung", "Vishal Chopra", "Founder", "Team Leader, Software Engineering", "Senior Software Engineer", "Senior Software Engineer", "Senior Software Engineer", "Software Engineer", "Aeronautical Engineer", "Financial Controller, Business Development Manager", "Product Support & Queries", "Agent Training Courses", "JACK User Group", "Licence Renewal", "If you have any question about a specific product, please contract us using this form.", "For general enquiries, please use the form in the ", ".", "Please submit one form per product.", "Training courses will be given by experts from AOS. If you are interested in multiple training courses, please submit one form for each of them", "For further details of our product training courses, or to book a course, please contact\n            us using the registration form.", "JACK Intelligent Agents Group: The JACK Intelligent Agents Group provides a forum for\n            communication amongst JACK users.", "Joining this group must be approved manually. This is to avoid the group being used as a\n            way to distribute junk mail. Apart from that, AOS has no direct involvement in this group. However, some AOS\n            staff are members of the group and may answer interesting questions from time to time.", "If you have an academic licence for an AOS product, you must complete this questionnaire by the end of\n            June each year to tell us how you have been using the product.", "This form is an annual requirement to prevent your academic licence from expiring.", "Once your submission is received, we review them and renew your Academic Licence in\n            July, as per the academic licence agreement.", "Form Submission", "Form Submission", "Form Submission", "Full Name:", "E-mail:", "Product:", "Subject:", "Message:", "Full Name:", "Organisation:", "E-mail:", "Phone Number:", "Product:", "Preferred Start Date:", "Preferred Location:", "Additional Message:", "Full Name:", "E-mail:", "Phone Number:", "Address:", "University/Department Name:", "University/Department Website:", "Product:", "Main Purpose of Usage:", "If you choose \"Teaching\"", "List of the course(s) taught:", "Approximate number of students for each course:", "If you choose \"Research\"", "Name of the project or working title:", "Project website:", "Briefly explain the research project and how the product is involved:", "Please supply links to any papers published about the project:", "Please upload any papers/documents related to the project:", "If you choose \"Others\"", "Please rate us - how was your experience with AOS products?", "Do you have any suggestions on how we can improve our products to better suit your needs?", "\n                Our Offices", "\n            ", "\n                Contact Us", "\n            ", "Melbourne Office", "Form Submission", "Form Submission", "Form Submission", "580 Elizabeth Street", "Melbourne, VIC 3000", "Australia", "Phone: +61 (0) 3 9349 5055", "Fax: +61 (0) 3 9349 5088", "Full Name:", "E-mail:", "Subject:", "Message:", "Second-Generation Kelpie Enhanced - Nearing Completion", "News Subscription", "News Subscription", "Subscription successful", "Agent Technology", "CoJACK", "Autonomous Systems", "Agent based impact analysis of an air traffic management system", "JACKTeams\u2122", "Developing a person-following mobile robot using Prometheus and JACK", "JACK Sim\u2122", "iWatchdog\u2122", "Autonomous Vehicles", "Ahead of AIR 6500 AFHQ identifies AI as a key developing technology to enhance air, missile defence", "News Subscription", "News Subscription", "Subscription successful", "JACK\u00ae", "\r", "User documentation for", "My Windows computer tells me that \"Registry key\n'Software\\JavaSoft\\Java Runtime\nEnvironment\\CurrentVersion'\nhas value ", " but ", " is required\". What should I do?", "The JACK\u00ae Compiler tells me \" ** couldn't execute **\". What\ndoes\nthis mean?", "I get the message \"New Executor spawned due to mis-behaving agent\".\nWhat's going on?", "My JACK\u00ae program just hangs and does nothing.", "\n", "Why doesn't my JACK\u00ae program exit?", "How are plans scheduled and how many threads does JACK\u00ae use\nitself?\n", "I get strange compilation errors but if I clean up first everything\nis\nok. Why is that?", "\n", "\n", "\n", "\n", "JACK\u0099  Intelligent Agents Agent Practicals", "Table of Contents", "JACK Intelligent Agents\u00ae  WebBot Manual", "Table of Contents", "JACK Intelligent Agents\u00ae  JACK Sim Manual", "Table of Contents", "JACK Intelligent Agents\u00ae  Teams Manual", "Table of Contents", "JACK\u0099  Intelligent Agents Teams Practicals", "Table of Contents", "JACK Intelligent Agents\u00ae  JACOB Manual", "Table of Contents", "\nFrame Alert", "JACK Intelligent Agents\u00ae  Tracing and Logging Manual", "Table of Contents", "JACK Intelligent Agents\u00ae  Design Tool Manual", "Table of Contents", "JACK Intelligent Agents\u00ae  Development Environment Manual", "Table of Contents", "\nFrame Alert", "JACK Intelligent Agents\u00ae  Graphical Plan Editor Manual", "Table of Contents", "\nFrame Alert", "JACK Intelligent Agents\u00ae  Agent Manual", "Table of Contents", "\nPackage aos.apib\n", "\n", "\n", "\nClass MemoryBuffer", "\nMemoryBuffer", "\nMemoryBuffer", "\nMemoryBuffer", "\nhashCode", "\nequals", "\ngrow", "\nsetTypeDict", "\nreset", "\nstart", "\ngetInt", "\nputInt", "\ngetLong", "\nputLong", "\nputBytes", "\ngetBytes", "\nreadObject", "\nwriteObject", "\ngetBuffer", "\n", "\n", "\nClass JDBCOutStream", "\nJDBCOutStream", "\nJDBCOutStream", "\n", "\n", "\nClass InStream", "\nInStream", "\nclose", "\nopen", "\nopen", "\nopen", "\nopen", "\nnewAsciiInStream", "\nnewBinaryInStream", "\nnewAsciiInStream", "\nnewBinaryInStream", "\nreadBaseClasses", "\nreadObject", "\nreadMultipleObjects", "\nnotifyReadResolver", "\ngetChar", "\ngetBool", "\ngetByte", "\ngetShort", "\ngetInt", "\ngetLong", "\ngetString", "\ngetFilename", "\ngetEnum", "\ngetFloat", "\ngetDouble", "\ngetData", "\ngetObject", "\ngetOther", "\ngetAggregate", "\ngetAggregate", "\nfromGZIP", "\n", "\n", "\nClass JacobReader", "\nJacobReader", "\nsetDict", "\ninitialize", "\nread", "\nsetEnabled", "\nreadFromString", "\nreadFromFile", "\n", "\n", "\nClass JDBCInStream", "\nJDBCInStream", "\n", "\n", "\nClass Convert", "\nConvert", "\nusage", "\nmain", "\ninitTypeDict", "\n", "\n", "\nClass GetStream", "\ninstance", "\nGetStream", "\nclose", "\nget", "\nget", "\n", "\n", "\nClass BinaryInStream", "\nBinaryInStream", "\nBinaryInStream", "\n", "\n", "\nClass BinaryOutStream", "\nBinaryOutStream", "\nBinaryOutStream", "\n", "\n", "\nClass XMLOutStream", "\nXMLOutStream", "\nXMLOutStream", "\n", "\n", "\nClass XMLInStream", "\nXMLInStream", "\nXMLInStream", "\nXMLInStream", "\n", "\n", "\nClass StreamerSupport", "\n__type", "\n__icon", "\n__comment", "\n__field_names", "\n__display_names", "\n__field_types", "\n__field_subtypes", "\n__enuminfos", "\n__field_hidden", "\n__field_static", "\n__field_inherited", "\n__field_transient", "\nlongest_field", "\n__field_comments", "\n__allowed", "\nStreamerSupport", "\naddMapping", "\ndelayInitialization", "\ninitApib", "\ninitJacob", "\ngetDefaultInstance", "\ngetStreamer", "\nretarget", "\nretarget", "\ngetType", "\ngetBaseClass", "\nfindBaseStreamer", "\nisDefault", "\nnew_instance", "\nnew_array", "\nread", "\nreadField", "\nwrite", "\ngetBaseClassStreamer", "\nderivedFrom", "\ngetStreamedType", "\nsetStreamedType", "\ntoString", "\nisFieldAtomic", "\ngetField", "\nnFields", "\ndepthFirstTraverser", "\ndepthFirstTraverser", "\nbreadthFirstTraverser", "\ntraverseDepthFirst", "\ntraverseDepthFirst", "\ntraverseBreadthFirst", "\ntraverseBreadthFirst", "\n", "\n", "\nClass TypeDict", "\nTypeDict", "\nisEmpty", "\nelements", "\nadd", "\nexists", "\nfind", "\ninitialize", "\n", "\n", "\nClass SetStream", "\ninstance", "\nSetStream", "\nclose", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nset", "\nreadObject", "\nnextField", "\ngetChar", "\ngetBool", "\ngetByte", "\ngetShort", "\ngetInt", "\ngetLong", "\ngetString", "\ngetEnum", "\ngetFloat", "\ngetDouble", "\ngetData", "\ngetObject", "\ngetOther", "\ngetAggregate", "\ngetAggregate", "\n", "\n", "\nClass OutStream", "\nOutStream", "\nprelude", "\ntrailer", "\nclose", "\nopen", "\nwriteObject", "\nwriteSimplifiedObject", "\nwriteObject", "\ntoGZIP", "\nwriteObject", "\nnewAsciiOutStream", "\nnewBinaryOutStream", "\nnewOutStream", "\nnewAsciiOutStream", "\nnewBinaryOutStream", "\nnewOutStream", "\nwriteObject", "\nwriteMultipleObjects", "\nnotifyWriteReplacer", "\nwriteBaseClasses", "\nwriteBaseClasses", "\nputBool", "\nputChar", "\nputByte", "\nputShort", "\nputInt", "\nputLong", "\nputString", "\nputFilename", "\nputEnum", "\nputFloat", "\nputDouble", "\nputData", "\nputObject", "\nputOther", "\nputAggregate", "\nputAggregate", "\naddNonApib", "\nreset", "\nhasBeenSeen", "\nseenMultiple", "\ninitSeen", "\n", "\n", "\nClass BaseListEnumeration", "\nBaseListEnumeration", "\nhasMoreElements", "\nnextElement", "\nrm", "\n", "\n", "\nClass BaseList", "\nBaseList", "\ngetStreamer", "\nempty", "\naddLast", "\naddFirst", "\nreplace", "\nrm", "\naddAfter", "\nelementAt", "\naddAt", "\nrmAt", "\naddBefore", "\nelements", "\ngetSize", "\nnotifyChanged", "\nPackage aos.team.plugins\n", "\nPackage aos.jack.jak.logic\n", "\nPackage aos.jack.jak.fsm\n", "\nPackage aos.jack.jak.messages\n", "\nPackage aos.jack.sim.time\n", "\nPackage aos.jack.sim.team\n", "\nSerialized Form", "\nPackage aos.util.timer\n", "\nPackage aos.util\n", "\nPackage aos.jack.util.thread\n", "\nPackage aos.main\n", "\nPackage aos.jack.sim.visual.awt\n", "\nPackage aos.jack.util.cursor\n", "\nPackage aos.jack.util\n", "\nPackage aos.jack.sim.run\n", "\nPackage aos.jack.sim.visual\n", "\nPackage aos.jack.sim.jse.rt\n", "\nPackage aos.jack.sim.models\n", "\nPackage aos.jack.sim.jse\n", "\n", "\n", "\nClass TeamAchieve", "\nTeamAchieve", "\nverifySyntax", "\ngcodeGen", "\nbuildFSM", "\nPackage aos.jack.jak.util.timer\n", "\n", "\n", "\nClass TeamAgent", "\nTeamAgent", "\nisTeam", "\n", "\n", "\nClass TeamPlan", "\nTeamPlan", "\ngcodeGen", "\n", "\n", "\nClass TeamMessage", "\nTeamMessage", "\nmkConstructor", "\n", "\n", "\nClass TeamManagerInit", "\nTeamManagerInit", "\ngetStreamer", "\nhashCode", "\nequals", "\ninitialise", "\n", "\n", "\nClass EventMessage", "\nEventMessage", "\nEventMessage", "\ngetStreamer", "\nhashCode", "\nequals", "\ntoString", "\ngetLength", "\nprocess", "\ndump", "\n", "\n", "\nClass DefaultTeamStarting", "\nDefaultTeamStarting", "\ngetDocumentation", "\n__init1", "\n__init2", "\n__init_desc", "\n__bindNames", "\n", "\n", "\nClass RTClock", "\ntimer", "\nRTClock", "\nRTClock", "\nrun", "\ngetTime", "\nsetTime", "\nadjustTime", "\nreschedule", "\n", "\n", "\nClass BaseClock", "\nBaseClock", "\ngetTime", "\ngetName", "\ngetNextWhen", "\nnotifyExpired", "\ndumpq", "\nreschedule", "\nschedule", "\nschedule", "\nscheduleAt", "\nscheduleAt", "\ncancel", "\n", "\n", "\nClass TimerHandle", "\nTimerHandle", "\nsetTimerHandle", "\ncancelled", "\nremaining", "\n", "\n", "\nInterface HasChangeTime", "\nsetChangeTime", "\ngetChangeTime", "\n", "\n", "\nClass Jacob", "\nJacob", "\nmain", "\n", "\n", "\nClass JacobBuild", "\nJacobBuild", "\nmain", "\n", "\n", "\nClass JACKRuntimeError", "\nJACKRuntimeError", "\nJACKRuntimeError", "\n", "\n", "\nClass TextLine", "\nTextLine", "\ngetStreamer", "\nhashCode", "\nequals", "\npaint", "\ngetBounds2D", "\ninstantiate", "\nchildren", "\ntoString", "\nHierarchy For Package aos.jack.util\n", "\nClass Hierarchy\n", "\nInterface Hierarchy\n", "\n", "\n", "\nClass Transform", "\nTransform", "\ngetStreamer", "\nhashCode", "\nequals", "\npaint", "\ngetBounds2D", "\ninstantiate", "\nchildren", "\n", "\n", "\nClass XORArea", "\nXORArea", "\ngetStreamer", "\nhashCode", "\nequals", "\ntoString", "\n", "\n", "\nClass SimClock", "\nSimClock", "\nSimClock", "\ngetTime", "\nreschedule", "\nsetTime", "\nadjustTime", "\n", "\n", "\nClass DilationController", "\nDilationController", "\nuserAction", "\nexpired", "\ntimeString", "\n", "\n", "\nClass DilatedClock", "\nDilatedClock", "\nDilatedClock", "\ngetTime", "\nstop", "\ngo", "\nisRunning", "\nsetDilation", "\ngetDilation", "\nsetController", "\nreschedule", "\nexpired", "\nsetTime", "\nadjustTime", "\nHierarchy For Package aos.jack.jak.util.timer\n", "\nClass Hierarchy\n", "\n", "\n", "\nClass VisualizerFields", "\nVisualizerFields", "\ngetStreamer", "\nhashCode", "\nequals", "\ntoString", "\n", "\n", "\nClass Visualizer", "\nVisualizer", "\ninit", "\nstep", "\ndie", "\n", "\n", "\nClass Space", "\nSpace", "\ngetSpace", "\naddModel", "\nfindModel", "\nremoveModel", "\niterator", "\nSerialized Form"], "paragraph_text": ["ADM 2020 concluded yesterday, and AOS was one of a substantial number of defence companies represented at the event at Canberra\u2019s Playhouse Theatre. ", " Read more...", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "C-BDI Resilient Teams multi-agent architecture underlying iWatchdog, using autonomous air and land vehicles as an example\r", "AOS will be developing next generation of Intelligent Software Agent technology with Australian Defence Department funding. Minister for Defence Industry, Senator the Hon Linda Reynolds CSC, on 4th April, announced that AOS has been awarded a $1.3M Defence Innovation Hub contract to develop \u201cC-BDI Resilient Teams\u201d.\r", "This contract focuses on ISR (Intelligence, Surveillance and Reconnaissance), an area of defence that is developing very rapidly, with the availability of new generations of existing sensors, such as active phased array radars and improved IR sensors. As well there is a plethora of new sensors and platforms, e.g., unmanned drones or UAVs equipped to stream video and self-drive vehicles and unmanned underwater vehicles (UUVs) with a variety of high resolution, low cost, sensors.\r", "As such, the challenge lies not in the sensors, but the ability to field a number of mobile sensors in the right place at the right time, while minimising manpower. The human involvement should be in ISR assessment and decision making, with the distributed sensor system operating autonomously under human oversight.\r", "The C-BDI Resilient Agent Teams\u2122 is a software system \u2013 a software \u201cengine\u201d \u2013 that underlies this capability. It will allow the real-time coordination of mobile ISR assets of different types, integrating various sensor/platform outputs that complement each other and are presented as a coordinated situational picture, thereby streamlining the mission decision-making process.\r", "C-BDI Resilient Agent Teams overcomes the challenge of building a distributed ISR capability, made up of various mobile and autonomous sensor platforms, and one that is resilient in the circumstances of unreliable communications and cyber-attack. Modern distributed systems, particularly those collecting information from a number of sources, are vulnerable to both cyber penetration, and \u201cspoofing\u201d.\r", "An initial release of C-BDI will support AOS\u2019s intelligent Watch Dog\u2122 (iWatchdog), an autonomous response system comprised of air, land, maritime and underwater vehicles fitted with various sensors. iWatchdog\u2019s initial application is to Air Base protection for RAAF, as part of the Airbase Command & Control Capability System, a key program for Combat Support Group.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "AOS, as one of the very early partners in the ", "Australia and New Zealand Driverless Vehicle Initiative or ADVI", ", attended this on Thursday 30th May at ", "ARRB", "\u2019s new headquarters in Fishermens Bend.\r", "ADVI is the peak industry advisory body that services the wide ecosystem of automated vehicle activities across Australia and New Zealand.\r", "The presentation was by ", "Dr David Ward", " of HORIBA MIRA in the UK. Dr Ward and his team of 30 experts are responsible for training, consultancy and independent safety assessment in the functional safety standard ISO 26262 and other related standards. Dr Ward is the UK principal expert contributing to the international ISO committee responsible for the development of ISO 26262; and the development of the forthcoming standard on cybersecurity engineering ISO/SAE 21434.\r", "AOS is currently developing its Kelpie autonomous ground vehicle for the RAAF. Kelpie is a multi-purpose vehicle, performing both logistics and security roles on air bases. The Kelpie is not designed for carrying passengers, and will operate on air bases where there is some vehicle and pedestrian traffic. It can be considered a ", "Level 4 driverless vehicle", ".\r", "Dr David Ward presenting at the seminar\r", "Dr Ward introduced ISO/PAS 21448:2019(en) ", "\u201cRoad vehicles \u2014 Safety of the intended functionality\u201d", ". This recent ISO standard, referred to as SOTIF, addresses the inability of an autonomous function to correctly comprehend the situation and operate safely; including sensor input variations or diverse environmental conditions. It complements the existing ISO 26262, an automotive-specific international standard focussing on safety critical components, both hardware and software.\r", "AOS\u2019s Kelpie being prepared for testing at Amberley Air Base\r", "AOS has a strong interest in the SOTIF standard approach. The Kelpie\u2019s autonomy capability is built upon AOS\u2019s C-BDI\u2122 multi-agent architecture. The C-BDI release plan is based upon a commercial release in late 2020, with a subsequent development of a DO-178C-compliant version following. However, DO-178C, or ISO 26262, compliance is only part of the story as if the autonomy behaviours are incorrectly captured in the first place, the compliant code will simply implement the wrong behaviours.\r", "The challenge is to ensure that autonomy behaviours are both effective and safe and in the current state-of-the-art this requires an SME, or SMEs, to both understand and review the autonomy behaviours. C-BDI uses a Visual Modelling approach \u2013 even though developers would wish to write in the C-BDI language the SMEs (Subject Matter Experts) cannot read this. On the other hand, with training and with the support of an analyst, they can understand the C-BDI graphical plans and determine if the reasoning is correct and safe. The SOTIF standard is highly relevant to this process and will inform AOS\u2019s development of C-BDI and the Kelpie.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "AOS is demonstrating the capabilities of the laser and cameras on its Kelpie\u2122 Autonomous Ground Vehicle, located on the RAAF C-17 transport in the Jericho Precinct, on the Avalon flight line.\r", "See the LiDAR in operation, and notice the stereo camera on the vehicle identifying people as they walk in front of it.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "Everyone at AOS wishes to express their sympathy for those people who lost family or friends in the bushfires, they have been a devastating experience for the country. To those who lost their homes, farms and livestock we send our best wishes for your recovery and rebuilding.\r", "The natural environment, in such places as East Gippsland and Kangaroo Island, has suffered devastating damage, and hundreds of millions of native animals have been killed or lost their habitat: ", "read more", ".\r", "AOS has made a donation to WIRES, the wildlife rescue fund, to help support those rescuing and caring for the animals: https://www.wires.org.au.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "Kelpie, an unmanned ground vehicle (UGV) designed by AOS with the Australian Centre for Robotic Vision for the Australian Defence Forces, was the highlight of the Avalon 2019 Air Show that ended on 3 March 2019. The vehicle garnered rave reviews in the media and impressed the defence personnel and the general public alike.\r", "The Kelpie vehicle departed Avalon on Sunday, 3 March 2019. AOS is now preparing Kelpie for the next round of obstacle avoidance testing, jointly with the Australian Centre for Robotic Vision.\r", "GPCAPTs Lyle Holt and Jerome Reid, Plan Jericho Directors with Nathan Hamilton and Andrew Lucas in the Jericho Precinct", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "These HUM-T workshops are run by the Army\u2019s Soldier Combat System Program, and bring together Army, CASG, industry and universities to discuss the opportunities and challenges presented when introducing autonomous and robotic systems to the Army.\r", "COL Stu Davies, Director - Soldier Combat System Program outlining the program\r", "Army has planned a 24-month program of teaming with industry and universities to explore concepts and learn from these experiments. Two initiatives are BAE Systems\u2019 Optionally Crewed Combat Vehicle, based upon a converted M113; and Deakin University\u2019s IISRI \u201cleader/follower\u201d vehicle concept.\r", "AOS\u2019s expertise and capabilities are relevant to the HUM-T program. The iOPFOR\u2122 system provides an autonomous team of targets for live fire training. iOPFOR is being developed with the Army\u2019s Special Forces Command.\r", "Building on this autonomous teaming capability is AOS\u2019s C-BDI\u2122 Resilient Teams development. A Defence Innovation Hub-funded project, this will provides a generic capability for teams of autonomous vehicles and humans to work together.\r", "The AOS Kelpie\u2122 autonomous land vehicle, developed in collaboration with Army\u2019s SFTF in Perth and the Australian Centre for Robotic Vision at QUT, is designed for multiple roles.\r", "Kelpie on location at RAAF Amberley for obstacle detection and collision avoidance testing. The prone mannequin was floored by the wind and used as a low obstacle.\r", "These tests involve human and small animal mannequins, as well as airfield equipment, such as generator carts and maintenance stands. The prone mannequin was floored by the wind and used as a low obstacle.\r", "Funded by RAAF\u2019s Plan Jericho, Kelpie is designed to operate autonomously on RAAF bases. In its logistics role, it transports spare parts and tools around bases, between the various stores and the dispersed aircraft. It is also available to play a role in base protection, as part of AOS\u2019s iWatchdog\u2122 autonomous response and tactical surveillance system.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "AOS\u2019s Kelpie autonomous ground vehicle is about to achieve an exciting milestone. This will focus on testing the vehicle\u2019s ability to detect and manoeuvre around obstacles that would typically be encountered \u201cairside\u201d on an airbase. The tests will start with static obstacles, such as buildings, parked vehicles, trees, fire hydrants and maintenance stands. The testing will then move on to dynamic obstacles \u2013 those that can move. These include people, as well as other vehicles and trailers.\r", "While RAAF security and safety considerations limit the number of people and vehicles \u201cairside\u201d, the Kelpie will use its LiDAR and cameras to detect and identify any that it encounters, and either stop or steer clear of them.\r", "The testing will be conducted in a secure area at Amberley Air Base, and involve the Kelpie being tested with a range of obstacles, at speeds up to 20kph.\r", "Kelpie being readied for testing", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "One of the notable presentations was by Dr Marcus Hellyer, Senior Analyst, ASPI, titled: \u201cCurrent Defence spending by the Australian Government\u201d. Dr Hellyer outlined the Government\u2019s commitment to funding the commitments made under the Whitepaper over the coming years.\r", "His presentation described the five capability challenges facing the ADF in light of the rapidly evolving Asia/Pacific security environment. One of the five areas that he highlighted was Investment in Autonomous Systems, a point reinforced by Chief of Army, Lieutenant General Richard Burr, AO, DSC, MVO. Army is currently investing in Robotics and Autonomous Systems, following a published strategy (", "read more", ").\r", "AOS is working to provide this capability to the ADF, and AOS\u2019s second-generation Kelpie autonomous ground vehicle has been developed in partnership with the Army and Plan Jericho (", "read more", ").", "AOS respects your privacy. It is not necessary for you supply us with any information in order to navigate our web site. However, if you wish to contact us or to download one of our products you will need to provide some contact information. This information will be used only for the purpose stated and will not be shared or sold to any third party.\r", "This web site does not make use of cookies. Cookies are a standard method of storing small pieces of information on your computer, usually to track the pages you visit. Your use of this web site is not tracked in any way.\r", "We go to great lengths to ensure that your data is stored securely and is not available to outside parties. Note that information transferred over the internet can never be 100% secure. It is possible, though unlikely, that a third party could intercept the information that you send to us.\r", "If you are sharing your computer with others, we recommend that you close your browser when you have finished browsing. It is also advisable that you clear your browser's cache before exiting.\r", "Our web site contains pointers to other web sites whose privacy practices may differ from ours.\r", "If you wish to discuss our privacy policy, or believe that we need to update our record of your personal information, then send us a message.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "March 2, 2020", "Feb. 20, 2020", "Jan. 12, 2020", "July 2, 2019", "June 7, 2019", "June 5, 2019", "June 4, 2019", "April 15, 2019", "March 15, 2019", "March 1, 2019", "Kelpie is a range of multi-purpose autonomous vehicles based upon an autonomy architecture developed by Agent Oriented Software (AOS).", "iWatchdog is capable of autonomously monitoring a variety of sensors including radar for intrusion detection.", "JACK\u00ae applications consist of a collection of autonomous agents that take input from the environment and communicate with other agents.", "JACKTeams\u2122 supports the definition of autonomous teams, which provides a team-oriented modelling framework.", "JACK Sim separates the definition and execution of a scenario, it supports multi-agent simulations, 2D visualisations, and more.", "CoJACK\u2122 is cognitive architecture used for modelling the variation in human behaviour used in simulation systems to underpin virtual actors.", "Dr Lucas is the founder of AOS. A BE Mechanical from the University of Melbourne, he holds a PhD in Aeronautical Engineering from Cambridge University, UK. He has extensive experience in the fields of IT, Telecommunications, aviation and robotics, and has been involved in developing various systems for the defence forces in Australia and the UK in related fields.", "A Software Engineer with strong background in event-driven, asynchronous and distributed systems, Avdo currently leads the Software Development Team at AOS. He has been involved in the architecture and implementation of a variety of systems, including iWatchdog\u00ae and most recently C-BDI\u00ae, using best practices in Software Engineering such as Software Patterns.\r\n\r\nAvdo enjoys working in challenging environments that encourages taking initiatives, critical thinking and brainstorming.", "Matteo specialises in Artificial Intelligence and multi-agents, and has been working on several different solutions using JACK\u00ae and CoJack\u00ae, developing behaviours for synthetic environments as well as controlling actual devices. With a hands-on attitude, Matteo loves the challenges of new technologies and keep developing his skills using new frameworks and continuous learning.", "Nathan is a Senior Software Engineer at AOS with a focus on autonomous vehicles. He has past experience in machine tools, factory automation, robotics and haptics. Nathan loves to develop smart software that further brings together the virtual and the real world.", "James is a Senior Software Engineer at AOS, where he works on the design and implementation of the core Belief, Desire and Intention (C-BDI) framework. He has an extensive background in Research, Game AI and Real-time computer graphics.\r\n\r\nJames gets inspired by elegant solutions to hard problems and he wishes to contribute to the era of true Artificial General Intelligence.", "Leon is a graduate from the University of Melbourne and is currently responsible for the development of i-Sight, a camera based intelligent intruder tracking system. Leon is most efficient in an innovative and interactive environment. He values user experience in his software design and aims to solve problems with good engineering incorporated.", "Having a background in unmanned aerial vehicles and aircraft engines, Chung\u2019s role in AOS is to develop and test robotic hardware systems. One of his ambitions is to develop an autonomous aircraft which can circle the world without refuelling.", "A qualified accountant, Vishal brings with him rich and varied experience in different industries and economies. He is an avid reader and learner, and has various qualifications and certifications to his credit. Apart from heading the finance, accounting and payroll function at AOS, he is also involved in the project management and business development functions for the company as EA to MD.", "Your form is being submitted, please hold a second...", "Your form has been submitted. Thank you for contacting AOS!", "Failed to submit your form, please correct the errors in the form and try again.", "Licence Renewal", "JACK User Group", "Agent Training Courses", "Product Support & Queries", "Your form is being submitted, please hold a second...", "Your form has been submitted. Thank you for contacting AOS!", "Failed to submit your form, please correct the errors in the form and try again.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "Over the past few months AOS has been working on updating its autonomous ground vehicle (AGV), the second-generation Kelpie. Kelpie is designed for both commercial and defence applications, as a light multi-purpose agricultural vehicle, or a light scout for the defence forces. The upgrades primarily focus on enhancing the Kelpie\u2019s autonomy stack.\r", "The second-generation Kelpie has been updated with the next generation autopilot technology. The new autopilot, Rover, running on Pixhawk hardware, is designed for ground vehicles and is highly configurable, providing significant performance improvements. This is supported by the Kelpie\u2019s new high precision dual GNSS modules, each capable of centimetric accuracy. \r", "The new autopilot is complemented by upgraded onboard computing, with a smaller, more power efficient computer, equipped with the latest generation CPU, resulting in improved performance with reduced heat generation. Designed for on vehicle use, the new computer is fan-less, resulting in improved robustness and reduced maintenance in tough environments.\r", "The enhanced second-generation Kelpie will be ready for field testing to commence in March.\r", "The enhanced second-generation Kelpie is being developed in preparation for the upcoming third-generation Kelpie, which will be based on the Polaris Ranger EV chassis and drive train (", "read more", "). The EV has a battery/electric drivetrain and has much improved off-road capability.", "In recent times, it has become clear that traditional IT systems are not suited to interacting with dynamic environments. Implementing the interaction has proven to be time consuming and error prone. It is particularly problematic where there are many external entities that must be controlled, serviced or modelled. In the past, implementing such systems has entailed explicitly programming the interaction with each external entity. If this is more than a simple client/server interaction, then the application will be difficult to implement, maintain or change.\r", "In contrast, JACK\u2122 Intelligent Agents has proven to be well suited to applications requiring complex interactions with an ever-changing environment. Each JACK agent is an autonomous computational entity. Autonomy, coupled with the ability to take input from the environment and communicate with other agents, provides system builders with a very powerful form of encapsulation. A given agent can be defined in terms of its goals, knowledge and social capability, and then left to perform its function autonomously within the environment it was designed to function in.\r", "This is a very effective way of building distributed applications; each agent is responsible for pursuing its own goals, reacting to events and communicating with other agents in the system. There is no need to explicitly program the communication, rather, the interactions emerge as a by-product of the individual goals and capabilities of the constituent agents.\r", "In many areas, IT systems are required to interact with multiple entities in a highly dynamic environment (e.g. air traffic control, share trading, manufacturing). As the environment becomes more complex and dynamic, it becomes increasingly difficult to explicitly program how to respond to the multiple unexpected events. Interaction is the most significant characteristic of complex software. Software that comprises many interacting components is much more complex to engineer.\r", "As a result of the availability of greater computing power, more demanding tasks are being delegated to computer systems. This has led to a need to build IT systems that act on our behalf and consequently require a high level of intelligence. Delegation implies two capabilities:\r", "These requirements have led to the emergence of AOS's world-leading agent-oriented technology, JACK.\r", "In contrast, JACK\u2122 Intelligent Agents has proven to be well suited to applications requiring complex interactions with an ever-changing environment. Each JACK agent is an autonomous computational entity. Autonomy, coupled with the ability to take input from the environment and communicate with other agents, provides system builders with a very powerful form of encapsulation. A given agent can be defined in terms of its goals, knowledge and social capability, and then left to perform its function autonomously within the environment it was designed to function in.\r", "This is a very effective way of building distributed systems \u2013 each agent in the system is responsible for pursuing its own goals, reacting to events and communicating with other agents in the system. There is no need to explicitly program the interactions of the whole system, rather, the interactions emerge as a by-product of the individual goals and capabilities of the constituent agents.\r", "The term agent has been used to describe systems such as procedural wizards in desktop applications, and information retrieval software. Although there is no universally accepted definition of the term agent, there is general consensus that autonomy is central.\r", "In contrast to object oriented programs, agents are self-contained computational systems. Each agent runs independently and interacts with other agents or external systems to achieve its design objectives.\r", "JACK agents have qualities over and above those found in simple agent systems. Most importantly, JACK agents have intelligent reasoning capabilities and are proactive, anticipating future events. They are also reactive, responding in a timely fashion to environmental change. Furthermore, JACK agents can work in teams as humans do, collaborating to achieve objectives.\r", "Because the term agent is used to describe a wide range of architectures, some quite trivial, we will focus on capabilities that are at the \"high end\" of the spectrum. Agent-oriented systems at the highly capable end of the spectrum, such as JACK, have the following key features:\r", "AOS supplies products for building, running and integrating commercial-grade multi-agent systems, built on a sound logical foundation: BDI (Beliefs, Desires, Intentions). BDI is an intuitive and powerful abstraction that allows developers to manage the complexity of the problem. Agents are defined in terms of their beliefs (what they know and what they know how to do), their desires (what goals they would like to achieve), and their intentions (the goals they are currently committed to achieving).\r", "Although one can ascribe beliefs, desires and intentions to any system (e.g. a light switch), it is most useful when applied to entities whose structure is incompletely known. For example, with a light switch BDI doesn't buy us anything because we have a simpler, mechanistic description of its behaviour. However, when designing an intelligent agent that must interact with an ever-changing environment, it helps to think in terms of the agent's beliefs, desires and intentions. It is an intuitive abstraction that has proven its worth over the last two decades.\r", "Visit the JACK product page for further information.", "CoJACK\u2122 is cognitive architecture used for modelling the variation in human behaviour. It is used in simulation systems to underpin virtual actors.\r", "CoJACK models the structural properties of the human cognitive system. As such, it constrains the models that can be implemented therein by only allowing the definition of models that fit within its structural boundaries. This provides a significant advantage over ad-hoc approaches to modelling human behaviour: as a theory of cognition, CoJACK provides a principled and testable framework for implementing realistic virtual actors.\r", "CoJACK has been integrated with VBS2, and is described in a BRIMS 2009 paper.", "The term autonomy has many interpretations depending upon one\u2019s perspective.  Also we should distinguish between what we call automation in contrast to autonomy.\r", "Automation characterises a system (an \u201cautomatic\u201d system) that has fixed choice points, that is it is programmed with a number of fixed alternative actions that are selected by the system in response to inputs from particular sensors (e.g. a light beam on a lift door, if it is cut then the door won\u2019t close as it is assumed that the beam is blocked by a person or an object) or user actions (e.g. a person pressing the \u201c3rd floor\u201d button sends a signal to the lift computer \u201c3rd floor\u201d and lights the \u201c3rd floor\u201d light in the lift).  The lift computer evaluates these choice points independently of the current circumstances (e.g. how full the lift is, how many people are waiting, or the cost of electricity at that time of day).\r", "Exploring the lift example further consider a bank of lifts in a building. Pressing the \u201cup\u201d button in the ground floor lobby calls the lift, and it responds in the same way irrespective of the number of people waiting. A single person going from the 3rd to 4th floors (they could easily use the stairs!) receives the same priority as 10 people waiting at ground level to go to the 5th and higher floors, so the lift stops at the 3rd floor just for one person. As humans we accept this unintelligent, \u201cblack box\u201d approach and do not expect or seek any decision-making from such systems.  Nor do we seek explanation of how they operate, as their inherent simplicity allows us to readily comprehend their actions, trust them and to rarely question their operations, even if we consider them to be \u201cstupid\u201d.\r", "Autonomous systems differ from automatic ones in that they make rational decisions based on knowledge of the current situation. An autonomous system evaluates the courses of action that could be taken in light of current circumstances. In the lift example discussed under ", "Automation", ", one person gets the same priority as ten.\r", "Like an automatic system, the autonomous system still accepts sensor and user inputs, but operates with more abstract concepts instead of a knee-jerk response to inputs. As with humans, such an autonomous, decision-making system will balance proactive (goal-directed) and reactive (responsive) aspects when making its decisions.\r", "Consequently, the behaviours exhibited by an autonomous system are far more sophisticated than a simple automatic system and this makes a \u201cblack box\u201d approach to autonomy unacceptable. Humans are much more cautious of machines that make decisions and are reluctant to place trust in them without first understanding how the they work. So, autonomous systems must be able to expose their reasoning to humans in a manner that is comprehensible \u2013 thus establishing trust.\r", "Looking in more detail at autonomy, it becomes clear that it is not simply a black and white choice or condition. Instead, it encompasses systems with a range of capabilities from those entirely independent of human input (i.e. full autonomy), through to systems that provide only timely advice and leave the human to decide and execute the appropriate action (i.e. intelligent assistant).\r", "Accepting that a \u201cblack box\u201d approach to autonomy is unacceptable, we need to plan an autonomous system carefully, and construct an autonomy architecture, where decision-making is located within the appropriate person or machine.\r", "An analogy can be seen in human organisations, such as the companies, government departments, schools, clubs and universities that we all participate or work in. In all these management authority is delegated in a structured way. Take as an example a small manufacturing company. Here the Company Board determines the strategy, e.g. \u201cWe will focus on expanding sales of our premium office furniture in the North American market this year, and we want to increase our sales there by 30%\u201d.  The Board then provides the General Manager with this target (or goal) and an appropriate budget and corresponding management authority with which to achieve it.\r", "Having received this target and delegated authority, the General Manager determines the operational goals and the plan to achieve them (i.e. the annual Business Plan), determines how the various departments need to contribute to meeting the goal, and then delegates targets appropriate to the capabilities of each particular unit. An appropriate level of management authority is provided to the various functional unit Managers (e.g. Sales, Manufacturing, Purchasing, Dispatch, Customer Support).\r", "At this point there will be discussion and negotiation as to how these delegations will work and adjustments to the goals and processes will be made.  For example a manager with an effective record of managing Customer Support would be given a larger degree of management autonomy than perhaps a deputy manager standing in for a period, or a person new to the role.  Consequently the degree of delegated authority is not \u201ccast in stone\u201d, but may alter according to circumstances.\r", "Each Manager is then in a position to ensure that his or her functional unit delivers that unit\u2019s contribution to achieve the overall business goal. This leaves the General Manager with a clear desk and unencumbered by detail is ready to deal with exceptions or problems raised by the managers as they encounter changed conditions or difficulties in performing their various roles.\r", "The majority of successful human organisations combine three key factors: clear high-level direction, effective delegation and good communications. The more that authority can be delegated to the operational levels the more effective and flexible the organisation becomes. In this way problems and unexpected events can be dealt with immediately and without recourse to higher levels in the organisation.\r", "In addition, successful organisations also have clear processes and means for escalating problems when they impact the organisation more widely. The challenge is to combine the effectiveness of delegated decision-making with the ability to rapidly escalate the problem as far as necessary as the circumstances demand.\r", "Having clarified the distinction between automation and autonomy, and explored the concepts of delegated autonomy in human organisations, it is worth exploring how these concepts can be realised in software systems and autonomous vehicles, to provide capabilities not currently available with conventional software.\r", "The first questions would be \u201cWhy would we want to have autonomy? What advantages does it provide?\u201d Returning to the example of the human organisation, we can see that delegated authority, which provides a level of autonomy appropriate to the circumstances offers:\r", "This leads to the concept of autonomy that is comprised of various decision-making sub-systems, each responsible for its domain, and coordinated by an autonomous manager which ultimately works with its human controllers.", "The creation, development and modification of complex systems is becoming increasingly commonplace, but it remains a costly and time consuming activity to predict the behaviour of such systems due to their data intensive nature. Such systems are often dynamic in nature and may not always lend themselves to quantitative behavioural analysis. Air Traffic Management (ATM) systems are examples of these complex, dynamic systems and the European and US systems are both currently undergoing redevelopment initiatives; Single European Sky and NextGen respectively. The current ATM climate, which sees these large scale redevelopments, provides a system that would benefit from an understanding of the relationships and interdependencies which it comprises.\r", "The focus of this research is therefore to develop an analysis that identifies these relationships and interdependencies whilst taking into account the problem characteristics associated with a complex ATM system.  The analysis does this by invoking a change in an element within the architecture and measuring the deviation experienced by the other elements, with the deviation termed as impact; where an element is defined as being any part of the system whose state or operational ability is of interest to the user, and which is capable of impacting, or being impacted by, other elements.\r", "Impact, in this context, is defined as being the measure of how a system element deviates from a pre-defined \u201cnormal\u201d operational mode due to a change in the operation of another element existing within the same architecture, or due to an interaction with an external environmental condition. \r", "After some investigation, it was decided that the agent-based platform, JACK, would be a good fit. The impact analysis is being applied through system operational simulations and therefore needs to model all elements of the system. Within the ATM system which will be tested, the system elements may have the ability to make decisions based on their current information and this must be demonstrated in the software tool. Agent based modeling incorporates this concept with the agent construct being able to choose which plan to follow to achieve its goals. Furthermore, this modeling approach has the capability of inter-agent communications meaning agents can share information to achieve a goal that mirrors real world systems where two or more system elements must work together.\r", "The JACK platform has the necessary features required to create a model capable of performing impact analysis on a complex system.\r", "For this study, it was assumed that there is a single controller within each airport responsible for take-off and landing and a controller in the enroute sector responsible for directing aircraft between the two airport sectors. A further assumption was that the airports each had a single runway. Elements required in this system include 2 airports, 3 sectors, 3 controllers and 5 aircraft.\r", "The airport is modeled as an object with two states; available and unavailable, a reference to the availability of the runway.\r", "Controllers are modeled as objects with a variable stating the number of aircraft each currently handles.\r", "The sectors are modeled by applying a location to each aircraft; therefore an aircraft can be either in Belfast, Enroute or Liverpool.\r", "The aircraft are modeled in the system as agents with a \u201cflying\u201d capability.\r", "This capability construct posts the \u201cRequest_flight_start\u201d event which is in turn handed by the \u201cFlight\u201d plan construct. This is shown below for the Aircraft agent.\r", "QUB - aircraft agent structure\r", "In modeling this impact analysis it is necessary to include a construct responsible for monitoring the system and calculating the impact during the scenario timeframe. This is referred to as the \u201cImpactor\u201d and is modeled using the agent construct. This agent has the \u201cImpacting\u201d capability which posts the \u201cStart_monitoring_Impact\u201d event that is handled by the agent using the \u201cImpact_calculation\u201d plan. The structure of the Impactor agent is shown below.\r", "QUB - impactor agent structure\r", "The model is compiled and run using the JACK compiler tool, which prompts the user to enter the appropriate information including flight details. The system is then initiated with the aircraft and impactor agents being created. Each agent has its own unique flight details as variable within the construct and therefore will wait until the designated time of departure before requesting take-off. If the runway is available the aircraft will enter the take-off phase with duration of five minutes. During this time the runway is unavailable to other aircraft for any purpose. Should the runway be unavailable the aircraft will wait for 1 minute before repeating the request. Upon completion of this phase the aircraft moves into the enroute stage of flight which is 30 minutes for Liverpool to Belfast and 40 for Belfast to Liverpool. The aircraft will then request to land at the destination airport which again will depend on the availability of the runway with the same procedure for repeated request being applied as in take-off. The landing phase takes a further 5 minutes and then the flight is completed.\r", "The impact aspect of the system is also started when the user-defined inputs have been entered. The Impactor will calculate the impact of each of the elements in minute intervals throughout the system operations until the status of the system becomes \u201cCompleted\u201d.\r", "The characteristics of a complex system make them difficult to understand or predict behaviour and whilst there are current approaches that have been used to aid this they tend to be costly and time consuming. This paper has presented an analysis approach and method for analyzing complex systems which was to be simple and qualitative, reducing the computational burden. The analysis approach was deemed to have the function of identifying elemental relationships and interdependencies, and analyzing the impact of one element on any or all of the elements within a system.\r", "The model that has been created has shown that it was possible to understand more about the simplified ATM system, the way it operates and predict its behaviour in reference to the scenarios that were applied. This demonstrates the potential of applying such an analysis to a larger, more complex system.\r", "AOS would like to thank Gary Davies (QUB) for providing the content of this article.", "JACKTeams\u2122 supports the definition of autonomous teams. Each team exists as an entity with separate beliefs from those of its constituent agents. This supports a wide variety of teaming algorithms and allows the representation of social relationships and co-ordination between team members.\r", "The Teams extension provides a team-oriented modelling framework. Team-oriented programming is an intuitive paradigm for engineering group action in multi-agent systems. Team-oriented programming is conceptually powerful, as it allows the software engineer to specify:\r", "In recent years, there has been an increased interest in the development and deployment of surveillance systems. Such systems pose a number of challenges, including the need to integrate disparate information sources into a cohesive \"picture\" of the tactical situation. Software agents have proven to be very effective in this regard because they are autonomous, reactive, proactive and inherently \"social\", that is, they can communicate with one another to yield a high-level appraisal of the situation being surveilled.\r", "The development of a mobile person-following robot is an interesting application area that combines multiple autonomous agents that need to be goal-directed without losing the ability to react to the target's movements. This capability is particularly challenging for robotic systems, and so requires careful design to obtain an effective decomposition of functions into agents. Such functions include compiling sensor data from multiple modalities and performing actions via various effectors. In a recent paper, Gascue\u00f1a and Fern\u00e1ndez-Caballero argue that these complexities are best handled through the adoption of an agent-oriented design and programming methodology, and in particular, one that supports the modelling of perception and action.\r", "The Prometheus methodology (Padgham & Winikoff, 2004) is a complete approach to specifying and designing agent-based software systems. The Prometheus Design Tool can transform the design into JACK definitions that form the basis for implementing a running system, providing a significant boost in productivity and reliability. This approach also ensures that the design and implementation do not diverge, a classic problem in software engineering. If the design is allowed to become out of date, it becomes more of a hindrance than a help when working on the software application.\r", "This work is still in progress, and the authors report that they will now tackle a multi-robot scenario using the same approach.\r", "Padgham & Winikoff, 2004. ", "Developing intelligent agents systems: A practical guide", ". John Wiley and Sons.", "JACK Sim\u2122 comprises three major components:\r", "In the same way that object-oriented programming introduces a number of key concepts that influence the entire logical and physical structure of the resulting software system, so too does agent-oriented programming. In agent-oriented programming, a system is modelled in terms of agents. These agents are autonomous reasoning entities capable of making proactive decisions while reacting to events in their environment.\r", "There are various ways in which entity behaviours can be partitioned \u2013 these partitionings are known as simulation world views. Traditionally, three major world views have been distinguished, namely: activity, event and process. JACK supports a world view called the BDI world view. In this view, entity behaviours are encapsulated within agents and the JACK execution model is used to drive the simulation. The BDI world view provides a much richer and more intuitive interaction model than is afforded by the traditional world views and has proven to be especially useful for the simulation of distributed systems whose component entities exhibit complex internal behaviours and rich interaction models, both with each other and with their environment.", "Protecting valuable assets requires persistent vigilance and situational awareness to enable command decisions effecting rapid responses. This level of attention comes at a cost, in terms of manpower or infrastructure.\r", "Until now the time lag between intruder detection and getting \u201ceyes on\u201d has been costly in terms of defence resources and lives. The attack on the USS Cole and the destructive intrusion at Camp Bastion are notable examples. The intelligent Watch Dog, or iWatchdog\u2122, addresses this deficiency by providing autonomous, rapid and effective surveillance in challenging environments and unexpected situations. iWatchdog has been developed for military contexts, including protection of permanent and forward air bases, ships manoeuvring in confined spaces and at dock or at anchor.\r", "iWatchdog is capable of autonomously monitoring a variety of sensors including radar for intrusion detection. It selects appropriate response vehicles to investigate and relay real-time video footage back to human supervisors at the command post. The autonomous response includes drones, Unmanned Ground Vehicles (UGVs), Unmanned Surface Vessels (USVs), or other systems such as remote surveillance cameras.\r", "To maintain tactical awareness human supervisors are presented with the instantaneous tactical picture by the Multi-Vehicle Tasking Station (MVTS), a key component of iWatchdog. The vehicles are tasked by MVTS so that the supervisors do not need to remotely control any of the response systems. This ensures that supervisors have excellent situational awareness, and are able to focus their attention on the threat and on formulating an appropriate and timely response. The MVTS does not replace or duplicate the current generation of Ground Control Stations (GCS), which are focused on the remote human control of vehicles, typically a single vehicle. Instead, the MVTS is designed to complement the GCS \u2013 either standalone, or integrated with the displays of the GCS.\r", "The intelligent behaviour in iWatchdog is powered by C-BDI\u2122, AOS\u2019s latest and most advanced multi-agent reasoning software, the culmination of more than twenty years of research and development. C-BDI allows expert knowledge to be rapidly applied to new and dynamic environments, allowing iWatchdog\u2019s vehicles to work both as individuals and in teams.\r", "This technology makes iWatchdog able to cope with complex situations, providing faster and more effective surveillance. This in turn lets supervisors react with more knowledge, potentially saving lives and avoiding damage or destruction of critical assets. iWatchdog was deployed at Autonomous Warrior 2018 in Jervis Bay, where it tasked an autonomous UGV and an autonomous USV from Northrop Grumman Undersea Systems \u2013 an 11m RHIB.", "The turn of the century and the advent of the ICT (Information, Communication, Technology) age has seen an unprecedented development in the way we interact with the outside world. What has changed here is not limited to the mode of human interaction, even the machines are learning to interact with humans and machines alike, thanks to the IoT or the Internet of Things which is changing our life every day. Probably the biggest development (after mobile communication devices) that we see today is in the field of transportation.\r", "Transportation plays a major factor in the development of an economy. Not long back, we had trucks and buses that were noisy, had manual controls, required huge maintenance and were a big source of pollution on our roads. These vehicles have now been replaced by smart buses and trucks that are way more efficient than their predecessors, can carry far more load and are constantly connected to each other and the control room by technologies such as GPS and internet. They are now easier to maintain and are fast becoming pollution-less by shifting from fossil fuels to battery-powered vehicles. Artificial intelligence, more commonly known as AI, is bound to affect our transportation in a big way, and sooner that we can imagine. Given the fact that Artificial Intelligence is the next big thing happening to the industry, it is pertinent for innovators to sit up and pay attention to the disruptors that are headed their way. The latest in the area of AI to disrupt transportation are the autonomous vehicles, and in the forefront is Kelpie, being developed by Agent Oriented Software (AOS) in partnership with the Australian Centre of Robotic Vision at QUT in Brisbane.\r", "Kelpie Autonomous Ground Vehicle\r", "Kelpie is a range of multi-purpose autonomous vehicles based upon an autonomy architecture developed by Agent Oriented Software (AOS). AOS is currently partnering with the Australian Defence Forces in conjunction with the Australian Centre of Robotic Vision at QUT in Brisbane to develop various autonomous vehicle solutions that would reduce human efforts in less productive transportation activities, while ensuring error rates that are far lower than those resulting from human decision making.\r", "At Avalon 2019, AOS is displaying its Kelpie\u2122 Multi-purpose Autonomous Ground Vehicle at the RAAF Plan Jericho \u2018At the Edge\u2019 precinct, located in the C-17.", "\n            ", "Error: this e-mail is not valid or it is already registered\n          ", "Name:", "E-mail:", "Subscription in progress, please hold a second...", "Thank you for supporting AOS!", "...", "JACK\u00ae applications consist of a collection of autonomous agents that take input from the environment and communicate with other agents. This provides system builders with a very powerful form of encapsulation. Each agent is defined in terms of its goals, knowledge and social capability, and is then left to perform its function autonomously within the environment it is embedded in.\r", "This is a very effective way of building applications for dynamic and complex environments \u2013 each agent is responsible for pursuing its own goals, reacting to events and communicating with other agents in the system. There is no need to explicitly program the interactions of the whole application, rather, the interactions emerge as a by-product of the individual goals and capabilities of the constituent agents.\r", "JACK is a mature, cross-platform environment for building, running and integrating commercial-grade multi-agent systems. It is built on a sound logical foundation: BDI (Beliefs/Desires/Intentions). BDI is an intuitive and powerful abstraction that allows developers to manage the complexity of the problem. In JACK, agents are defined in terms of their beliefs (what they know and what they know how to do), their desires (what goals they would like to achieve), and their intentions (the goals they are currently committed to achieving).\r", "Entirely written in Java\u2122, JACK is highly portable and runs on anything from PDAs to high-end, multi-CPU servers. Its Java foundation means that JACK can run with multiple threads across multiple CPUs, has platform-independent GUIs, and is easily integrated with third-party libraries.\r", "Yes, you need a Java Development kit or equivalent installed on your computer. A Java runtime by itself is not enough.\r", "JACK\u00ae documentation is provided as part of the JACK Documentation package. This package is separate from JACK itself. Once installed, the documents (in PDF and HTML format) are in the doc subdirectory. You can access the JACK documentation from the Help menu of the JDE.\r", "There should also be a link in the automatically installed menu or shortcuts. If not, point your browser at the file doc/jackdocs.html in the place where you installed JACK and it will guide you to all the available documentation.\r", "The JACK\u00ae installation comes complete with a set of examples in the sub-directory examples.\r", "You can also look under the Help menu in the JACK Development Environment (JDE).\r", "Yes.  Look under the Help menu.\r", "Within a single JVM, all JACK\u00ae agents are (normally) executed by just one thread.  JACK includes a time-based scheduler, which ensures that all agents get a slice of execution. On top of that, each JACK agent can have many tasks pending at the same time so each agent can specify its own task manager. This provides the task execution policy for that agent. The default is for the agent to stay committed to a task as long as possible. \r", "Each JACK plan is transformed by the compiler into steps in a finite state machine which can be executed by an agent's task manager. The executing thread may leave the plan (task) and come back to it later, and then continue progressing the plan (task) later. \r", "Thus, JACK has only one thread. Plus an additional one for receiving messages. \r", "In many applications, the code within an agent is \"java interface code\", which may be invoked by threads other than the JACK scheduling thread. (The message receiving thread is an example of such a thread).\r", "There are three possible reasons for this.\r", "Before contacting us, please check to ensure one of these reasons is not the cause.\r", "Some versions of the JACK\u00ae compiler had trouble telling apart Java files that were automatically generated by JACK from user-provided Java files. This lead to many name clashes due to duplicate declarations. Newer versions of the compiler should be ok but if in doubt, clean it out!\r", "This happens when any plan step of a reasoning method (e.g. body()) takes an unreasonably long time to complete (about half a second). It usually means that something is calling out to Java code and not coming back, normally a bug with your code. Individual plan steps must execute quickly. In any case, the JACK\u00ae kernel leaves that thread alone since it is taking too long and starts a new one to handle other plans. If the original one ever comes back then all is ok. If not, then the agent mentioned is hung. Often this is harmless but it might indicate a bug in your code. There are several ways you can include a lengthy computation within a plan step should the need arise. One quite flexible way is to use an Action cursor (aos.jack.util.cursor.Action). See the JACK Agent Manual for details.\r", "If the process is using a lot of CPU, then you may simply be stuck in an infinite loop. Otherwise, there may be nothing to do because JACK\u00ae is just waiting around for an event to process. There are tracing options described in the JACK Agent Manual which may be of use.\r", "This is a Java installation problem rather than a JACK\u00ae one. It sounds like your old Java xxx runtime or JDK has become stuck in the registry. Possibly the previous Java that was installed did not get uninstalled properly and now there are incompatible Java components mentioned in the registry.\r", "Although tedious, we suggest the following:\r", "The JACK\u00ae compiler needs to be able to locate your java compiler, javac. The message indicates that the java compiler can't be found. You need to have installed a JDK (Java Development Kit) and you need to add the bin directory of wherever your JDK is installed to the PATH environment variable. Unfortunately, the Java installer may not do this for you. Under Windows 2000/XP, you can do this from the Control Panel, under System, in the Environment tab.  Under Windows 95/98 etc. you would need to edit C:\\AUTOEXEC.BAT.\r", "To test this, open a Command Prompt window and type javac and see if the command is found. If found, it should complain about being called without any java file arguments. If it is not found, then there is still a problem. You may need to log out or reboot after setting the PATH variable.\r", "One other potential problem is if your PATH environment variable has quotes in it. If so, the JDE may not be able to compile your programs. Edit the PATH as described above, and remove any quotes.\r", "If you requested an evaluation copy of JACK\u00ae then your email address is required for us to send you a password to enable you to install JACK and use it for the duration of your evaluation period. We do not use any information provided by you for any other external purpose and any information provided by you is treated with the utmost confidence.\r", "Read about our Privacy Policy ", "here", ".\r", "JACK\u00ae applications never exit on their own. The JACK kernel is always waiting for an event to process. If you want the application to exit, you should call System.exit(0) explicitly when required. However, calling System.exit in this way stops everything immediately. If JACK was still processing, you may get unexpected results.", "*", " These links will not work if\nJACK\u00ae has not\nyet been installed.", "\n", " ", "The Belief-Desire-Intention (BDI) agent model\nis an event-driven execution model providing both reactive and\nproactive behavior. ", "The BDI agent\nmodel is built on a simplified view of human intelligence. In it,\nagents have a view of the world (Beliefs), certain goals they wish to\nachieve (Desires), and they form Plans (Intentions) to act on these\nusing\ntheir accumulated experience. \u00a0Agents that are\nwritten using the BDI model are at a level of abstraction\ncloser to normal human experience.", ".\n", "\n", " ", "JACK\u00ae supports code reuse through the\n\"Capability\" concept.", "\n", "\nJACK\u00ae Version 1.3 introduced Capabilities to address the issues of\nmodularisation and code reuse\nin the context of the agent modelling. A JACK\u00ae capability\nrepresents a cluster of functional components to be\nused as building blocks during the development of BDI\nagents. As a design concept they assist in the structuring of\nagent functionality into meaningful units. At the code level\nthey reduce the amount of source code required when\nCapabilities are used across different types of agents.\nCapabilities also support the building of agent code\nlibraries that can be plugged in to new developments.", "\n", "\n\u00a0\n", "\n", " JACK\u00ae agents are built as components within an application and\nallow\nseamless connection with legacy software. JACK\u00ae\nagents are accessible in Java code as normal Java objects,\nenabling agents' reasoning to be integrated with the\nprocessing of legacy applications.", "\n", "\nJACK\u00ae also includes support for inter-process data transport\nbetween Java and C++ processes (using JACOB). JACK\u00ae may\nalso be used with the Java Native Interface (JNI) to\ninter-link C++ and Java code within a single process.", "\n", "\n", " ", "\nJACK\u00ae has a modular design incorporating a generic inference engine\nthat\ncan be tailored by means\nof plug-in code modules. The default agent model provided is the BDI\nagent model, which is aimed at \"practical reasoning\", i.e. reasoning\nfor action. The BDI inference engine implements the procedural\nreasoning principle of processing plans\nto fulfill goals. ", "\n", "\nJACK\u00ae also provides a ", "Teams", "\nreasoning\nmodel. ", "\n", "\n", " ", " ", "The JACK\u00ae package includes a standard\ncommunications layer that uses UDP/IP based messaging\nwith a reliability layer. While JACK\u00ae is delivered with\na communications infrastructure of its own, an application\nmay also use a pre-existing or other means of communications\n(such as CORBA, RMI, etc.).", "\n", "\nJACK\u00ae agent messages are declared in a similar way to\nJava classes and end up being Java objects to be sent\nand received. These objects are then streamed using\nJava serialization,\nor by using the companion package JACOB, for improved\nmessaging performance and flexibility (the JACOB binary\nformat is up to ten times faster than Java serialization). ", "\n", "\nAt the programming level, JACK\u00ae agents interact via \"send\" and\n\"reply\"\nprimitives. These support multi-casting;\nthat is, the same message may be sent to several recipients\nand an agent may wait for the replies in a resource\nfree manner. Higher level communications protocols are\nimplemented as \"capabilities\" that are reusable among\nagents. ", "\n", "\n", "\n", " JACK\u00ae agents communicate via peer\nto peer messaging. Messages are sent to a named agent\nat a named portal, and it is unimportant to the sending\nagent whether the receiver is in the same process or\nin a different process. JACK\u00ae agents are therefore easily\ndistributed\nto\nmultiple processes and even multiple machines.", "\n", "\n", "The JACK Modules and relevant Software Material have been developed\nentirely at private expense and are accordingly provided with\nRESTRICTED RIGHTS. Use, duplication, or disclosure by Government is\nsubject to restrictions as set forth in subparagraph (c)(1)(ii) of\nDFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial\nComputer Software Restricted Rights and 48 CFR 52.2270-19, as\napplicable.", "\n", "\n", "Copyright \u00a9  2012, Agent Oriented Software Pty. Ltd.", "Previous Topic", " | ", "Next Topic", " ", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Previous Topic", " | ", "Next Topic", " ", "Copyright \u00a9  2001-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "The JACK Intelligent Agents\u00ae  WebBot (WebBot) is a framework that enables the implementation of web applications based around JACK\u0099  agents. Through the medium of WebBot, JACK agents can have a hand in the dynamic generation of web pages, thereby providing intelligent responses to user input.", "By providing a detailed tutorial example and an explanation of the technical foundation of WebBot, this manual will help you to use WebBot effectively.", "To use WebBot effectively, you will need a sound technical background. At the very least, you will need to be familiar with your computer's operating system, and know how to create/edit files, and compile/execute programs. You should also have a good grasp of HTML, the JACK Agent Language, and the Java programming language. The section ", "Prerequisite Background Information", " provides some preliminary background information on the components that underpin WebBot.", "The standard WebBot distribution comes with a tutorial example, including scripts for building and running the example. A good starting point would be to copy these files and adapt them for your own purposes. Of course, depending on your technical skills, you may prefer to read through this manual, and then build and deploy your application using your preferred program development / distribution method.", "Chapter 1 introduces background concepts required to understand and use WebBot. The background material covers JACK, the Servlet API, Servlet Containers, JavaServer Pages and the WebBot architecture.", "Chapter 2 describes how to develop and run a WebBot application. It begins with installation instructions and an overview of the typical directory structure of WebBot applications. This is followed by a description of how to set up Servlet Container configuration files. The next section describes the JACK definitions required to make your application interact with the WebBot layer. The chapter concludes by setting out the steps required to build and run a WebBot application.", "Chapter 3 presents a simple tutorial example which takes you through the steps required to code, build and run a WebBot example. The tutorial example does not make use of ", "sessions", ". Sessions are used to maintain separate user interaction threads.", "Chapter 4 augments the Chapter 3 example so that it handles sessions.", "To facilitate your reading of this manual, we have adopted certain typographical conventions:", "In addition to this manual, you may need to consult:", "You may find useful information and updates at the Agent Oriented Software Pty.Ltd. web site, ", "http://www.agent-software.com", ".", "WebBot ", " is a framework which supports the mapping of HTTP requests to JACK event handlers, and the generation of responses in the form of HTML pages. Using WebBot, you can implement a web application which makes use of JACK agents to dynamically generate web pages in response to user input.", "The current version of WebBot extends the Java Servlet API v2.3 to enable interfacing with JACK. With WebBot, you can effectively embed a JACK application within a web server and have it respond to HTTP requests: for example, from a browser.", "Before using WebBot, it is helpful to have an understanding of the major components it uses. Apart from the JACK Agent Language itself, the most important component is the Java Servlet API v2.3. For our purposes (i.e. HTTP requests), servlets are Java components which run within a web server and generate responses to HTTP requests. WebBot extends the Java Servlet API v2.3 ", " to enable integration with JACK.", "WebBot provides a mechanism for dynamically generating web pages based on the reasoning of JACK agents. Although it is entirely possible to write Java code which dynamically generates the HTML page to be returned to the client browser, there is a much more straightforward way of achieving the same end. WebBot makes use of JavaServer Pages ", " ", " (JSPs). JSPs ", " enable the specification of the structure of the web page as a mix of HTML and ", "scriptlets", ". Scriptlets ", " are Java code fragments that specify how to generate the dynamic portions of the web page. A JSP compiler ", " is used to compile the JSP page into Java code which will generate the web page at runtime.", "JACK, the Servlet API and JavaServer Pages are outlined in the sections below.", "JACK Intelligent Agents\u00ae  ", " is a Java-based ", "agent-oriented", " programming environment. Agent-oriented programming ", " facilitates the implementation of autonomous computational entities, or ", "agents", ", which exhibit rational decision-making behaviour. The autonomous ", " nature of these agents makes them ideally suited to solving problems of a distributed and real-time nature. Web-based applications by their very nature are distributed, and should ideally provide real-time response.", "Through the medium of a ", "web server", ", web applications have been used successfully to service client requests over the web. However, the programming languages used to implement such web applications (e.g. PHP or ASP) ", " ", " provide little or no support for the implementation of intelligent reasoning behaviour. The JACK Agent Language, on the other hand, has been designed from the ground up to support the encoding of intelligent reasoning processes into its agents. This, coupled with the autonomous nature of JACK agents, means that it is well-suited to the task of providing an intelligent back-end to web-based applications.", "Before designing and implementing a web-based application using the JACK Agent Language, you will need to have a fairly thorough understanding of the JACK Agent Language and its capabilities. This can be acquired by attending the training courses offered by Agent Oriented Software Pty. Ltd., and by reading the ", "Agent Manual", ". Note that an understanding of JACK Agent Language ", "threads", " is integral to making full use of the flexibility offered by WebBot.", "A servlet ", " ", " is a Java component which runs within a servlet container ", ", such as Tomcat (used in this manual). Servlets conform to the HTTP request/response communication model, in which the client submits a request and then receives a response to that request. WebBot servlets extend the HTTP-specific aspect of the Servlet API. Servlets are Java objects and have a ", " ", "service", " method which has a ", "request", " ", " and a ", "response", " ", " parameter. The ", "request", " parameter contains the data sent by the client. HTTP-specific servlets can support HTTP methods such as ", "GET", " ", " and ", "POST", ", ", " and hence can access information such as that provided in HTML ", "forms", ".", "When the user types in a URI ", " (Uniform Resource Identifier) which is handled by a particular servlet, the Web server which hosts that URI will invoke the servlet in question. For example, to invoke the ", "calculator", " servlet hosted at ", "www.webbot.example.com", ", the user would enter the following URI:", "A web page containing an HTML ", "form", " ", " which is to be processed by the ", "calculator", " servlet, could contain the following ", "form element", ":", "where ", "appform", " is used by the ", "calculator", " servlet to determine how to process the form. This will be illustrated in the chapter titled ", "Tutorial Examples", ".", "JavaServer Pages (JSPs) ", " ", " use XML-like tags and Java scriptlets to specify how to generate the content of a web page. JSPs are compiled into Java; the Java code is used to generate the web page at runtime. Although it is possible to generate the complete response page within a servlet without using a JSP ", " file, JSPs provide a means of separating the page's logic from its presentation to the user. This simplifies the design and implementation of dynamically-generated web pages, because the static portions can be hard-coded as HTML in the JSP file and the dynamic portions included as Java scriptlets.", "When a request object is received from the client, the servlet sets various parameters that are passed back in the response object. These parameters can be referenced from within the JSP ", " file (within scriptlets). Each scriptlet (a piece of Java code between \"", "<%", "\" and \"", "%>", "\") is executed, and if it is an expression beginning with an \"=\" sign followed by a parameter name (e.g. ", "=parameterName", "), the parameter value is inserted in place in the JSP file. These parameter values are interleaved with the static portions of HTML to form a page which is passed back to the client.", "Typically, before the application is deployed, each JSP ", " file is converted into a ", ".java", " file which is then compiled into a ", ".class", " file for inclusion in the servlet.", "The example below illustrates a very simple JSP ", " file which displays an email address obtained from the servlet. The scriptlets are ", "bolded", " and explained in the comments (demarcated by \"", "<!--", "\" and \"", "-->", "\").", "In the above example, if the email address were ", "info@gadget-software.com", ", the output would be:", "WebBot should work with any Servlet Container", " implementing the Java Servlet API v2.3 ", ". Tomcat 4.0.4 is one such implementation and the one with which WebBot has been most extensively tested.", "Tomcat ", " is the Servlet Container that is used as the reference implementation for Java Servlets and JavaServer Pages (the latter is called \"JASPER\" in Tomcat 4.0.4). It has been developed as part of the Jakarta Project (", "http://jakarta.apache.org/", ").", "This section outlines the general architecture of the WebBot framework in terms of the major components that constitute a deployed WebBot application. The processing steps and information flow that characterise a running WebBot application will then be described, followed by an overview of the major classes which make up WebBot.", "The figure below shows a high level view of the architecture of a general WebBot application. It is a three tiered architecture, with the Servlet Container at its base. The Servlet Container interacts with the client application, accepting HTTP requests and passing them on to the appropriate servlet in the WebBot layer. The WebBot layer performs some data marshalling, then passes on the request as a JACK ", "event", " to the appropriate agent in the JACK Application layer. The agent's response is passed back through the three layers and is routed to the client as a new web page. The role of each layer is described in more detail below.", "Figure 2-1: ", "JACK WebBot Architecture", "The Servlet Container ", " implements the Servlet API and a JSP ", " compiler. When the Servlet Container receives an HTTP request, it determines which servlet, if any, should handle it and invokes the servlet in question, passing it the HTTP request. If the URL pattern ", " of the request does not map to any servlet, the Servlet Container will respond to the client with a \"404\" error, indicating that the requested URL does not exist (this response page can be tuned for a particular application). Assuming that a servlet was found for the URL in question, the Servlet Container will generate an HTML page to return to the client; this page will be created by instantiating the JSP file returned by the servlet. Typically the JSP file will contain scriptlet-based references to various parameters assigned by the JACK Application layer.", "The WebBot layer extends ", "HttpServlet", ", providing a framework for accessing the Servlet API from the JACK Agent Language. To this end, it provides the following functionality:", "This layer is described further in the section ", "JACK WebBot Servlet", ".", "This is the layer in which you will place all of your JACK code. This layer defines how your application will respond to incoming events. Generically speaking, the application will set a number of response parameters and it will return a JSP ", " file to be instantiated by the Servlet Container.", "In the previous section, the functionality of each architectural layer was outlined, and the runtime behaviour of each layer was explained. This section will look at the processing steps followed by WebBot applications, and relate those steps to the three layers and the interactions between those layers.", "In a typical interaction between a client and a WebBot application, the Servlet Container receives an HTTP request from the client, selects a servlet based on the URL pattern of the HTTP request and passes the request to the appropriate WebBot servlet. WebBot converts the request into a ", "WebRequest", " event. This event is posted and will trigger one of the JACK agent's session-selection plans. This sets off a computational sequence culminating in the assignment of values to variables referenced in the JSP response file, i.e. the JSP ", " file to be used by the Servlet Container to generate a response page for the client. A reference to that JSP file is then returned to the Servlet Container, which executes the scriptlets in the JSP file and sends the new page to the client.", "These steps are described in more detail below. Because the JACK Application layer extends the WebBot layer and invokes methods within that layer, the combined behaviour is described in the one section.", "The interaction begins when the Servlet Container receives a HTTP request from the client. The complexity of this request depends on your application; for example, it might have been generated by an HTML ", "form", " and could contain a sequence of attribute / value pairs. The configuration file ", "web.xml", " ", " defines the mapping between a given URL pattern and the servlet which handles HTTP requests matching that URL pattern. The Servlet Container uses this mapping to pass the request to the appropriate WebBot servlet.", "The WebBot class, ", "WebPortal", " ", ", implements the ", "javax.servlet.Servlet", " interface by extending the class ", "javax.servlet.http.HttpServlet", ". When an incoming HTTP request is received from the server, the ", "WebPortal", " checks to see whether there is an agent to handle it. If there is not an agent, then one is created. This request-handling agent (termed the \"root\" agent", ") has special status: it is responsible for dispatching an appropriate ", "WebSessionRequest", " event, based on the make-up of the ", "WebRequest", " event.", "All WebBot applications are structured as shown in the figure below. The ", "WebPortal", " servlet takes the incoming HTTP request and uses it to generate a ", "WebRequest", " event. This event should trigger the session-selection plan ", " in the root agent. The session-selection plan determines which \"session\" agent ", " should handle the request. It then uses that agent's ", "createSessionRequest", " method ", " to create a ", "WebSessionRequest", " event", ". This event will then trigger one of the session agent's plans which, all being well, will set various parameters in the response object and will determine which JSP ", " file the Servlet Container should use to generate the response page.", "Figure 2-2: ", "WebBot Execution Structure", "The ", "WebPortal", " class ", " is a ", "HttpServlet", " that handles HTTP requests. The servlet is configured with the parameters ", "type", " and ", "name", " in the file ", "web.xml", ". These parameters specify the class and instance name of the agent that handles incoming requests. When the ", "lookupHandler", " method ", " is invoked, if there is no agent of the specified ", "name", ", the ", "WebPortal", " creates one of the specified ", "type", " with the specified ", "name", " (specified in ", "web.xml", "). When the ", "doGet", " ", " or ", "doPost", " method ", " is invoked, the ", "WebPortal", " creates a ", "WebRequest", " event and posts it to the agent using ", "postEventAndWait", ".", "The application's request-handling agent must implement this interface. The interface has one method, ", "public boolean handle", ".", "The ", "WebSessionAgent", " ", " class implements ", "HttpSession", " and provides methods for handling ", "WebSessionRequest", "s, and other session-related activities such as adding a \"", "jsessionid", "\" ", " to a URL (", "sessionURL(String url)", ") and storing values to be used in the returned JSP page (", "putValue(String key, Object obj)", ").", "Sessions ", " form part of the Servlet API. Typically, they are used to manage separate client interactions with the server. WebBot provides support for the implementation of sessions through the provision of the ", "WebSessionAgent", " and ", "WebSessionRequest", " classes. The Servlet API provides support for tracking sessions through the use of ", " \"cookies\". However, this method of tracking sessions is fairly limited. For example, if the client session occurs on a machine which is shared by others (e.g. in an internet cafe environment), then it is feasible for a new user to pick up on the previous user's session. Another drawback of cookies is that they are restricted to one session per user (i.e. browser).", "A safer method of tracking sessions ", " is to use ", " URL rewriting. A session identifier is stored in a hidden attribute on the web page. This is then written into the URL before sending the HTTP request back to the server. This is the preferred method when using WebBot. If you store the session id in the attribute \"", "jsessionid", "\",", " and include that in the URL, then the ", "WebPortal", " ", " ", "setup", " method will extract it and store it in the parameter \"", "id", "\". ", "WebPortal", " will also pick up the \"", "referrerid", "\" and store it in the parameter \"", "refid", "\". This can be used to determine if the web page has a referrer, and so can be used in most cases to prevent someone from dropping in on a session (unless, of course the person has written their own browser).", "This chapter describes how to develop and run a WebBot application, beginning with the installation instructions for WebBot. Subsequent sections in this chapter cover the steps required to develop an application. The final section describes how to run the application.", "To develop and deploy a WebBot application, you will need to define the Java Servlet API v2.3", " specified in the ", "web.xml", " ", " configuration file. This is covered in the section ", "Configuring The Servlet Container", ". The Servlet Container needs to be supplied with the set of JSP ", ", HTML and ancillary files required by your application, described in the section ", "JSP and Ancillary Servlet Container Files", ". Your JACK application will make use of some WebBot classes and will follow certain conventions which are explained in the section ", "JACK Definitions", ". Finally, you will learn how to build and run your WebBot application in the section ", "Building and Running a JACK WebBot Application", ".", "If you have problems installing WebBot, please AOS technical support.", "The installation process for WebBot is simple and straightforward:", "Note that the examples in this manual can be found in ", "aos/jack/examples/webbot", "Figure 3-1: ", "Standard WAR layout", "The figure above shows the directory structure for a typical Web Application Archive (WAR). The Web Application Archive file is used to package up the web application so that it can be deployed on multiple platforms. The WAR format is shown in the above figure. The root directory contains the files that are served up to the client browser (e.g. HTML, JSP, CSS, JS and GIF files). If required, these files can be partitioned into a subdirectory structure. The ", "WEB-INF", " directory contains the application's Web Application Deployment Descriptor, the file ", "web.xml", ". ", "WEB-INF", " also contains the ", "classes", " and ", "lib", " directories. The ", "classes", " directory contains the application's Java class files. The ", "lib", " directory contains JAR files that house library files used by your application.", "Your WebBot application should be organised as shown under the root directory in the figure below. The ", "web", " sub-directory corresponds to the root of the WAR structure shown in the figure above. The scripts are held in the root directory and the source files are located in the ", "src", " sub-directory.", "Figure 3-2: ", "Typical JACK WebBot Application Directory Structure", "Configuring the Servlet Container to serve up a particular WebBot servlet requires that the file ", "web.xml", " ", " be configured. This section only covers the main parameters required for WebBot. You should probably use the ", "web.xml", " ", " file that came with your installation and edit the parameters specified below. The information provided below will suffice for most cases, however, for more detailed information, please consult your Servlet Container's documentation.", "Typically, most of the parameters in ", "web.xml", ", can be left unchanged. Hence, the most straightforward approach to developing a new WebBot application is to take a copy of ", "web.xml", " from your installation, and edit the parameters described in this section. Should your particular application require that you alter parameters not covered in this section, then refer to the documentation of your particular Servlet Container implementation.", "The ", "web.xml", " ", " configuration file defines the ", "servlets", " that constitute your application. It contains two major defining elements:", "The structure and function of the ", "<servlet>", " and ", "servlet-mapping", " elements are outlined below. Note that all of the elements prefixed by ", "<param-name>", " are WebBot-specific. They occur in a defining element of the following form (N.B. bolded values would be replaced with the actual parameter name and value that pertains to your application):", "Each servlet definition is delimited by \"", "<servlet>", "\" and \"", "</servlet>", "\". The key parameters of the servlet definition are as follows:", " In order for a JACK agent to return a response to the client's browser, there must be some way of generating an HTML page for it. You are free to use any means at your disposal, for example, you could write Java code that dynamically generates HTML pages to be returned to the client browser. WebBot does not mandate how this should be done, but the most straightforward way is to use JavaServer Pages to generate the response pages. These allow you to specify the structure of the web page as a mix of HTML and scriptlets. Scriptlets are Java code fragments that specify how to generate the dynamic portions of the web page.", "The particular mix of JSP, HTML and other files (e.g. ", ".gif", " files) depends very much on your application requirements. Nevertheless, you will usually need to reference data items computed by the JACK agent that handled the client request. To do this, your JSP file contains scriptlets that access the values of the relevant JACK variables. The example below illustrates this. It accesses the value of the variable ", "cost", " and assigns it to the ", "String", " ", "totalCost", ". The variable ", "totalCost", " can then be referenced throughout the JSP file within ", " scriptlets.", "As outlined in the section ", "The Dynamic Behaviour of Jack WEBBOT Applications", ", the ", "WebPortal", " servlet converts an incoming HTTP request into a ", "WebRequest", " event; this event will trigger the root agent's session-selection plan, which will then select the \"session\" agent that should handle the event. The session agent's ", "createSessionRequest", " method then creates a ", "WebSessionRequest", " event that triggers one of the session agent's plans, culminating in the setting of various variables in the response object.", "There are a number of prerequisite classes that your WebBot must import:", "To import the classes listed above, include the set of ", "import", " statements shown below.", "This section outlines the JACK definitions that you will need to include in order for your application to interact with the WebBot layer. At the very least you will need to define:", "The former requirement ensures that you have a ", "root", " agent that can route incoming ", "WebRequests", " to the appropriate ", "session", " agent; the latter requirement ensures that your application can instantiate ", "session", " agents. The two requirements can be satisfied by the one agent definition, i.e. by defining an agent type that ", "extends", " ", "WebSessionAgent", " and ", "implements", " ", "WebRequestHandler", ". Note that you would only adopt this approach if your application did not make use of sessions; this being the case, it would only need a single ", "root", " agent and a single ", "session", " agent, and so they may as well be one and the same agent. The first tutorial example adopts this approach (see ", "The Simple Calculator Example", ").", "The following two sections describe the definitional components and features that the ", "root", " and ", "session", " agents need to incorporate.", "The ", "root", " ", "agent is responsible for routing the incoming request to the appropriate session agent. This is done by invoking the appropriate session agent's ", "createSessionRequest", " method. The ", "WebSessionRequest", " so created will then trigger one of the session agent's plans.", "The root agent should have the following components:", "The ", "session", " agent is responsible for dealing with the client request, setting any required values in the response object and returning a reference to the appropriate response page to be sent by the server to the client. A session agent should ", "extend", " ", "WebSessionAgent", " ", "and should invoke ", "WebSessionAgent", "'s constructor. Minimally, it requires a plan that ", "handles", " ", "WebSessionRequest", " events and sets the ", "response", " data member. This is illustrated in the example below.", "Note that this material is covered in the tutorial examples presented in the last two chapters.", "To build and run a WebBot application, you will need to define a few environment variables, compile your application's JSP files and the JACK files, and finally run the Servlet Container. The environment variables are much the same for both building and running an application; any exceptions to this rule will be highlighted. The sequence of steps required to build and run the application is listed below.", "These steps are encapsulated in scripts in the tutorial example in the section ", "The Simple Calculator Example", ". You may find it useful to use these as a starting point for developing your own WebBot build and run scripts.", "This chapter will take you step-by-step through the creation and running of a simple WebBot application. The example is fairly trivial in its use of the JACK Agent Language; the goal of the example is to demonstrate how to use WebBot, ", "not", " how to program in the JACK Agent Language. The example can be found in ", "aos/jack/examples/webbot/calculator", "The simple calculator will then be extended in the section ", "Extending the Calculator to Handle Multiple Sessions", ". An effort has been made to limit the need to consult other documents, but depending on your computing environment, you may need to consult the documentation that comes with the various third party components used by WebBot (e.g. the installation instructions for your Servlet Container).", "This WebBot example implements a very simple four-function calculator. All of the calculator functions are handled by a single JACK plan, ", "FormResponse", ". Note that if this were a real application it would be preferable to handle each calculator function using a separate plan.", "To use the calculator, enter two numbers into the text fields and then press a button to select the operation to be applied. The JACK agent computes the result (which can be an error message if for example a division by zero occurs) and displays it to the user via the medium of a new JavaServer Page.", "Figure 4-1: ", "Screen Snapshot of the Calculator Web Page", "The calculator device consists of a top row of four buttons, with three panes below. The top pane consists of two text input fields, each accepting a sequence of arbitrary text characters, up to a maximum length of 5. The left field is used to enter the first ", "integer", " operand; the right field takes the second operand (also an integer). Once the two operands have been typed in, the user should then click on one of the four buttons at the top of the calculator. The WebBot application will then apply the arithmetic operation, denoted by the button, to the two operands. If the operands are valid arguments to the chosen arithmetic operator, then the result is displayed in the middle pane (which also contains the result of the previous computation, if any). Otherwise, if the operands are invalid, then an error message is generated and displayed in the bottom pane (which also contains the previous error message, if any).", "If the operator is \"Divide\", the agent also checks to see whether the second operand is zero. If it is, an error string is returned and displayed in the bottom pane. The agent does not check the types of the operands. If you enter non-integers into the operand fields and select an operator, the application will simply bring up a page telling you that there is no such service (rather than specifically flagging it as a type violation).", "In the remaining sections, you will learn how to:", "We have decided to package the WebBot examples as Web Application Archives (WAR files). The Java Servlet Specification version 2.3 defines a web application as: '... a collection of servlets, html pages, classes, and other resources that make up a complete application on a web server. The web application can be bundled and run on multiple containers from multiple vendors.' This statement refers to one of the major advantages of packaging a WebBot application as WAR files. WARs are a delivery mechanism which is portable across different Servlet Containers, running on diverse operating systems.", "The WebBot example code has build scripts that build the source code and package up the resultant class files and static web content into a WAR file. The example WebBot applications have the basic directory structure shown in the next figure.", "Figure 4-2: ", "Directory Structure for the Calculator Example", "This section describes how to modify the build and run scripts so that they reflect the structure of your computing environment. The calculator example is built by executing the script, ", "mkwebapp", ". The ", "mkwebapp", " script will also compile all JACK files into Java and compile all ", ".java", " files into ", ".class", " files. Note that servlet containers often dynamically compile JSP ", " files into class files on demand. However, WebBot must have all JSP files it uses precompiled into classes before the web application is launched. The ", "mkjsp", " script achieves this and is invoked from the ", "mkwebapp", " script.", "The build script, ", "mkwebapp", ", sets up a number of environment variables, invokes ", "mkjsp", " to compile the JSP files, and then invokes the JACK builder, ", "JackBuild", ". The ", "mkwebapp", " script sets environment variables from the ", "servlet.env", " and ", "webapp.env", " files. You should not need to edit the ", "mkwebapp", " file itself. The ", "*.env", " files will however usually require modifications to match your own setup.", "The ", "servlet.env", " file defines three variables required by external scripts. They are JSP_COMPILER, SERVLET_CLASSPATH and SERVLET_CONTAINER_WEBAPPS. These refer respectively to the CLASSPATH definitions required for compiling JSP pages, the Servlet code and the directory in which web applications reside in your particular Servlet Container setup. The ", "servlet.env", " file delivered with the WebBot examples contains details suitable for those using Tomcat 4.x as their Servlet Container. If you are using Tomcat 4.x then the only variable which needs changing should be the TOMCAT_HOME variable at the top of the file.", "Environment variables related directly to the web application itself are stored in ", "webapp.env", ". These include variables for the name of the web application, the directory in which JACK is installed and the path to the directory in which you are developing your application.", "The build script and default *.env files (suitable for Unix systems) are reproduced below:", "The ", "mkjsp", " script also sets environment variables from ", "servlet.env", " and ", "webapp.env", ". However the line in the script which invokes the JSP compiling ", " will need to be modified if you are not using the Apache project's Jasper JSP compiler.", "Once the WebBot Web Application has been compiled by the previous scripts is must be built into a Web Archive (WAR). The ", "mkwar", " script does this and is shown below.", "For your convenience there is an install script provided which builds and installs the Web Application. This script simply calls the previous ", "mkwebapp", " and ", "mkwar", " scripts before copying the WAR file into the Servlet Container's webapps directory. The script is shown below.", "The start script should be executed in order to start the Servlet Container (along with any WebBot Web Applications you have installed into it). The script provided is specific to the Tomcat Servlet Container, and will need to be modified if you are using a different Servlet Container. The start script is reproduced below.", "Use the stop script when you wish to shutdown the servlet container. For example, this is usually necessary when deploying a new version of a web application. Again this script is specific to the Tomcat Servlet Container. The script will require modification if your are using a different Servlet Container. The stop script is shown below.", "This completes the definition of the build, install and run scripts for the tutorial. They provide a good starting point for developing your own WebBot applications. The section, ", "Configuring the Servlet Container", ", deals with the configuration files required by the Servlet Container. If you have followed the installation instructions up to this point, then the tutorial example should be ready to run. The next section will take you through the process of compiling and running the example. Spend a few minutes trying out the calculator; having done so, you will be better placed to understand the subsequent sections that discuss how its functionality is implemented.", "To compile and install the application, run the ", "installit.sh", " script, as shown below:", "To run the Servlet Container follow the steps below:", "Now run your browser (if it's not already running that is!) and point it to the URI: ", "http://localhost:8080/calculator", ". This should bring up the calculator web page. Type a couple of integers into the text fields and then click on one of the buttons (e.g. ", "Add", "). The result will appear in the Results Pane. To generate an error string, enter a zero into the righthand text field, and click on the ", "Divide", " button.", "You are welcome to explore the calculator to your heart's content, but you will quickly become bored. When you have finished, kill the Servlet Container by running the stop.sh script as shown below:", "To configure the Servlet Container to handle our application, a ", "web.xml", " ", " must be created. Other configuration may be required for your particular Servlet Container, so please refer to your Servlet Container's documentation. The Tomcat 4.x Servlet Container should not require any configuration changes other than the WebBot Web Application's ", "web.xml", " file.", "You should be able to leave most of the parameters in a default ", "web.xml", " ", " unchanged. Hence, the easiest approach to developing a new WebBot application is to take a copy of the WebBot version of ", "web.xml", ", and only edit the parameters explained in this section. Of course, your particular application may require that you alter parameters not covered in this section; that being the case, your Servlet Container's documentation should be your first port of call.", "The ", "web.xml", " ", " configuration file defines the ", "servlets", " that make up your application. The tutorial example only has one servlet, but you can create an application containing a number of servlets.", "The file contains two major definitional elements. The ", "<servlet>", " definition is by far the larger, and contains the servlet's initialisation parameters. The ", "servlet-mapping", " defines the mapping between the URL patterns and servlets, i.e. which servlet to run, given a particular URL. The structure and function of the ", "<servlet>", " and ", "servlet-mapping", " elements is outlined below.", "The remaining parameters (", "<init-param>", ") are specific to WebBot, i.e. they are initialisation parameters that pertain to WebBot, rather than the Servlet Container per se. Each initialisation parameter is bounded by ", "<init-param>", " and ", "</init-param>", ". For example", ":", "The WebBot initialisation parameters are as follows:", "As explained in section ", "JavaServer Pages (JSP)", " in the JACK WebBot Architecture chapter, by far the easiest way to create web pages with WebBot is to use Java Server Pages (JSP) ", ". This tutorial example adopts this approach. The class file compiled from, ", "$WEBAPP_DIR/web/calculator.java", ", is used to generate a web page when the server gets a URI of the form ", "*.jsp", ". This file is generated from the file ", "calculator.jsp", ". If you are familiar with HTML, then, having seen the screen snapshot in the figure above, you will be expecting the ", ".jsp", " file to reference a collection of ", ".gif", " files. Indeed, the image is made up of many small ", ".gif", " files organised into table cells. To reduce the clutter in this ", ".jsp", " file, the table rows containing the ", ".gif", " references are inserted using ", "include", " directives. The include files have names of the form \"", "tr-graphics-*.txt", "\". Despite this, there remains a fair amount of table data cell clutter (bounded by ", "<td>", " and ", "</td>", "). To further improve the readability of ", "calculator.jsp", ", such table data cells are inserted via ", "include", " directives of files named \"", "td-cells-*.txt", "\".", "The file, ", "calculator.jsp", ", is included below. Although the file has been formatted to improve its readability, HTML can be hard to read at the best of times. Essentially the file consists of a few lines of HTML header information, followed by the retrieval of some string values from the WebBot agent; this is followed by an HTML ", "form", " whose input fields are spread across a number of HTML table cells. The final part of the table contains the rows that hold the \"Results\" and \"Errors\" strings (retrieved by the ", "getValue", " scriptlets at the start of the file). The file ends with a few HTML syntactic necessities.", "To make full use of WebBot you will need to have a solid understanding of ", "interactive forms", " in HTML. To understand the example below, you only need to know a few things about HTML forms:", "You should now be ready to cast your beady eye over ", "calculator.jsp", ", shown below. To help you focus on the key sections, they are emboldened.", "So, if the user enters \"4\" into the left text field and \"2\" into the right field, and clicks on the \"Multiply\" button, then the URI submitted to the server will be as follows (assuming that the ", "x", " and ", "y", " coordinates are ", "31", " and ", "34", " respectively):", "The request-handling JACK agent is fully defined in the file:", "The file looks much like any other ", ".agent", " file: it defines an agent, the events handled, the plans used, and a private beliefset. However, if you look closely, you will notice a number of differences with respect to the ", ".agent", " files you have seen in the past:", "Before looking at the constituent parts of ", "DispatcherAgent.agent", " in more detail, it is worth briefly restating the functionality expected of this agent. The ", "DispatcherAgent", " agent implements a very simple four-function calculator. All of the calculator functions are handled by a single JACK plan (", "FormResponse", "). The ", "DispatcherAgent", " agent applies an arithmetic operator to two integer operands and returns the result. If the operands are valid arguments to the chosen arithmetic operator, then the result is displayed in the middle pane (which will also contain the result of the previous computation, if any). However, if the operands are invalid arguments to the selected operator, then an error message is returned.", "The agent needs to maintain a history of the previous two results and error messages (if any) so that these can be returned and displayed on the web page. Note that the agent does not check the types of the operands. If the operands are non-integers, the agent will simply fail to service the request. This leads Tomcat to bring up a web page indicating that there is no such service, rather than specifically flagging it as a type violation. Recall that this page (", "NoServiceErrorPage.jsp", ") is referenced in ", "web.xml", " ", " via the ", "noservice", " parameter.", "The nature of the interaction that any request-handling agent (such as ", "DispatcherAgent", ") needs to have with the client is as follows. At its simplest, the agent receives an incoming ", "WebRequest", ". This event's signature will either trigger one of the agent's session-selection plans, or fail to match any of its plans. In the latter case, and in fact if there is a failure of any kind, it will result in the web page specified in the ", "noservice", " parameter in ", "web.xml", ".", "The session-selection plan is supposed to determine which ", "WebSessionAgent", " to dispatch a ", "WebSessionRequest", " to. The ", "WebSessionRequest", " is created by invoking the agent's ", "createSessionRequest(WebRequest event)", " method.", "The ", "WebSessionRequest", " so created will then trigger one of the session agent's plans according to the normal JACK Agent Language rules. This sets off a computational sequence culminating in the assignment of variables that will be part of the response page returned to the client. More specifically, the agent's ", "putValue", " method will store the named parameters' values in the response object, and will also set the value of the response page (e.g. ", "calculator/calculator.jsp", ").", "This tutorial example could hardly be simpler in terms of its use of WebBot, and as a result, the imported classes are the very minimum required to build a WebBot application.", "The ", "DispatcherAgent", " agent handles incoming requests. It ", "extends", " ", "WebSessionAgent", " and ", "implements", " ", "WebRequestHandler", ". In general, your WebBot application will define such an incoming-request-handling agent. This agent can then either handle the request fully, or dispatch the request to one of a number of session-handling agents.", "The agent definition is shown below. The events and plans will be explained in the following two sections. The beliefset is initialised using the contents of the file ", "history.ini", ".", "Apart from its constructor that invokes the ", "WebSessionAgent", " constructor, ", "DispatcherAgent", " defines a single method, ", "handle(WebPortal p, HttpServletRequest q, HttpServletResponse r)", ".", "DispatcherAgent", " handles two types of event, the standard WebBot ", "WebSessionRequest", " event, and the ", "WebDispatch", " event (defined below). The ", "WebRequest.setup method", " performs various essential setup operations internal to WebBot.", "The beliefset holds 4 elements that will be accessed using the ", "parameter", " field. The four parameters are:", "These are all initialised to the empty string. The beliefset definition is shown below.", "DispatcherAgent", " has three plans: ", "SelectSession", ", ", "SimpleJSPResponse", " and ", "FormResponse", ".", "The ", "SelectSession", " plan is responsible for determining which ", "WebSessionAgent", " to dispatch a ", "WebSessionRequest", " to (using the method ", "findAgent", " shown below). In this example, ", "findAgent", " merely returns the agent itself (i.e. ", "DispatcherAgent", "). A more typical example would select the agent appropriate to the session in question (see chapter \"Tutorial Example: Multiple Sessions\"). This ", "SelectSession", " plan also creates a ", "WebSessionRequest", " by invoking the agent's ", "createSessionRequest(WebRequest event)", " method. Note that both the agent and the ", "WebSessionRequest", " are returned as data of the invoking event.", "The ", "FormResponse", " plan implements the functionality of the four-function calculator. Because all of the functionality has been packed into a single plan, the plan body is quite large. To help you focus on the sections that pertain to WebBot features, those parts are emboldened. This plan handles ", "WebSessionRequest", " events and uses the ", "WebSessionAgent", " interface. The plan is relevant if the ", "orig.webapp_path", " of the event is equal to \"", "/form.webform", "\". This comes from the \"", "action", "\" of the \"", "form", "\" that the calculator web page submits. ", "orig.webapp_path", " is a convenience provided by WebBot. It is constructed by concatenating the PathInfo and ServletPath variables from the original request. The resultant ", "orig.webapp_path", " variable is therefore guaranteed to hold all of the request URL after the servlet name. So for example for the calculator servlet the request ", "http://localhost:8080/calculator/form.webform", " will have an orig.webapp_path of \"/form.webform\". It is recommended that ", "orig.webapp_path", " path is used rather than ", "orig.path", " or", "orig.servlet_path", " as their values depend on servlet mappings and are defined within ", "web.xml", ".", "With regard to WebBot, there are three important activities in the plan's body:", "The only other code fragment of interest is the ", "Exception", " that is triggered when the ", "try", " statement fails. This can occur, for example, if the path to the JSP page specified in the ", "response", " is incorrect. In a deployed application, we would probably want to generate a user-friendly error dialogue of some kind.", "The ", "SimpleJSPResponse", " plan is a cut-down version of ", "FormResponse", ". It is triggered when the page is loaded, and merely returns the current values of the four beliefset elements, ", "result", ", ", "prevResult", ", ", "error", " and ", "prevError", ".", "This chapter presented a simple application of WebBot that combines the properties of ", "WebRequestHandler", " with those of ", "WebSessionAgent", " into a single agent, ", "DispatcherAgent", ". This agent handles incoming ", "WebRequest", " events and uses the ", "createSessionRequest", " method to create a ", "WebSessionRequest", " events. This event triggers a response from the session agent. Because the agent combines session-selection functionality with that of a session agent, the ", "WebSessionRequest", " is actually handled by the same agent, ", "DispatcherAgent", ". The session agent (", "DispatcherAgent", ") sets various result parameters in the response object and returns a reference to the response page, ", "calculator.jsp", ".", "The next chapter will augment this example so that the dispatch functions and session responses are handled by separate agents.", "The simple four-function calculator example illustrated how to implement an agent that responds to incoming HTTP requests. If you were to deploy the application, you would quickly discover that it does not discriminate between users. The calculator maintains a single history of results; all users would see the same history. This is unsatisfactory because each user should see their own unique calculator interaction history, not the merged history of all of the users' calculations. Indeed, the user might have two browser windows open, each with a separate history of arithmetic calculations. The server must maintain a unique interaction thread for each window; this functionality is provided by ", "sessions", ".", "Sessions ", " form part of the Servlet API. WebBot provides support for the implementation of sessions through the provision of the ", "WebSessionAgent", " and ", "WebSessionRequest", " classes.", "Although the Servlet API provides support for tracking sessions ", " through the use of ", " ", "cookies", ", this method is fairly limited. For example, if the client session occurred on a machine which is shared by others (e.g. in an internet cafe environment), then it is feasible for a new user to come along and pick up the previous user's session. Another drawback of cookies is that they restrict you to one session per browser, i.e. if the user tries to have two browser windows open accessing the servlet, they will map to the same session.", "A safer method of tracking sessions ", " is to use ", " URL rewriting. In this approach, a session identifier is stored in a hidden attribute on the web page. This is then written into the URL before sending the HTTP request back to the server. This is the preferred method when using WebBot. If you store the session id in the attribute \"", "jsessionid", "\", ", " and arrange for that to be included in the URL, then the ", "WebPortal", " ", " ", "setup", " method will extract it and store it in the parameter \"", "id", "\". ", "WebPortal", " will also pick up the \"", "referrerid", "\" and store it in the parameter \"", "refid", "\". This can be used to determine if the web page has a referrer, and so can be used in most cases to prevent someone from dropping in on a session (unless of course, the person has written their own browser).", "As alluded to in the previous section, the simple calculator example will be modified so that it can maintain a separate interaction thread for each calculator browser window instance. The ", "DispatcherAgent", " will be broken up into two separate types of agent: one which performs the message dispatch function, and another which manages the interaction for a given session. The former will still be named ", "DispatcherAgent", " and there will be only one such agent instance in the application. The latter will be named ", "SessionCalculator", " and at any one time, there will be as many instances as there are sessions", ".", "The multi-session example can be found in the ", "sessioncalc", " directory under the ", "examples", " directory. The directory structure is very similar to that of the simple calculator example (previous figure) and is shown in the figure below.", "Figure 5-1: ", "Directory Structure for the Multi-Session Calculator Example", "The build and run scripts are largely unchanged from the previous simple calculator example. The webapp.env should be the only file requiring modification. The updated file is shown below.", "The file ", "web.xml", " ", " requires that the ", "<servlet-name>", " be altered to reference the multi-session version of the calculator:", "The remaining parameters need to be changed so that ", "calculator", " is replaced by ", "sessioncalc", ";", "This completes the definition of the build and run scripts for the multi-session calculator example.", "To compile and install the application, run the ", "mkwebapp", " script, as shown below:", "To run the Servlet Container follow the steps below:", "Now run your browser (if it's not already running that is!) and point it to the URI: ", "http://localhost:8080/sessioncalc", ". This should bring up the calculator web page. Type a couple of integers into the text fields and then click on one of the buttons (e.g. ", "Add", "). The result will appear in the Results Pane. To generate an error string, enter a zero into the righthand text field, and click on the ", "Divide", " button.", "Open another browser window and point it to the same URI (i.e. ", "http://localhost:8080/sessioncalc", "). Perform some different calculations in each browser window and verify that each window displays a separate history in the Results Pane and/or the Errors Pane. When you have finished, kill the Servlet Container by running the ", "stop.sh", " script.", "The easiest way to create web pages with WebBot is to use Java Server Pages (JSP) ", ". The file, ", "$WEBAPP_DIR/web/calculator.java", ", is used to generate a web page when the server gets a URI of the form ", "sessioncalc/*.jsp", " or ", "sessioncalc/*.webform", ". This file is generated from the file ", "calculator.jsp", ". In keeping with the approach adopted for the calculator example in the chapter titled \"Tutorial Example: Simple Calculator\", the use of ", "include", " directives reduces the clutter in ", "calculator.jsp", ". The include files have names of the form \"", "tr-graphics-*.txt", "\" and \"", "td-cells-*.txt", "\".", "The file, ", "calculator.jsp", ", is very similar to the file, ", "calculator.jsp", ", from the \"Tutorial Example: Simple Calculator\" chapter. The changes pertain to the use of sessions ", ", and are shown below.", "Recall that the main JSP file, ", "calculator.jsp", ", will compile into the file ", "calculator.java", ". In order to make use of the WebBot session facilities, this ", ".java", " file needs to import the ", "WebSessionAgent", " package. The first ", " scriptlet, below, does just that. The second ", " scriptlet declares an instance of ", "WebSessionAgent", ", and the third retrieves the session using ", "request.getsession()", ".", "The ", "GET", " action has been changed to reference ", "sessioncalc", " rather than ", "calculator", ", but is otherwise the same as that in ", "calculator.jsp", " in the \"Tutorial Example: Simple Calculator\" chapter. The subsequent scriptlet invokes the method, ", "WebSessionAgent.sessionFormMarkup()", ", on the ", "WebSessionAgent", " instance, ", "me", ".", "As before, the form is sent to the server using an ", "HTTP GET request", ". The data specified in the form is appended to the URI found in the \"ACTION\" attribute of the form, and is prefixed by a \"?\". The form data will include the ", "jsessionid", " ", " added in by the ", "WebSessionAgent.sessionFormMarkup()", " method. For example, if the server URI is \"", "localhost:8007", "\", the \"ACTION\" attribute is \"", "/sessioncalc/form.webform", "\", the ", "jsessionid", " is ", "SessionCalc_1", " and the form data contains two values \"", "operand1=5", "\" and \"", "operand2=6", "\", then the URI would be: \"", "http://localhost:8080/sessioncalc/form.webform?jsessionid=SessionCalc_1&operand1=5&operand2=6", "\". Additionally, the attribute/values representing the button that was pressed would also be included, for example: \"", "add.x=58&add.y=28", "\". Recall that INPUT elements of type \"image\" will submit ", "two", " parameter/value pairs. The first parameter is of the form \"", "name", ".x\", and the second \"", "name", ".y\". The values of these parameters are the ", "x", " and ", "y", " window coordinates of the mouse pointer when the mouse button was pressed. These coordinates are not used in this tutorial example. All the session agent needs is an indication of which button was pressed.", "This agent takes on the role of the ", "root", " agent shown in Figure [give name]. The agent definition is reproduced below. In contrast to the non-sessions example in the chapter titled \"Tutorial Example: Simple Calculator\", this version of ", "DispatcherAgent", " does not extend ", "WebSessionAgent", "; this is because it is only responsible for session-selection and dispatch. Managing an individual session is the responsibility of the ", "SessionCalculator", " agent.", "The ", "DispatcherAgent", " handles incoming ", "WebRequest", "s (specifically, ", "WebDispatch", " events). Its ", "SelectSession", " plan is used to match the request to an existing session. If the ", "WebRequest", " does not match an existing session, then the plan ", "DefaultRequestHandler", " creates a new session to handle it and stores a reference to that agent in its ", "Sessions", " beliefset. The ", "MonitorSession", " plan kills off the session agent if it has been inactive for 10 minutes or more. The ", "handle", " method uses the ", "createSessionRequest", " method to create a ", "WebSessionRequest", " event that then gets posted using ", "postEventAndWait", ".", "DispatcherAgent", " has three plans: ", "DefaultRequestHandler", ", ", "MonitorSession", " and ", "SelectSession", ".", "This plan handles requests by creating a new session agent to forward the request to. The ", "WebPortal.getInitParameter", " method returns the agent type. The agent type is specified in the file ", "web.xml", ". The agent is given a unique name of the form ", "SessionCalc_<n>", ". A new session agent is created and stored in ", "WebDispatch.a", ". The session is added to the sessions ", " beliefset as a tuple containing the agent name and the ", "WebSessionAgent", ".", "This plan is triggered when a ", "SessionAccess", " event is received. It looks up the session entry for the event, ", "ev", ", and waits for 10 minutes. The ", "SelectSession", " plan updates the session's time entry when a ", "WebDispatch", " event is received for the session. Effectively, the clock is reset every time there is activity from a session (i.e. when a new ", "ev.id", " is asserted). This is because the ", "sessions.get(ev.id, a, ev.time)", " statement will fail if there is a new assertion for that key. If the ", "sessions.get", " statement does not fail, then the session is removed from the beliefset and the agent is destroyed via the ", "finish()", " method.", "This plan determines which ", "WebSessionAgent", " to dispatch a ", "WebSessionEvent", " to. This is achieved by looking up the ", "ev.id", " in the ", "sessions", " beliefset. The session is re-asserted with a new time signature (effectively resetting the session timeout clock).", "This event is posted when a new session is added to the sessions beliefset (see ", "DispatcherAgent's BeliefSet", " (", "Sessions.bel", ")).", "This event is unchanged from that presented in the \"Tutorial Example: Simple Calculator\" chapter. The ", "WebRequest.setup method", " performs various essential setup operations internal to WebBot.", "This beliefset holds all of the active sessions. When there is activity on a session, a new assertion is added to the ", "Sessions", " beliefset by the plan, ", "SelectSession.plan", ". This has the side effect of posting a ", "SessionAccess", " event via the ", "newfact", " method. A given assertion is removed when there has been no activity on its session for 10 minutes or more (", "MonitorSession.plan", ").", "This agent is responsible for responding to incoming requests. It implements the functionality of the four-function calculator (previously embedded within the ", "DispatcherAgent", " in the \"Tutorial Example: Simple Calculator\" chapter).", "Apart from changing the response to reference ", "sessioncalc/calculator.jsp", ", this plan is unchanged from that presented in the chapter titled \"Tutorial Example: Simple Calculator\"", "This plan is unchanged from that presented in the chapter , \"Tutorial Example: Simple Calculator\"", "This beliefset definition is unchanged from that presented in the chapter , \"Tutorial Example: Simple Calculator\". The only difference is that it is now a part of the ", "SessionCalculator", " agent instead of the ", "DispatcherAgent", " that previously included the sessions ", " functionality.", "This chapter extended the simple calculator application from the chapter , \"Tutorial Example: Simple Calculator\" so that it handles multiple sessions. The ", "DispatcherAgent", " of the previous chapter was divided into two separate agents, one implementing ", "WebRequestHandler", ", the other extending ", "WebSessionAgent", ". The former agent (named ", "DispatcherAgent", ") handles incoming ", "WebRequest", " events and uses the ", "createSessionRequest", " method to create a ", "WebSessionRequest", " event. The ", "WebSessionRequest", " event triggers a response from the session agent, ", "SessionCalculator", ". The session agent (", "DispatcherAgent", ") sets various result parameters in the response object and returns a reference to the response page, ", "calculator.jsp", ".", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Copyright \u00a9  2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "Discrete event simulation is concerned with the modelling of behaviour in terms of entities which undergo discrete state transitions over time. There are various ways in which entity behaviours can be partitioned \u2013 these  partitionings are known as ", "simulation world views", ". Traditionally, three major world views have been distinguished, namely: activity, event and process (Kreutzer, 1986). JACK Intelligent Agents\u00ae  (JACK)", " supports a new world view that we have called the ", "BDI world view", ". In this world view, entity behaviours are encapsulated within agents and the JACK execution model is used to drive the simulation. The BDI world view provides a much richer and more intuitive interaction model than is afforded by the traditional world views and has proven to be especially useful for the simulation of distributed systems whose component entities exhibit complex internal behaviours and rich interaction models, both with each other and with their environment.", "JACK and JACK Teams\u0099  (Teams)", " provide concepts, programming constructs and run-time support to directly support the BDI world view, thereby making simulation model development using the BDI world view significantly easier.  JACK also has constructs which facilitate the interfacing of JACK agents with existing applications and, since JACK is a superset of Java, the JACK programmer has access to all of the Java language and to existing Java classes and frameworks.  JACK is neutral with respect to time management", " \u2013 three types of clock (real time, dilated and simulation) are supported.  Every agent has a timer member which is by default set to the real time clock.  Clocks", " can be shared between agents on either a machine (real time) or process (dilated or simulation) basis. Inter-machine sharing of real time clocks and inter-machine/inter-process sharing of dilated and simulation clocks is the responsibility of the application developer. In summary, using JACK for simulation model development offers the following advantages:", "JACK and Teams have been used to develop simulations in areas such as", "In addition, they have been used to augment the behaviour of entities in existing simulation environments, such as CAEN, OTB and STAGE.", "These applications have been concerned with assessing the feasibility of particular strategies and tactics in the domains of interest \u2013 performance and sensitivity analyses were not conducted. Such analyses require that simulation runs are repeatable. This is not an issue with conventional simulation languages, as the simulation executes within a single thread of control within a single process and repeatability is guaranteed. However, when the simulation executes over multiple threads or multiple processes, repeatability needs to be explicitly addressed. JACK was designed so that within a single JACK process, agent execution is repeatable so long as there is no inter-agent communication. In practice this means that repeatability", " is constrained to applications consisting of a single agent.", "In addition, while the BDI paradigm dictates how a simulation operates, it does not provide any indication as to how the underlying software architecture should be structured, other than that the particular application will be modelled using agents. Furthermore, our experience has shown that the creation and initialisation of agents and teams of agents can become a significant component of a simulation project as the developer is totally responsible for agent creation and initialisation. Typically this means that each application requires a bespoke main program that creates and initialises the required agents. JACK provides the JACOB\u0099  Object Modelling Language (JACOB) for efficient object transport and initialisation. JACK also provides extensive support for the graphical display of application execution (graphical plan tracing, design diagram tracing, agent interaction diagrams).", "JACK Sim\u0099  (JACK Sim)", " consists of three major components:", "Also JACK Sim presupposes that an actual application will conform to a reference model in which agent behaviour, embodiment and visualisation are explicitly represented.", "JACK Sim ", " is a framework for building and running repeatable agent based simulations. Simulations built with JACK Sim require agent behaviours to be implemented using either JACK or Teams. Also note that the JACOB\u0099  Object Modeller (JACOB)", " is used for initialisation of data.  It is assumed that the reader is familiar with JACK, Teams and JACOB.", "In the BDI world view, agents respond to events issued by the environment, other agents or by themselves. The behaviours that are triggered by these events result in computations (that take no time) and delays(that consume time). Thus an action will in general be modelled as a computation and a delay, and will be triggered by an event. JACK provides programming constructs (events, plans, beliefsets, views and agents) to support this world view.", "A JACK Sim application has a single clock that is maintained by a single agent of type ", "TimeSource", ". The time source agent issues execution requests to one or more agents of type ", "TimeDispatcher", " \u2013 there is one time dispatcher agent per process.  Each time dispatcher agent allows the agents that are under its management to execute in a repeatable manner until all the agents are blocked. At this point, the time dispatcher agent sends a response to the time source agent indicating the earliest time at which one of its agents will become unblocked. When the responses from all time dispatcher agents have been received, the time source agent advances the clock to the earliest time that would unblock an agent. It then issues another round of execution requests and the cycle is repeated. The simulation stops when the clock can no longer be advanced.  Clock management is transparent to developers \u2013 they are responsible only for the definition of the time management agents.", "Agents within an application do not have to be managed by a time dispatcher agent, but if they are not, there may be implications with respect to repeatability", ". In order to be fully managed, an agent must", "If these conditions are satisfied, then the infrastructure will manage the agent's life cycle", ". The life cycle consists of the following phases:", "Table 2-1: ", "Phases of the agent life cycle", "If an agent implements one of the two marker interfaces and it has the ", "aos.jack.sim.time.SimulationTiming", " capability, the agent's progress through the setup and execution phases will be controlled by events issued by its time dispatcher agent. In particular, the agent will receive ", "aos.jack.sim.time.RuntimeControl", " events at the following times:", "These points are distinguished by the event's ", "mode", " member \u2013 it assumes a value of", " ", "SETUP", ", ", "BEGIN", " or ", "END", " respectively.", "As of JACK 5.5 a simulation can be automatically repeated a given number of times. An event containing the ", "BEGIN", " or ", "END", " mode field will also have the ", "data", " field set. The 'begin' event's data will contain the number of the next simulation iteration. The 'end' event's data will contain the number of simulation iterations left to process.", "Normally ", "SETUP", " and ", "END", " events can be ignored by the agent. However, if running multiple iterations of the simulation, they should be used to initialise and take down, respectively, the simulation entities so that each iteration can begin in a clean and reset state.", "BEGIN", " events ", "must", " always be handled or no execution will occur. Note that the protocol is synchronous \u2013 the sending of a ", "BEGIN", " event to the next agent will ", "not", " proceed until processing of the preceding ", "BEGIN", " event has completed. Therefore, the plan that handles this event should eventually post an event (that will actually initiate execution within the agent) and simply exit.", "In the case of agents that implement the ", "TimeSyncManaged", " interface (as ", "opposed to the ", "TimeManaged", " interface), additional events with a mode of ", "STEP", " will be received whenever the simulation clock is advanced. Time dispatcher agents implement the ", "TimeSyncManaged", " interface; the intended use for user defined agents that implement this interface is to integrate computations performed by external processes into the JACK Sim repeatability framework.", "If a simulation agent is registered with the infrastructure but does not implement one of the marker interfaces, it is loaded, but its execution is not managed by the infrastructure. If an agent is not registered with the infrastructure, then the developer is responsible for both its instantiation and execution. Note that in both situations, there may be implications in terms of repeatability.", "A simulation is started by running the ", "Loader", " class with the name of a scenario definition file", " as an argument.  To begin a simulation that runs in a single process, type", "where ", "<file-name>", " is the name of the scenario definition file.", "Note that if the simulation involves multiple processes, each process will have its own scenario definition file and will require a separate invocation of ", "aos.jack.sim.run.Loader", ". Also, the process that contains the time source agent must be the last process to be started, as it initiates agent execution.", "As a first example, consider a variation on 'hello world' to illustrate what is involved in generating a minimal JACK Sim application. We assume that a normal JACK application has been developed that consists of three agents, ", "ralph1", ", ", "ralph2", " and ", "world", ". ", "ralph1", " and ", "ralph2", " are of type ", "Speaker1", " and ", "world", " is of type ", "Speaker2", ". ", "Speaker1", " has a ", "Speak", " plan which is triggered by a ", "Start1", " event. The ", "Speak", " plan consists of a continuous loop that sends an ", "Utterance", " event to ", "world", ". The plan waits for a response from world, waits a further 5 seconds and then repeats the process continuously. ", "Speaker2", " has a ", "Respond", " plan which is triggered by an ", "Utterance", " event; it composes a response and sends it using ", "@reply", ".  Code for the example is presented in Appendix A. Design diagrams are shown below:", "Figure 2-1: ", "Agent/event diagrams for ", "Speaker1", " and ", "Speaker2", "Figure 2-2: ", "Plan/event diagrams for ", "Speaker1", " and ", "Speaker2", "Conversion of this application into a minimal JACK Sim application involves the following steps:", "To execute the simulation, enter", "In the preceding example, all agents execute within a single process. However, this is not a requirement of JACK Sim \u2013 agents can be distributed across multiple processes", " (and multiple machines) in a JACK Sim application. As a simple illustration of this, suppose that for the preceding example, it becomes desirable to run the application agents in a separate process to the time source agent. Each process will require a portal name and a scenario definition file:", "Table 2-2: ", "Multi-process configuration", "The content of the two scenario definition files are as follows:", "To run this version of the example, first start the process containing the application agents:", "In a separate window, start the process containing the time source agent:", "If an explanation of the dci arguments is required, refer to the ", "Agent", " Manual.", "Note that in this example, no modification of the application agent code was required, as all inter-agent communication is still within the same process. If the simulation agents were distributed across multiple processes, full agent names (", "agent@portal", ") would need to be used for communication between agents in the different processes.", "In developing agent based simulations, we have found it useful to view a simulation as consisting of the following models:", "The agent model in turn consists of behaviour and embodiment sub-models. ", "Behaviour models encapsulate the reasoning that underpins agent activity. In performing this reasoning, an agent has knowledge of the the actions that it can perform. For example, a soldier agent might be be able to", "Depending on the application, the behaviour model might be implemented using a scientifically grounded cognitive architecture as in (Jarvis et al., 2005).", "Embodiment models implement the the actions that are available to the behaviour model. These actions could be modelled at differing levels of fidelity depending on the application. For example, if a soldier was a component of a larger system and our interest lay in the modelling of the behaviour of that system and not that of the soldier, one could perhaps model the above actions as delays and ignore looking. However, in other situations we might need to model the looking process and the detailed dynamics of movement and shooting.", "Having this distinction between the actions that an agent can perform and the realisation of those actions is extremely useful when agents are used to augment behaviours in existing simulation environments, such as OTB (OneSAF Testbed Baseline). In these situations, the primitive actions that the agent can perform correspond to the behaviours that are supported for its corresponding entity in the existing environment and realisation of agent function resides with the existing simulation environment. Another benefit that arises from this separation is that replacement of simulated functionality with actual functionality becomes straightforward. For example, one could evaluate alternative control strategies for a manufacturing cell using an embodiment model based on delays. Having determined a suitable control strategy, one could then replace the embodiment model with the (suitably interfaced) machines.", "In general, the embodiment model will contain an execution manager that is responsible for the handling of requests from the behaviour model and the monitoring of the progress of those requests. With respect to the latter point, the emodiment model maintains an explicit representation of the execution state for each agent that is updated as the requested actions are executed. Note that action execution may be delegated to an external system such as OTB and that depending on the action requested, task decomposition may be required. If required, agent embodiment can be visualised using the JACK Sim visualisationinfrastructure. In this case, separate visualisation models would be provided that interact with the embodiment model by accessing the agent execution states. The process involved is discussed in the ", "Visualisation", " chapter.", "Equipment models provide physical models of any equipment managed by an agent. Control of equipment is mediated by the agent embodiment; the behaviour model does not directly control equipment. An item of equipment differs from an agent in that an item of equipment does not reason about its actions. For example, a soldier agent may have binoculars and a gun; both of these would normally be modelled as equipment.", "Environment models provide models of the environment in which the agents are situated. In a military application, this could include both 'static' environment factors (such as terrain and landscape) and 'dynamic' environment factors, such as time of day, wind, rain etc. Perception of the environment is mediated by the agent embodiment; the behaviour model does not directly perceive the environment.", "The figure below is a representation of a simulation in terms of these models. Its purpose is to make the distinctions between the models explicit, and in particular to stress that behaviour models are separate software components from both embodiment models and equipment models. The interaction paths are indicated by lines between the model classes. Note that the behaviour models only interact with embodiment models, which in turn interact with both equipment and environment models.", "Figure 3-1: ", "A reference model for agent-based simulation", "Behaviour models will always be implemented in JACK. However, depending on the application, the remaining components may be implemented in JACK/Java or in an external modelling environment, such as C++, MATLAB or OTB. If the latter case applies, an interconnection layer is needed to provide the linkage between the behaviour model and the embodiment model. In terms of software, the interconnection layer is split into two parts with one part residing with the external modelling environment and the other residing with JACK. Technically, the layer manages the interconnection between JACK and the external environment. Conceptually, it mediates the interactions between embodiment functions and equipment and environment models. A macroscopic view of this architectural concept is illustrated in the figure below.", "Figure 3-2: ", "Macroscopic architecture for agent-augmented simulations", "JACK Sim currently provides no support for the preceding reference model because of its simplicity and generality. In future releases, support may be be provided to assist in the interfacing to particular simulation environments.", "A JACK Sim application consists of the following components:", "The following infrastructure agents", " can be created and initialised from entries in a scenario definition file", ":", "The ", "TimeSource", " agent is responsible for advancing the simulation time. The time control facility requires an application to have a ", "single", " ", "TimeSource", " agent per application, even if the application is distributed across multiple processes. If one is not present in an application, time will not be advanced.", "On receipt of a time update from the ", "TimeSource", " agent, the ", "TimeDispatcher", " agent", " enters a time control loop which enables all entities that have ", "registered with the time management infrastructure and implement either the ", "TimeManaged", " or ", "TimeSyncManaged", " interfaces", " to execute until they are all blocked. Note that because of dependencies between entities, multiple passes through the loop may be required. When all entities are blocked, ", "TimeDispatcher", " agent sends the earliest stop time to the ", "TimeSource", " agent, which then advances the simulation time. The time control facility requires an application to have a ", "single", " ", "TimeDispatcher", " agent per process. In multiple process applications, ", "TimeRelayInit", " objects", " can be used to add the dispatcher agent for a remote process to the list of entities managed by the local dispatcher agent. In this way, repeatability is guaranteed even with multi-process simulations.", "Agent behaviours are programmed using the ", "JACK Agent Language", " \u2013 this is the subject of the next chapter. As with infrastructure agents, user-defined agents can be created and initialised from entries in a scenario definition file", ".", "Scenario definitions contain entries that", "Entries are specified using the JACOB object modelling language", " and are contained in a scenario definition file. Each process in an application must have its own scenario definition file. However as noted above, this file may include other definition files. The scenario definition file for a process is processed by the JACK Sim loader", ":", "The loader creates and initialises all the agents and objects specified in the scenario definition file and if required, ", "registers them with the time management infrastructure.", "Dictionary and scenario inclusion within a scenario definition file is achieved through ", "Include", " objects", ". ", "An ", "Include", " object has a ", "dict", " attribute and a ", "file", " attribute, both of type ", "String", ". The ", "dict", " attribute identifies an additional JACOB dictionary to make available to the scenario loading. Typically, this dictionary will contain the agent and object initialisation classes that appear in the subsequent agent and object initialisation entries. The ", "file", " attribute identifies a scenario definition file for inclusion in the scenario definition. That file may include further dictionaries and scenario definition files.", "The following is an example of using an ", "Include", " object in a scenario definition.", "In the example, the scenario definition dictionary is first extended by adding the classes contained in ", "class cell.machines.Init__defs", ". The class definitions for this dictionary were defined in the JACOB file ", "cell/machines/defs.api", ". Once the above dictionary appears in a scenario definition file, its classes can then be used for agent and object creation and initialisation. If the resulting scenario definition file was called ", "cell/meterbox.def", " it could be included into another scenario definition file via the following entry:", "JACK Sim has a standard simulation definitions file", " named ", "aos/jack/sim/standard.def", ". Thus, a scenario definition file will often have the following line", "at the beginning of the file. ", "standard.def", " includes the following dictionaries:", "Table 4-1: ", "Dictionaries included by ", "standard.def", "If visualisation is not required in a particular simulation, one may choose to include only the standard time manager", ". This can be achieved with the inclusion of the following line in the scenario definition file:", "In addition, if the application uses JACK Teams, the following dictionaries must be included in the scenario.def file. ", "Grouping of entries in a scenario definition file can be achieved with ", "Folder", " objects", ". A ", "Folder", " object has two attributes a ", "name", " attribute of type ", "String", " and an ", "items", " attribute.", "The agents required by a simulation are usually created from entries in the scenario definition file which contain agent initialisation objects", ". These objects are either of type ", "AgentInit", " or are subtyped from ", "AgentInit", ".", "The ", "AgentInit", " class can be used directly for creating an agent which requires no further initialisation at construction time. It has the three attributes ", "agent_type", ", ", "name", " and ", "is_persistent", " (described later). The class has an ", "initialise(Loader loader)", " method, which creates an agent of the given type and name, and adds this to the ", "Loader.entities", " ", "Hashtable", ". The agent is created by calling ", "Loader.newAgent()", " (which in turn calls ", "aos.jack.Kernel.createAgent()", " ", ") with the ", "AgentInit", " object as initial data.", "The following entry would enable the loader to create an agent called ", "hirata", " of type ", "cell.machines.Robot", " and add it to its list of entities to be managed by the time management infrastructure. By default, this entity would not keep its running state between simulation runs. Note that no additional initialisation is performed.", "In many situations, the agent that we wish to create will require data fields other than the name to be initialised. In this case, we need to create a subclass of ", "AgentInit", " that defines the required fields, which can be of any type.  In these situations, the type of the agent can be specified in the class definition. If this is done, the type does not need to be specified in the object definition.", "As an example, suppose that we wanted to create an instance of a Hirata robot and set its cycle time to five seconds. The following dictionary definition would suffice:", "The example defines an initialisation object type named ", "HirataInit", " that maps to agent type ", "cell.machines.Hirata", ", and includes an attribute named ", "cycleTime", ". This definition could then be included in a file such as ", "cell/machines/defs.api", ".", "The initialisation object could then be used in a scenario definition file:", "If no agent name is provided in the initialisation object, then no agent will actually be created at the time that the scenario file is read. This may be useful to provide an initialisation template that can be used within code that creates agents on the fly.", "The following initialisation objects are available to enable infrastructure agents to be initialised:", "A ", "TimeSourceInit", " object", " in the scenario definition results in the creation of a ", "TimeSource", " agent", ". The initialisation attributes are", ":", "Table 4-2: ", "Initialisation attributes for a ", "TimeSourceInit", " object", "A ", "TimeDispatcherInit", " object", " in the scenario definition results in the creation of a ", "TimeDispatcher", " agent", ". The initialisation attributes are", ":", "Table 4-3: ", "Initialisation attributes for a ", "TimeDispatcherInit", " object", "A number of initialisation objects are provided to facilitate particular infrastructure interactions. These objects do ", "not", " create agents. The available objects are:", "A ", "TimeInit", " object", " is used to set the initial simulation time", ", and it can have the following attributes", ":", "Table 4-4: ", "Initialisation attributes for a ", "TimeInit", " object", "The following is an example to set the initial simulation time", " in the default format:", "The ", "TimeInit", " class can also be used within the simulation to convert the simulation time into a ", "String", " according to the ", "dateformat", " attribute. The relevant method is", "A ", "TimeRelayInit", " object", " is used to link dispatcher agents in a multi-process application. The resulting linkage structure should take the form of a multi-way tree. The following attribute can be set", ":", "Table 4-5: ", "Initialisation attributes for a ", "TimeRelayInit", " object", "A ", "TimeConsoleInit", " object", " is used to specify the attributes of a time console. The console enables the user to control the progress of time within a simulation.", "It has the following appearance:", "Figure 4-1: ", "Time console appearance", "The following attributes", " can be set:", "Table 4-6: ", "Initialisation attributes for a ", "TimeConsoleInit", " object", "If a console is required for an application, a separate ", "TimeConsoleInit", " entry is not created in the scenario definition. Rather, the ", "TimeConsoleInit", " object definition is inserted inline in the ", "TimeSourceInit", " object definition, as shown below:", "The ", "aos.jack.sim.run.SimAgent", " class extends the ", "aos.jack.jak.agent.Agent", " class. It should be used as a base class for simulation entities that may persist over a number of simulation iterations.", "It contains two state flags that can be changed as required.", "These are the extra methods available through a ", "SimAgent", ".", "If the ", "readyAtStart", " attribute is false, then the agent will not be registered with the loader when it is created via the scenario definition file. It will be necessary to use one of the ", "Loader", " methods such as ", "deploy()", " to register it and thus place it under the control of JACK Sim.", "At the end of each simulation iteration, any registered entity for which this attribute is false, will be deregistered from the JACK Sim loader. This means it will not be able to run until it is registered with the loader again.", "If this attribute is true, then at the start of the each iteration, the entity will be immediately able to run and will receive the usual ", "RuntimeControl.SETUP", " and ", "RuntimeControl.BEGIN", " events at the initial time.", "If the ", "stopAtEnd", " attribute is false, then at the end of a simulation iteration, nothing special happens to it. It simply continues to run as it was already doing. However, if this attribute is true (the default), then at the end of an iteration, any tasks that are still running within the entity will be immediately terminated as an automated part of the clean-up phase between simulation iterations.", "For example:", "If ", "agent_type", " is not ultimately derived from ", "aos.jack.sim.run.SimAgent", ", then it will cause an error when the scenario file is loaded.", "A ", "MonitorInit", " object", " is used to control the running of a scenario so that it automatically repeats for a given number of iterations. This is useful for running Monte Carlo style randomised simulations. The following attributes can be set", ":", "Within a scenario definition file, the following will cause a ", "Monitor", " object of specific type ", "aos.myproject.IterationController", " to be created and associated with the current loader. The number of scenario iterations to be run will be 3 and the created object will have its ", "initRandomSeed(long value)", " method immediately called with the value of 1234.", "Table 4-7: ", "Initialisation attributes for a ", "TimeRelayInit", " object", "The ", "ConfigurationBase", " class", " is available as a base class for creating a global configuration class for an application. Objects of the derived class can then be used in a scenario definition to provide scenario specific initialisation for the configuration. The derived class is defined in a JACOB ", ".api", " file and the resulting dictionary must be included in the scenario before any reference is made to the derived class. A definition for a derived class is shown below:", "When the ", "ConfigurationBase", " extension is used in a scenario definition, it will be installed as a global data object with default name ", "conf", ". Thus, if the file that contained the above definition was named ", "models/global.api", ", then the  scenario definition could include the following declaration:", "This would then be accessible in a plan, for example:", "The name of the configuration object is ", "conf", " by default. This name is a ", "String", " member of the ", "ConfigurationBase", " class, and thus an alternative name can be specified in the scenario definition by referencing the superclass field directly:", "Alternatively, the default name can be changed by means of the ", "inherited", " attribute. The following example illustrates how this may be done.", "In order to create an agent on the fly, you simply need to call a method on the current loader object with initialisation data for the new agent.", "There is a static method within ", "Loader", " to get the current loader.", "The ", "Loader", " object has several methods which can be used to create agents, initialise them and register them with the loader.", "This method will create an agent with the given name and Java type. The agent will be initialised using the given initialisation template, which will usually be defined in the scenario file. This method will throw an exception if an agent with that name already exists or is already registered with the loader.", "If you are running a scenario which involves a number of iterations in which the agents are never destroyed but simply reinitialised, the following method will prove useful.", "This works in the same way as ", "addAgent()", " except that it will not bother to create the agent if it already exists. It will, however, throw an ", "Error", " if the agent is currently active or registered with the loader.", "Both of these methods will leave the agent in an initialised but blocked state. The agent will not run or respond to events until it is unblocked. If there is any other initialisation to be done, it is safe to do it while the agent is blocked unless it involves event handling (which would require the agent to be running).", "The very last thing both of the above methods do before returning is to call the agent's ", "initialize(InitialData data)", " method.", "To manually unblock an agent so that it is ready to receive events, you can use one of the following ", "Loader", " methods:", "A very useful method is:", "The ", "deploy()", " method takes care of all the internal housekeeping for adding a new entity to the simulation at an arbitrary time. It creates the agent if required and registers it with the loader using ", "readyAgent()", " with the given parameters. It then unblocks the agent and organises for the required ", "RuntimeControl", " events to be sent to it so it can initialise itself correctly and join the simulation in the same way that entities defined in the scenario definition file do.", "If the scenario will be performing multiple iterations, you may want to clean up the agents that were created on the fly. They could be completely destroyed and later created again as needed. If it is simple enough to reinitialise the agent rather than recreate it, all that is required is to deregister the agent from the loader when an iteration finishes. This will stop it from being executable.", "JACK Sim provides a simple way for this to be done automatically. If your agent class extends ", "aos.jack.sim.run.SimAgent", " instead of a regular agent, it will have two additional methods:", "If the agent has this attribute set to \"false\" then when a scenario iteration ends, it will be automatically deregistered from the loader and thus be disabled until it is registered again (and unblocked).", "If you arrange for the agent not to be deregistered or destroyed when the current scenario iteration ends, then as soon as the next iteration starts, it  will receive a ", "RuntimeControl(BEGIN)", " event and start executing immediately, as will all other registered agents.", "The default state for any ", "SimAgent", " is that when a simulation ends, any tasks it is still executing will be forcibly terminated. If your new agent should continue to execute undisturbed between runs, you will need to call ", "agent.setStopAtEnd(false)", " to change alter this behaviour.", "Alternatively, the ", "stopAtEnd", " attribute could be set to \"false\" in the ", "AgentInit", " structure in the scenario definition file.", "The ", "Monitor", " object (described above) provides a method that can be called to trigger an early end to the current simulation iteration.", "There is also a static convenience method in the Loader class.", "These methods will cause JACK Sim to start the process of sending END events to each agent. On receiving these events, the agents must clean up whatever they have been doing and get ready for the next run.", "Before starting the next run, any outstanding plans that are still being executed by agents that have not taken any steps to prevent it (by unsetting the ", "stopAtEnd", " attribute, see above), will be forcefully terminated.", "Any entities that have the ", "readyAtStart", " attribute set to \"false\" (see above), will be deregistered from the loader and thus not automatically receive the ", "SETUP", " and ", "BEGIN", " events when the next iteration begins.", "Adding randomisation to a simulation is simply a matter of calling methods that will return random data according to whatever criteria you desire.", "To provide repeatability, the seed provided in the ", "Monitor", " object in the scenario definition file, is passed to the following method in the ", "Monitor", " class:", "By extending the ", "Monitor", " class and overriding the above method, you are able to control what method to use to initialise the random number generator you will be using within your simulation. For example:", "This will save the seed to a class variable, ", "current_seed", " and initialise the seed for random number generation.", "The ", "Monitor", " object has two other methods that we can utilize to help with the repeatability of simulation runs:", "JACK Sim organises to execute the ", "runBefore()", " method before a simulation iteration begins (before the ", "SETUP", " and ", "START", " events are sent to the agents) and the ", "runAfter()", " method is called at the end of the simulation iteration (after the ", "END", " events have been sent to the agents).", "For example, the ", "runBefore()", " method could be used to simply note which seed has been used to initialize the random number generator. (i.e. ", "current_seed", ").", "The ", "runAfter()", " method could be used to reset the seed (and store it in ", "current_seed", " for the next run.", "Thus, every iteration will have a new and well-defined seed that can be used later to repeat a run if so desired.", "In the BDI world view, agents respond to events issued by the environment, other agents or by themselves. The behaviours that are triggered by these events result in computations (which take no time) and delays (which consume time). Thus, an action will in general be modelled as a computation and a delay, and will be triggered by an event. JACK provides programming constructs (events, plans, beliefsets, views and agents) and a generic execution model to support this world view.", "For example, consider a robot that can perform pick and place operations. Assume that the source and destination for the operations are fixed and are potentially different for each part type to be moved. Furthermore, there are three part types involved, labelled A, B and AB. If the operation times are stored in a beliefset called ", "timings", ", one could use the following event and plan types to model the robot's pick and place behaviour:", "Note that the robot does not advance the simulation clock \u2013 that is the responsibility of the time source agent. However, the robot always has access to the current simulation time.", "As noted in the ", "Basic application development", " chapter, if an agent is fully managed by the time management infrastructure then agent creation and the triggering of execution is managed by the infrastructure. Contrast this with a normal JACK application, where one would write a small Java program to create agent instances and then perhaps invoke a method on one of the agents. This method would trigger agent activity through the posting of an event.", "In certain situations, partial management of an agent is appropriate \u2013 this is discussed in the ", "Basic application development", " chapter. In order to be fully managed, an agent must", "Registration with the time management infrastructure was discussed in the ", "Basic application development", " chapter \u2013 if the agent has an initialisation entry in the scenario definition file for the process in which it will reside, then the loader will automatically register the agent.", "With respect to the marker interfaces, an agent would normally implement the ", "TimeManaged", " interface \u2013 use of the ", "TimeManaged", " interface is discussed in the ", "Basic application development", " chapter. Note that as we are dealing with marker interfaces, no methods are defined for implementation. By implementing the ", "TimeManaged", " interface, an agent indicates to the time management infrastructure that it wants its execution to be managed by the infrastructure according to a synchronous protocol between the agent and its time dispatcher. The ", "SimulationTiming", " capability ", "is provided to hide the agent-side details of this protocol. If an agent incorporates this capability, the agent deals with ", "RunTimeControl", " events rather than the ", "TimeControl", " events that are issued by the time dispatcher. This is illustrated below:", "Figure 5-1: ", "SimulationTiming capability", "RuntimeControl", " events are sent at the following points in the agent's lifecycle:", "These points are distinguished by the ", "RuntimeControl", " event's ", "mode", " member. This variable can assumes a value of ", "SETUP", ", ", "BEGIN", " or ", "END", ".", "Normally ", "SETUP", " and ", "END", " events can be ignored by the agent. However, if running multiple iterations of the simulation, they should be used to initialise and take down, respectively, the simulation entities so that each iteration can begin in a clean and reset state.", "BEGIN", " events ", "must", " always be handled or no execution will occur. Note that the protocol is synchronous \u2013 the sending of a ", "BEGIN", " event to the next agent will ", "not", " proceed until processing of the preceding ", "BEGIN", " event has completed. Therefore, the plan that handles this event should eventually post an event (that will actually initiate execution within the agent) and simply exit.", "The protocol sends events to indicate the start and end of execution. During that time, there may be periods when the agent becomes blocked and is then unblocked. Blocking is managed by the agent through the use of, for example, ", "@sleep", " or ", "@waitFor", " statements. Unblocking is managed by the time dispatcher and requires no actions to be performed by the agent. Also note that clock advancement is handled by the infrastructure and not the agent. However, the agent always has access to the current simulation time.", "This example describes the simulation framework that was used to test an agent-based control system for a robotic assembly cell prior to its commissioning. The cell control system was developed using Teams and is described in more detail in (Jarvis et al., in press).", "The assembly cell consisted of the following components:", "The purpose of the cell was to assemble meter boxes. These consisted of three components \u2013 an open-faced metal box, a metal plate and a cover. The cover and the plate were attached to the box with screws. We refer to the box as component A, the plate as component B, the cover as component C and the box plus plate sub-assembly as component AB. Components A, B and C were available from their respective buffers. Component A could only be placed by the Fanuc robot in an empty jig. Component B could only be placed in a jig that contained a component A. These activities could only take place when the target jig was in the position closest to the Fanuc robot. When a jig contained components A and B, it could be rotated to position 2, where the components were screwed together by the Hirata robot to form component AB. AB could then be rotated to position 1, where the Fanuc robot could remove it from the system. Alternatively, a fully assembled meter box (ABC) could be made. In this case, the Fanuc robot  removed AB from the jig and placed it in the flipper unit. The robot then placed component C in the empty jig and, at the same time, the flipper unit flipped the assembly through 180 degrees. The upside down AB was then placed on top of component C by the robot and the jig was rotated to position 2, where AB and C were screwed together by the Hirata robot. The completed assembly was then rotated to position 1, where it was removed from the system by the Fanuc robot.", "The cell was being used to explore the issues involved in implementing agent-based control strategies using existing manufacturing controllers. Consequently, infrastructure had been developed that enabled external access to machine functionality via a simple machine state abstraction. These abstractions were managed by a Visual BASIC program called BBS. (In the code provided with the distribution, a simplified Java version of BBS is provided).", "A machine state consists of two words \u2013 a status word and a control word. The key components of the machine state from an execution perspective are", "Agent interaction with the BBS program was via a UDP connection. Machine control was implemented in a hierarchical manner; the actual machines were controlled by an Omron PLC which in turn was controlled by the BBS program. Furthermore, the robots had their own controllers under the control of the PLC.", "BBS has two modes of operation, ", "operational mode", " corresponding to operation of the actual cell and ", "simulation mode", " corresponding to operation of a virtual cell. In both cases the interface between BBS and the cell control agents was identical.", "The cell architecture followed the reference model presented in the ", "Simulation architecture", " chapter. Equipment and environment models were not required. The behaviour model was represented as a JACK team (called ", "CellBehaviour", ") that required the following roles in order to make meter boxes:", "Table 5-1: ", "Roles required by the ", "CellBehaviour", " team", "The machines that form the cell (the two robots, the table and the flipper) are represented in both the behaviour model and the embodiment model. In the behaviour model, they are represented as teams; the roles that these teams perform are listed below.", "Table 5-2: ", "Teams available to form the ", "CellBehaviour", " team", "Two separate embodiment models are defined, corresponding to the actual cell or the virtual cell. Both use BBS to manage the interaction with the behaviour model. BBS then controls either the actual machine behaviours or simulated machine behaviours. In the latter case, each machine in the virtual cell is represented as a JACK agent that interacts with BBS via a JACK view. The agents that form the the virtual cell are listed below.", "Table 5-3: ", "Agents that form the virtual cell", "The interconnection layer between the behaviour model and the embodiment model consists of", "The interaction between a virtual cell agent and BBS is encapsulated in a JACK view. This enables the agent to manage its status through the following queries:", "The function to be executed is accessible through bits 1 \u2013 4 of the view's input data member.", "The agent can then use the following plan to execute a machine operation:", "Execution of an operation by a particular machine is initiated by the posting of a ", "VirtualControl", " event within the ", "VirtualLife", " plan. Plans are provided with each virtual machine agent to handle this event. The plan provided for ", "FanucEmbodiment", " is presented below.", "The agents in the virtual cell are managed by JACK Sim. A ", "StartEmbodiment", " plan is provided that handles a JACK Sim ", "BEGIN", " event. The ", "StartEmbodiment", " plan simply posts a ", "VirtualStart", " event and exits so that JACK Sim can continue execution. The ", "VirtualStart", " event is then handled by the ", "VirtualLife", " plan discussed earlier. The generic aspects of the above behaviour are encapsulated in the ", "StartingUp", " capability:", "Figure 5-2: ", "StartingUp Capability", "The following scenario definition file could be used to start up the virtual cell:", "The JACK Sim visualisation layer provides a convenient mechanism for JACK developers to provide external visibility for entities within their agent system. A common usage would be to visualise entities in a physical system (either real or simulated).  For example in an air-traffic control simulation, aircraft agents may be visualised on screen, with JACK Sim visualisation entities reflecting the current position and heading of aircraft.", "The graphics model that is used by the infrastructure is that of AWT. In this model, the origin of the coordinate system is at the top left hand corner of the display. X increases to the right and y increases downwards. Rotation is of the coordinate system; a positive angle of rotation is in the direction from the positive x axis to the positive y axis. Translation is performed relative to the enclosing coordinate system.", "It has long been recognised as good software engineering practice to separate model behaviour from model visualisation. One of the practical consequences of such a separation is that different visualisation models can then be applied to the same behaviour model. The JACK Sim visualisation infrastructure facilitates such a separation by supporting a loose coupling between the behavioural aspects of an application with its visualisation aspects.", "On the visualisation side, the infrastructure requires appearance objects to have been explicitly constructed. The functionality of these objects is concerned solely with presentation; they contain no behavioural aspect. The infrastructure also manages the actual display of the visualisation model.", "On the behaviour side, there is an expectation that the reference model presented in Chapter 3 will have been adopted. That is the application consists of separate behaviour and embodiment models and that the embodiment model maintains explicit representations of the execution states of the agents. The infrastructure then supports the updating and display of the visualisation model as the execution states change. The information needed to update the visualisation model is of course application specific and the developer needs to specify how the visualisation model is to be updated. However the actual updating of the model is managed by the infrastructure.", "Consequently, the following models would normally be present in a JACK Sim application that uses visualisation:", "The interaction between the models and the infrastructure is summarised in the figure below. The visualisation model is updated by the visualisation infrastructure at regular time intervals; the updating is on the basis of the current state of the embodiment model's execution state.", "Figure 6-1: ", "Interaction between JACK Sim models and the infrastructure", "Visualisation model development involves two phases \u2013 the development of the appearance model for the application and the development of the updating model. The appearance model consists of the frame that is to be used for visualisation and appearance objects that specify the appearance structure for the entities that are to be visualised. Both the visualisation frame and the appearance objects for the application are specified using JACOB initialisation objects that are contained in a file known as the graphical definition file. Appearance objects contain transformation fields that can be initialised by the user and updated dynamically. An appearance object can contain appearance objects; the values of the transformation fields of parent objects are passed on to their children. However, the transformation fields of a child object can be modified independently of its parent object. Thus a helicopter can be modelled as a shell and a rotor and while the helicopter is flying, the rotor can be rotated.", "The updating model is responsible for the drawing of entities on the visualisation frame and is achieved by visual entity objects. These objects are normally created dynamically and have their associated appearance object bound at construction time. In addition to providing this binding, the developer must also specify how the transformation fields of the appearance object are updated. The actual updating process is triggered by the visualisation infrastructure; an ", "Updater", " agent and a ", "VisualsControl", " view are provided to facilitate this activity.", "The visualisation frame and the appearance objects together constitute the appearance model for the application. These objects are specified using the JACOB Object Modelling Language in a file known as the graphical definition file. As with the scenario definition file, ", "Include", " objects are available to include dictionaries and other definition files. In order to utilise the visualisation infrastructure, the following entries must appear at the start of the graphical definition file:", "The visualisation frame is created using a ", "VisualFrameInit", " object. The following fields are available for customisation of the display:", "Table 6-1: ", "Initialisation attributes for a ", "VisualFrameInit", " object", "For example, suppose that we have created a graphical definition file called ", "graphical.def", " that contains the following entries:", "If we were to invoke the JACK Sim loader as follows:", "then an empty frame with the title \"JACK Sim Visualisation Test\" would appear on the screen at (120,120).", "Appearance objects are of type ", "Named", ". The visualisation infrastructure provides the ", "DefineNamed", " class to enable the developer to declaratively specify the structure and initial appearance of the appearance objects that are to be employed in an application. These definitions are contained in a JACOB initialisation file (the graphical definition file) that is processed by the JACK Sim loader at startup. The loader stores the resulting ", "Named", " objects internally; these are then available for binding with the visual entity objects that are created in the updating model.", "The ", "DefineNamed", " class extends the ", "Transform", " class through the provision of a ", "name", " field. As noted above, this name is used in the updating model to bind an appearance object to a visual entity object. It is also used in appearance object definitions to incorporate appearance objects into appearance object definitions. The following fields are available from the ", "Transform", " class when a ", "DefineNamed", " object is specified:", "Table 6-2: ", "Initialisation attributes of the ", "Transform", " class that are available to a ", "DefineNamed", " object definition", "The following set of primitive drawable objects are provided by the infrastructure for specifying the appearance of an appearance object:", "These objects, their initialisation attributes and related classes are described in Appendix B.", "Note that the ", "Figure", " object is available to provide a container for drawable objects. Since appearance objects (i.e. ", "Named", " objects) are drawable objects, they can be incorporated into a ", "Figure", " object definition, as well as the primitive objects listed above. Like the ", "DefineNamed", " class, the ", "Named", " class extends ", "Transform", " and the following fields can therefore be referenced in a ", "Named", " object specification", "Table 6-3: ", "Initialisation attributes of the ", "Transform", " class that are available to a ", "Named", " object definition", "The ", "drawable", " field is not initialised in a ", "Named", " specification, as it is set by the infrastructure to be a reference to the appropriate ", "DefineNamed", " object.", "Note that each appearance object has its own coordinate system. The origin of this coordinate system is specified by the object's ", "x", " and ", "y", " fields. Rotation is of the coordinate system. Modification of the ", "x", " and ", "y", " fields results in a translation of the object; this is relative to the origin of the coordinate system of the enclosing ", "DefineNamed", "/", "Named", " object if there is one, or of the visualisation frame otherwise.", "As an example of appearance model construction, consider the rotating table of Section 5.3. It contains two diametrically opposed jigs, and for pedagogical purposes, we will allow these jigs to be rotated and translated independently of the table. Also we will want to visualise the contents of the jigs. Thus the table appearance object (", "n-table", " will contain two jig appearance objects (", "n-jig1", " and ", "n-jig2", " and each jig appearance object will contain a status appearance object (", "n-status1", " and ", "n-status2", ").", "The table appearance could be defined as follows:", "The locations of the three objects that form the table are specified relative to the origin of the enclosing coordinate system, which will be set at runtime. If no origin is specified, (0,0) is used. Recall that rotation is of the coordinate system. Thus when we rotate the coordinate system of the table, the components of the table will be rotated about the centre of the table.", "The jigs are defined similarly; the definition for jig1 could be:", "Again, the location of the components is defined relative to the enclosing coordinate system \u2013 in this case, that of the ", "Named", " object ", "n-jig1", ". As before, when the coordinate system of the jig is rotated, the components of the jig will rotate about the centre of the jig.", "The contents of the jig are represented for simplicity as a digit in the range 0 to 3. 0 corresponds to an empty jig, 1,2 and 3 correspond to the progressive stages of assembly. Unlike the other components of the table appearance, this component is not statically defined and will change dynamically. As we shall see in the next section, this is achieved by dynamically creating a new ", "TextLine", " object when the jig contents change and assigning it to the ", "drawable", " field of the appropriate ", "Named", " object. Consequently there is no need to specify an initial appearance and the definition for the jig1 status is simply", "In order for an appearance object to be displayed by the visualisation infrastructure, it needs to be incorporated into a visual entity object. In the next section, we shall explain how the updating model together with the visualisation infrastructure updates and displays visual entity objects. For now, we will just display the initial appearance of the table as defined in the graphical definition file.", "VisualEntityInit", " initialisation objects  are provided by the visualisation infrastructure for the creation of static visual entity objects. Definitions for these objects are incorporated in the graphical definition file and the corresponding ", "VisualEntity", " objects are then created by the JACK Sim loader. An ", "Updater", " agent is provided by the infrastructure to manage the display of visual entity objects. Its definition is incorporated in the graphical definition file with a ", "ScreenUpdaterInit", " object.", "If the following entries were added to the complete graphical definition file that has been used in the preceding discussion, the appearance of the table can be checked without having to provide any agent behaviours.", "Entering the following command", "will result in the appearance of a display similar to the following:", "Figure 6-2: ", "Initial table appearance.", "The JACK Sim visualisation infrastructure provides an ", "Updater", " agent to manage the display of the visual entities associated with an application. As noted previously, visual entities are of type ", "VisualEntity", " and each entity is associated with an appearance object that was defined as part of the appearance model. The infrastructure provides a ", "VisualsControl", " view to assist in the lifecycle management of ", "VisualEntity", " objects. The updating and display of the visual entities is managed by the infrastructure, but the developer must provide the code that is invoked by the infrastructure at each iteration in the update/display loop.", "The ", "Updater", " agent", " is responsible for regularly updating the visual entities for the application and displaying them on the screen. A ", "ScreenUpdaterInit", " object ", " is provided to allow the JACK Sim loader to create and initialise an ", "Updater", " agent from a JACOB definition provided in the graphical definition file. The available initialisation attributes are", ":", "Table 6-4: ", "Initialisation attributes for the ", "ScreenUpdaterInit", " object", "Appearance objects implement the ", "Drawable", " interface and can therefore be drawn on the visualisation frame. However, drawing management is a complicated issue and the visualisation infrastructure uses visual entity objects to facilitate the efficient drawing of appearance objects. Visual entity objects are of type ", "VisualEntity", ".", "As noted previously, objects of type ", "VisualEntity", " can be created from ", "VisualEntityInit", " entries in the graphical definition file. However the preferred method to create such objects is through the ", "VisualsControl", " view ", " that is provided by the infrastructure. The ", "VisualsControl", " view provides the ", "newVisual", " method for this purpose; it takes the following arguments:", "Table 6-5: ", "Arguments for the ", "newVisual()", " method", "Visual entity objects are stored by the ", "VisualsControl", " view in a ", "Hashtable", " called ", "entities", ". The ", "newVisual()", " method does not return an object reference; if a reference is required, it can be obtained from the hashtable by specifying the name of the visual entity as the key to an invocation of ", "entities.get()", ". This reference can then be used to interrogate the visual entity object and its appearance object.", "Having created a visual entity object, the initial state of the object can be displayed by the infrastructure, but subsequent changes to its state will not be reflected on the display. In order for the visualisation infrastructure to display the updated entity state, it needs to be provided with an updating method for each visual entity. The infrastructure will then invoke these methods at regular intervals and update the display.", "The linkage between a visual entity and its updating method is provided by the ", "bindVisualComponent()", " method in the ", "VisualsControl", " view. This method takes the following arguments:", "Table 6-6: ", "Arguments for the ", "bindVisualComponent", " method", "Recall that appearance objects can contain appearance objects, thus allowing hierarchical appearance structures to be defined. The ", "bindVisualComponent()", " method enables updating to be defined for any appearance object within an appearance structure. As expected, the updating of a node in an appearance structure is applied to all of its sub-nodes.", "The label of the appearance object is the name that has been assigned to the object's ", "label", " field. The name of the visual entity object is the name that was assigned to the visual entity object when it was created (using the ", "newVisual()", " method), and ", "not", " the name of the appearance object that was provided to that method as its ", "appearance", " parameter.", "The object that is provided as the first argument to ", "bindVisualComponent", " must implement the ", "VisualComponent", " interface. This interface consists of the single method", "whole", " provides access to the data members of the visual entity object that are provided by the ", "Transform", " class, namely its location, orientation, scaling and its appearance object. ", "part", " provides similar access for the appearance object that is being updated. The expectation is that within the ", "update", " method the current state of the appearance object being updated (and that of its root visual entity object) will be obtained from the execution state for the application. A decision is then made as to whether or not the transform fields of the appearance object should be updated.", "In this example, we will use the JACK Sim visualisation infrastructure to create an updating model for the rotating table whose appearance model was defined in Example 3. Recall that the table has two diametrically opposed jigs and it is rotated between a loading/unloading station and a joining station. Only the behaviour of the table and its jigs is modelled; we do not model the operation of the two stations. For pedagogical reasons, we allow the jigs to be rotated and also to be advanced and retracted along a slide. The complete source code for Examples 3 and 4 can be found in ", "examples/jacksim/table", ".", "The focus of this example is the use of the visualisation infrastructure and not behaviour modelling. Consequently we have chosen to use the behaviour model as a test harness for the remaining aspects of the application and have not attempted to provide a detailed or realistic model of table behaviour. The model is implemented as a capability called ", "BatchMaking", ". We assume that only a single batch of one type of part is to be produced and that only one of the jigs is used. Therefore only a single plan is provided to model the table behaviour during assembly. This plan is defined in terms of operations that are performed by the table (rotate) and the two jigs (set contents, rotate, advance and retract). These operations are performed by jig and table controller objects of type ", "JigController", " and ", "TableController", " respectively. The controller objects collectively form the embodiment model for the table and for convenience are incorporated into a view called ", "TableModel", ". Each controller object has a set of state variables that encapsulate the execution state of its corresponding entity. When an operation is performed by a controller object, a delay is initiated and its state variables are updated. Independently of this process, the visualisation infrastructure updates and displays the visualisation model at regular intervals using the current state of the table as defined by the state variables of the controller objects.", "As noted above, the embodiment model is a view that incorporates  three objects \u2013 two of type ", "JigController", " one of type ", "TableController", ". These classes extend a base class of type of ", "VirtualController", ", which provides generic rotation, translation and scaling operations. Subclasses of ", "VirtualController", " either provide specialisations of these operations or new operations. For example, the ", "JigController", " class provides operations for slide and contents management.", "The visualisation model is encapsulated in a view called ", "TableVisualisation", ". It creates the visual entity objects required by the model using methods provided by the ", "VisualsControl", " view, which is part of the visualisation infrastructure. Each visual entity object that is created incorporates a corresponding appearance object. Appearance object definition for this application was addressed in Example 3 \u2013 the definitions are provided as JACOB initialisation objects in the graphical definition file for the application. Also for each visual entity, an object that contains the updating method for the visual entity is created. Note that the ", "TableVisualisation", " view is responsible only for the creation of the objects that will form the visualisation model \u2013 the actual management of the model (object updating and display) is the responsibility of the ", "VisualsControl", " view and the ", "Updater", " agent.", "A design diagram illustrating the overall agent architecture is shown below:", "Figure 6-3: ", "Application Architecture", "The embodiment model is provided by three controller objects corresponding to the two jigs and the table. For convenience, these objects are contained within a single JACK view. From a visualisation perspective, the key aspects of the embodiment execution state are", "The basic transformations that are supported by the visualisation infrastructure are rotation, translation and scaling. A base class of type ", "VirtualController", " provides basic rotation, translation and scaling operations. ", "JigController", " and ", "TableController", " then extend ", "VirtualController", ". The  aspects of the ", "VirtualController.java", " that relate to rotation are shown below:", "The ", "TableController", " class does not add any additional functionality to the base class, as in this example the table is only capable of rotation. However the ", "JigController", " class adds advance/retract functionality and also maintains knowledge of the jig contents. The code for the ", "JigController.java", " is shown below:", "Note that the advance/retract movement is defined as movement relative to the home position of the slide, unlike the movement function provided by the base class, in which movement is in between two points in the behaviour model coordinate system.", "In our example, visualisation model updating is encapsulated in a view called ", "TableVisualisation", ". It provides a single method ", "bind()", " that is invoked by the ", "Table", " agent as part of its initialisation.", "The focus of this example is the use of the visualisation infrastructure and not behaviour modelling. Consequently we have chosen to use the behaviour model as a test harness for the remaining aspects of the application and have not attempted to provide a detailed or realistic model of table behaviour. We assume that only a single batch of one type of part is to be produced and that only one of the jigs is used. Therefore only a single plan is required to model the table behaviour during assembly. This plan is defined in terms of operations that are performed by the table embodiment (", "rotate()", ") and the two jig embodiments (", "setContents()", ", ", "rotate()", ", ", "advance()", " and ", "retract()", "). A design diagram for the behaviour model is shown below:", "Figure 6-4: ", "Behaviour Model", "The plan for modelling the table behaviour during batch execution is shown below.", "In the interests of simplicity, jig advancement/retraction requires the direction of movement to be specified. However note that the direction of advancement is the same at both jig points. The reason for this is that at jig point 2, the jig's coordinate system has undergone a 180 degree rotation immediately prior to the jig advancement.", "The scenario definition file for this example is as follows:", "Note that the graphical definition file is included by the scenario definition file. The scenario is executed in the usual manner:", "Recall that execution of the scenario is managed by JACK Sim and that the agents are notified they can begin execution through the posting of a ", "RuntimeControl", " event with a mode of ", "BEGIN", ". The ", "Table", " agent must have a plan to handle this event (", "StartTable", ". All that this plan does is to post an ", "Order", " event, which triggers execution of the ", "Table", " agent's behaviour model.", "This appendix contains the code for the original JACK application that was converted to a JACK Sim application in chapter 2.", "This appendix  describes the set of primitive drawable objects that are provided by the JACKSim infrastructure for specifying the appearance of an object in the visualisation. The ", "Drawable", " interface is implemented by entities that can be displayed and thus drawn on a canvas. The following classes all implement the ", "Drawable", " interface, and can be used in JACK Sim wherever drawables are required:", "The following sections describe each class in more detail.", "The ", "Arc", " class extends ", "java.awt.geom.Arc2D.Double", ". An ", "Arc", " is a segment of an ellipse.  Like an ", "Ellipse", ", it contains fields that define an enclosing rectangle for the ellipse \u2013 the coordinates of the top left hand corner, and the width and height.  Additionally, an arc has a start and an extent, which defines the segment of the ellipse that is required.", "Table B-1:", " Initialisation attributes for an ", "Arc", " object", "The  ", "Area", " class extends ", "java.awt.geom.Area", ". An ", "Area", " object performs certain binary CAG (Constructive Area Geometry) on other area-enclosing geometries, namely ", "Ellipse", ", ", "Polygon", ", ", "Rectangle", ", ", "RoundRectangle", " and ", "Area", ". The supported CAG operations are add, subtract, intersect and exclusive or.", "Table B-2:", " Initialisation attributes for an ", "Area", " object", "The CAG operations that are to be performed on an ", "Area", " object are specified using objects of the following types:", "Table B-3:", " The object types available for the specification of CAG operations", "The above classes provide no fields for initialisation. However, they all extend the ", "AreaModifier", " class, which provides a single ", "name", " field for initialisation purposes. This field is of type ", "Area", " and is used to specify the object that is to be applied to the base object using the specified area modifiers. Note that this object remains unchanged after the operation has been performed.", "The ", "CachedImage", " class is used to buffer an image. In situations where an image is very large and/or requires a lot of processing, buffering the image can result in a significant reduction in processing time.", "The ", "Colored", " class is used to set the colour of a ", "Drawable", " object.", "The ", "Ellipse", " class extends ", "java.awt.geom.Ellipse2D.Double", ". An ellipse is defined in terms of its bounding box.", "Table B-4:", " Initialisation attributes for an ", "Ellipse", " object", "The ", "Figure", " class defines an aggregation of ", "Drawable", " objects, thus allowing the grouping of multiple drawable objects into a single drawable object. ", "Figure", " implements ", "Drawable", ", and so ", "Figure", " objects can be incorporated into a ", "Figure", " object.", "The ", "Line", " class extends ", "java.awt.geom.Line2D.Double", ". It represents a line segment in (x,y) coordinate space.", "Table B-5:", " Initialisation attributes for a ", "Line", " object", "The ", "Point", " class extends ", "java.awt.geom.Point2D.Double", ". It defines a point representing a location in (x,y) coordinate space.", "Table B-6:", " Initialisation attributes for a ", "Point", " object", "The ", "Polygon", " class draws a path along ", "Point", " objects.", "Table B-7:", " Initialisation attributes for a ", "Polygon", " object", "The ", "Rectangle", " class extends ", "java.awt.geom.Rectangle2D.Double", ". A rectangle is defined  in terms of the location of its upper left corner, its width and its height.", "Table B-8:", " Initialisation attributes for a ", "Rectangle", " object", "The ", "RoundRectangle", " class extends ", "java.awt.geom.RoundRectangle2D.Double", ". A round rectangle is defined in terms of its bounding box and an arc specification for the corners.", "Table B-9:", " Initialisation attributes for a ", "RoundRectangle", " object", "The ", "TextLine", " class is used to draw a line of text.", "Table B-10:", " Initialisation attributes for a ", "TextLine", " object", "The ", "Font", " class specifies details of the ", "Font", " that is to be used when a ", "TextLine", " is drawn.", "Table B-11:", " Initialisation attributes for a ", "Font", " object", "The ", "Transform", " class provides data members that will contain a ", "Drawable", " object and the values of any translation, rotation or scaling operations to be applied to the object during program execution. As a transform is a drawable object, a transform object can be the drawable member of a transform object.", "Table B-12:", " Initialisation attributes for a ", "Transform", " object", "Jarvis J., Fletcher, M., Howden, N., Ronnquist R. and Lucas, A., Human Variability in Computer Generated Forces \u2013 Application of a Cognitive Architecture for Intelligent Agents. In Proceedings of SimTecT 2005, Melbourne, 2005.", "Jarvis J., Ronnquist R., McFarlane D. and Jain L., A Team-Based Holonic Approach to Robotic Assembly Cell Control. Journal of Computer and Network Applications, in press", "Kreutzer W., System Simulation Programming Styles and Languages. Addison Wesley, 1986.", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Copyright \u00a9  2002-2012, Agent Oriented Software Pty Ltd", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "JACK Teams\u0099  (Teams) is ", "an extension to JACK Intelligent Agents that provides a team-oriented modelling framework.  As Teams builds upon the concepts of JACK, this document assumes that the reader is familiar with JACK Intelligent Agents", ".  It also assumes that the user is familiar with the use of JACOB", " for initialising data.", "The most immediate difference between Teams", " and JACK is the introduction of the ", "team", " reasoning entity.  This entity encapsulates ", "team", " behaviour in a Teams application in the same way that the Agent entity encapsulates agent behaviour in a JACK application.", "Like a JACK agent, a team is also an individual reasoning entity with its own ", "beliefs", ", ", "desires", " and ", "intentions", " (BDI)", ".  It includes declarations regarding which roles the team itself may perform for other teams and which roles it offers to other sub-teams to fill. In addition to the normal knowledge-building and practical reasoning in JACK agents, ", "team reasoning is also concerned with the coordination of sub-teams.", "As with JACK, behaviour is specified in the form of plans.  Teams introduces the ", "teamplan", " ", "construct for the specification of team-oriented behaviour.  Because Teams is an extension of JACK, all the core functionality of JACK is available within a team.  In particular, a team can use JACK plans as well as teamplans.", "The Teams extension provides a ", "team-oriented", " modelling framework. Team-oriented programming is an intuitive paradigm for engineering group action in multi-agent systems. Team-oriented programming is conceptually powerful, as it allows the software engineer to specify:", "In short, the concept of team-oriented programming serves to encapsulate coordination activity.  It extends the agent concept by associating tasks with roles.  However, the flexibility of multi-agent systems is retained.  Although team members act in coordination by being given goals according to the specification, they are individually responsible for determining how to satisfy those goals.", "A ", "team's structure can contain teams in any combination and in any number.  The ", "hierarchy is not restricted to a two-level design or in fact to a hierarchy.  Layers of teams can be encapsulated within other levels, and the structure can be added to or altered at any time during the process.  In other words, teams can be created in many layers, where each layer is encapsulated within the next layer, and so on.", "Both conceptually and explicitly in a model, teams entities exist independent of their team members.  For instance, teams can reason about how they belong as members in enclosing teams, or about which teams they include as ", "sub-teams.  The teams concept encapsulates coordination activity, and extends the agent concept by associating tasks with roles.", "The ", "Teams extension introduces the new concepts of ", "team", ", ", "role", ", ", "teamdata", " and ", "teamplan", ". The Teams Model includes all the programming elements of the JACK BDI Agent Model, but with an extended semantics for some elements. Agents compiled under the JACK BDI Agent model and teams compiled under the Teams Model can communicate as peers. However, problems may arise if agents compiled under the JACK BDI Agent Model are used as elements of a team.", "In Teams, a ", "team", " ", " is a distinct reasoning entity which is characterised by the roles it performs and/or the roles it requires others to  perform.  The ", "formation of a given team is achieved by attaching ", "sub-teams capable of performing the roles required by the team.  Note that a ", "sub-team may be attached to more than one ", "role in a containing team and as a sub-team in many teams.  As the sub-teams of the given team may require roles to be performed on their behalf, a ", "multi-level hierarchy (or perhaps a more complex structure) may result.", "The team is automatically provided with objects to hold the actual role/sub-team selections.  These objects are known as ", "role containers", ".", "A ", "role", " in Teams is a distinct entity which contains a description of the facilities that the participants in a team/sub-team relationship must provide.  A role defines a relationship between teams and sub-teams.  The ", "role relationship is expressed in terms of the ", "goal and ", "belief exchanges implied by the relationship.", "Teamdata", " is an addition to the JACK data model concept for change ", "propagation declarations.  This allows ", "propagation of beliefs from team to sub-team and vice versa.  A teamdata element defines how a propagated belief is accepted by the receiving team, and incorporated into its belief structures.", "A ", "teamplan", " ", "specifies how a task is achieved in terms of one or more roles.  It typically contains steps determining which of the sub-teams nominated to perform the roles will in fact perform each role (a process known as ", "task team formation", ").  It also dictates the steps directing each sub-team to achieve specific goals.", "Teams provides additional constructs to support both activities (the ", " ", "establish", " reasoning method and the ", "@teamAchieve", " statement).  The JACK ", "@parallel", " statement supports non-sequential coordination of sub-team behaviour.  As team behaviour embodied in a ", "teamplan", " is specified in terms of roles, it is decoupled from the actual sub-team behaviour.  Thus team behaviour can be specified and understood independently of sub-team behaviour.", "A structural relationship between teams is catered for via the ", "role", " concept.  A ", "role defines the means of interacting between a ", "containing team ", "(a ", "role tenderer", ") and a ", "contained team ", "(a ", "role performer", " or ", "role filler", ").  The role defines which goals the role tenderer may request the role performer to achieve, and it also defines the counter-goals that the role performer may require from the role tenderer.", "The team-role structure", " is defined by statements specifying which roles a team can perform, and which roles must be performed by sub-teams.  These ", "declarations are specified in the ", "team's type definitions, where the containing team requires certain roles to be filled, and the contained team must be able to perform certain roles.", "A team can perform roles for a containing team and can also contain sub-teams which perform roles on its behalf.  The ", "sub-teams can in turn contain sub-teams which can perform roles on their behalf etc.", "The following code segments illustrate how these team and role definitions may look.", "In the above example, role definitions for ", "CompanyRole", ", ", "CommandRole", " and ", "ScoutRole", " would also be required.", "The ", "team-role declarations determine which team-team structures can be built at run time.", "The ", "role definition does not contain implementation \u2013 only a description of the facilities that the two participants in the role relationship must provide.  A ", "role definition has two parts: first, a downwards interface that declares the events an entity must handle to take on the role, and second, an upwards interface that declares the events the team entity requiring the role needs to handle.", "A role definition, such as the ", "PlatoonRole", " definition shown above, results in two Java classes being generated by the compiler. One is named by the given ", "RoleType", " type.  The second generated class is a specialised 'container' for instances of a ", "RoleType", " called ", "RoleTypeContainer", ".  The latter is referred to as a ", "role container", ", as its purpose is to contain ", "RoleType", " objects.  In the case of the ", "PlatoonRole", " definition shown above, the compiler would automatically generate the two Java classes ", "PlatoonRole", " and ", "PlatoonRoleContainer", ".", "When the declaration is made that a team requires a given role, the result is a role-defined container to be filled by sub-teams.  The ", "#requires role RoleType reference(min,max)", " statement adds a field to the team class of name ", "reference", " and type ", "RoleTypeContainer", ".  The ", "#requires role", " declaration allows the specification of bounds for the container, which results in team formation constraints", ".", "The arguments ", "min", " and ", "max", " in the ", "#requires", " declaration specify the lower and upper bounds for the number of performers in order for the team to be considered formed.  A zero upper bound dictates an unlimited upper bound.  Note that these bounds are not enforced by the infrastructure in order to allow dynamic attachment/detachment of sub-teams. In practice, a role container can contain an unspecified number of role objects.", "In the team definition", " illustrated above, the declarations state that a ", "Company", " team requires three sub-teams able to perform the ", "PlatoonRole", " role, another sub-team able to perform the ", "CommandRole", " role, and one or more sub-teams able to perform the ", "ScoutRole", " role.  Furthermore, the ", "Company", " team is declared to be a performer of the ", "CompanyRole", " role, which would be a role required by some other team type.", "It should be noted that the declarations above define how an actual team structure may look, but they do not identify the actual team instances, or what the team types are in the actual team structure.", "The", " overall lifetime of a team has two phases.  The first phase is for setting up an initial ", "role obligation structure", ".  The second phase constitutes the actual operation of the team.", "At run time, teams undergo a team formation phase intended to identify the particular sub-team instances that take on roles in a team.  This first phase is initiated via a ", "TeamFormationEvent", " that is posted by the kernel when each team is constructed.  By default, the ", "TeamFormationEvent", " is handled by a plan that identifies the role fillers according to an initialisation file", " ", " in JACOB ", " format.  The following is an example of an initialisation file", ":", "The Teams", " framework is flexible at this point, but it includes the notion of a fully formed team as a team for which all necessary role performers", " have been identified.", "The framework will allow a team instance to complete its team formation phase without necessarily satisfying all the role filling constraints.  However, the team will only be considered formed when its role containment constraints are all filled.  This is a state that a program may query.", "At this stage the initial role obligation structure", " has been constructed.  It is possible to dynamically modify this structure during program execution. This is discussed in the chapter on ", "Team Formation", ".", "Task teams", " are dynamically formed sub-groups within a team, created to perform a team task.  When chosen to handle an event, the initial step of a teamplan is to establish the task team, by selecting which role performers to use from within the team for the various roles needed within the task/plan.", "Task teams are not defined separately, but are contained within the teamplans", " defining the team tasks.  A teamplan uses ", "#requires", " and/or ", "#uses", " declarations to declare the roles needed for the task team. The teamplan may also include an ", "establish()", " reasoning", " method that defines how the task team", " is to be established for the task.  This is illustrated in the code segment below:", "The establish", " step of a teamplan is a proper plan step, and may involve any amount of reasoning by the team entity, as well as negotiations with the candidate sub-teams.  The outcome is either a complete assignment of sub-teams to the roles required by the teamplan, or a ", "plan failure allowing the team to choose an alternative plan for handling the same event.  If there is a ", "fail()", " reasoning method associated with the plan, it does not get executed if the ", "establish()", " method fails.", "There is a default ", "establish()", " method which fills the required roles uniquely at random, if possible.  However, the default establish method only assigns the ", "#requires", " roles and not the ", "#uses", " roles.", "The", " concepts of teams requiring roles and teams performing roles provide a framework where group behaviours and individual behaviours can be clearly separated.  Group behaviour", " is specified in terms of the roles that are required to achieve the desired behaviour.  This behaviour is specified independently of the actual teams performing the roles.  However, the team has access to its sub-teams through the role container, so it is able to perform reasoning based on the actual team membership when necessary.", "The team is a separate entity and has its own teamplans for the specification of team behaviour.  Within these teamplans, the ", "@teamAchieve", " statement can be used  to help coordinate the behaviour of the sub-teams.", "The ", "@teamAchieve", " statement is used to activate a sub-team by sending an event to the sub-team. The team that sent the ", "@teamAchieve", " then waits until the event has been processed by the sub-team.", "In combination with the JACK ", "@parallel", " statement, a wide range of team behaviours can be implemented.", "In addition to communicating via the normal message/event passing in agent-oriented programming, Teams also provides a capability for the ", "propagation of team beliefs.  This propagation can be both from team to sub-team and from sub-team to team.  In the latter case, the capability is provided within Teams to combine the ", "propagated sub-team beliefs within the team.  The use of Team beliefs in conjunction with the Team coordination statements enables sophisticated team behaviours to be implemented.", "This is a simple example to illustrate the basic steps in building a team containing several sub-teams.  In this example, a team of Martians are coming to visit Earth.", "The team will be contained within a spacecraft which will travel to Earth.  Each spacecraft contains at least 3 sub-teams (Martians) capable of performing the role required to pilot the spacecraft.  It also contains 3 Martians capable of carrying out the duties performed by a basic crew member, and 3 capable of performing the task of spokesperson when the craft arrives at its destination.", "In reality, only one Martian allocated to each of these roles is required when the spacecraft performs the task of visiting Earth.  However, 3 Martians are specified per role to ensure that there are backup teams, in case any Martian becomes unavailable.", "In this example, the spacecraft contains 3 Martian sub-teams. Each of the Martian sub-teams is capable of performing each of the 3 roles in spacecraft team's role obligation structure. This means that in practice a Martian sub-team could be responsible for more than one role in a task team. However, in this example, the establish method ensures that each Martian sub-team is only allocated to one role in the task team.", "The steps involved in building this application are as follows:", "Step 1: Create the two team types", "The team definitions", " are very similar to the definitions for a JACK agent, except that the keyword ", "team", " is used, and the ", "Team", " class is extended. Most of the declarations contained in these team definitions should already be familiar from previous JACK agent programming.", "The new declarations illustrated here are ", "#performs role", " and ", "#requires role", ".  As previously discussed, this specifies that a spacecraft must contain 3 sub-teams capable of performing the role of  ", "Spokesperson", ", 3 sub-teams capable of performing the role of ", "Pilot", ", and 3 sub-teams capable of performing the role of ", "Crew", ".  These could be 3 entirely different sub-teams for each of the roles or there could be overlap.  In this example, there are only 3 Martians within the spacecraft team and each is capable of performing all 3 roles.", "The Spacecraft team definition also includes a ", "visit", " method which posts a ", "PerformVisit", " event using the ", "postWhenFormed", " method. The ", "postWhenFormed", " method puts the event in a special queue so that it gets posted asynchronously when the team has completed its team formation phase and built the initial role obligation structure.", "The ", "Martian", " team contains ", "#performs role", " declarations to indicate that teams of this type are capable of performing the roles ", "Spokesperson", ", ", "Pilot", " and ", "Crew", ".", "Step 2: Create the main Java program and the initialisation file", " ", "Step 2.1: Create the main Java program", "The main Java program must construct instances of the spacecraft and Martian teams.  These will be the instances attached to the specific roles in the initialisation file", ".  In the main program, the sub-teams", " must be constructed before the containing team, so that they already exist when the containing team attempts to build its role obligation structure", ".", "Step 2.2: Create the initialisation file", "In ", "this example, it is assumed that this initialisation file is called ", "scenario.def", ".  It contains the following:", "Note the relationship between the names of instances and roles in the main program and in the team definitions in the initialisation file", ". Also note that the team names are in the form ", "name@%portal", " and that if your application is organised into packages, then the package details must be included in the type specifications.", "Step 3: Create the role definitions files", "There are 3 role definition files required in this example.  They are:", "In all three cases, these roles indicate the downward interface between a team that can perform that ", "role and a team that requires a sub-team to perform that role.  This indicates the events that will be posted from the containing Spacecraft team to the Martian sub-team capable of performing the role.  This means that the Martian sub-team must have at least one plan capable of handling each specified event.", "Role definitions can also include additional declarations which will be discussed in the chapter on ", "Roles", ".", "Step 4: Create the events", "Step 5: Create the plans used by the Martian sub-teams", "The 3 plans required are implemented as agent plans.  This is because there are no sub-teams within the Martian teams, so there is no requirement to establish a task team to perform the task or for the new plan statements which enable coordinated activity between the sub-teams.  ", "Teamplans", " are only required when the plan requires sub-teams to perform roles on its behalf.", "Step 6: Create the plan used by the spacecraft team", "The spacecraft team has ", "RoleContainer", " members (one per role that it has declared that it requires). In the teamplan the first task is to iterate through the appropriate role containers to select the particular role object to perform the required roles for a particular instantiation of the plan. This forms the task team for the plan. The role object selected will allow access to both the containing team and sub-team involved in the relationship.", "The ", "#uses role", " declarations indicate that within this plan three sub-teams are required \u2013 one to fill the role of ", "Spokesperson", ", one to fill the role of ", "Pilot", ", and one to fill the role of ", "Crew", ".  In this example, iteration to make a selection occurs through the respective role containers.", "As this plan requires that each sub-team only be responsible for one particular role, a \"busy\" vector is used to keep track of which sub-teams are already allocated to roles. Each instance of a role has details about the containing team and the sub-team. The role's ", "actor", " member contains the name of the instance of the sub-team that is capable of performing the role.  The selection of sub-teams to perform specific roles for this task occurs in the ", "teamplan", "'s ", "establish()", " method", ".", "The ", "RoleContainer", " base class contains a method (", "tags()", ") which returns its current role object tags as a ", "java.util.Enumeration", " object.  The role object tags relate to the role fillers or role performers and can be passed into the role container's ", "find()", " method to return the ", "Role", " object that corresponds to the tag.", "In this example, the ", "establish()", " reasoning", " method makes use of a method called ", "pickRole()", ". The method begins by iterating through the required role container and then performing a ", "find()", " to return the actual role object related to the tag.  When selecting a suitable sub-team, it is a case of selecting the first role object which has a value of ", "Role.ACTIVE", ", and which does not relate to a sub-team that has already been allocated (i.e. not already in the busy vector).", "The test for ", "Role.ACTIVE", " is not strictly necessary in this application as we do not have any dynamic attachment/detachment of teams in the role obligation structure. In this application, the formation of the role obligation structure will have been completed before the event is posted to activate the plan.", "During the attachment/detachment of sub-teams to the role obligation structure, the role object can be in different states. The role object exists and is added to the container before the attachment handshaking between team and sub-team has completed; however, the sub-team may still refuse the attachment.  Similarly, the role object exists, but is not active when the team has initiated a detachment process, because the sub-team may still be performing tasks in the role. The detachment cannot go ahead until the sub-team has finished all of the tasks in the role. The ", "role object is marked as active when the role attachment procedure has completed, and before the role detachment procedure has started. If dynamic attachment/detachment is occurring in an application, it is not sufficient only to look at the presence of a role object to know whether or not the team it refers to is performing in that role, one should also test whether or not the role object is ", "ACTIVE", ".", "If the ", "task team", " is successfully established, the plan body", " will be executed. This plan body illustrates how the ", "@teamAchieve", " statement can be used in combination with the ", "@parallel", " statement to coordinate the behaviour of the sub-teams. The ", "@parallel", " ", "statement operates like a control structure in which the body statements are executed as parallel tasks, while the ", "@parallel", " statement itself is postponed until its termination condition", " holds.  In this example, the arguments used in the ", "@parallel", " statement are as follows:", "The ", "@teamAchieve", " declaration is used to activate a sub-team (role filler) by posting an event to the sub-team. The team that posted the event using ", "@teamAchieve", " waits until the event has been processed.", "In the Martian Visit example, the first argument is the ", "RoleType", " instance obtained from the ", "RoleTypeContainer", " instance.  The second argument is an ", "event", " instance being sent to the sub-team.  In the example, the events are constructed using posting methods from event factories accessed via the sub-team ", "RoleType", " instances.", "Step 7: Compile and run the program", " ", "Step 7.1: Compile the program", "To compile the example:", "Step 7.2: Run the program", "To run the program:", "The team structure", " can be specified by using a Java property to specify an ", "initialisation file that contains details of the teams.  The most straightforward way of doing this is by associating a file to be read in with the ", "Team.Structure", " property via the ", "-D", " flag. In this example, the initialisation file was shown earlier.  Assuming that the file is called ", "scenario.def", ", the program runs as follows:", "The output from the example is:", "In Teams, a team", " is a distinct BDI reasoning entity which is characterised by the roles it performs and the roles it requires others to  perform.  The formation of a given team is achieved by attaching sub-teams (either statically or dynamically) capable of performing the roles required by the team.  Note that a sub-team may be attached to more than one role in a containing team.  As the sub-teams of the given team may require roles to be performed on their behalf, a multi-level hierarchy (or perhaps a more complex structure) may result.  The team is automatically provided with objects to hold the actual sub-team selections.  These objects are known as ", "role containers", ".", "Team definitions", " take the form shown below:", "Each component of this definition is explained in the following table:", "Table 2-1: ", "Components of a Team definition", "The team type definition has the same range of declarations available as an agent definition. In addition, it has declarations that are specific to the team concept. These are the declarations that relate to roles required, roles performed and belief propagation in the team structure. The team declarations are described in the following sub-sections.", "The statement of the form ", "#requires role RoleType reference(min,max)", " is a declaration that teams of the type being defined require a sub-team or sub-teams in the given role, ", "RoleType", ".", "Technically, the ", "#requires role", " statement adds a field to the team class of name ", "reference", " and type ", "RoleTypeContainer", ". The arguments specify the upper and lower bounds for the number of role performers. A value of zero for ", "max", " specifies the default upper bound. A zero upper bound is an unlimited upper bound. A zero for the minimum value specifies a zero lower bound.", "The ", "RoleTypeContainer", " type is created automatically by the compiler when there is a role defined of type ", "RoleType", ".", "A ", "#requires role", " statement:", "This statement is a declaration that the team of the type being defined is able to perform a given role, ", "RoleType", ". ", "A ", "#performs role", " statement:", "This is a declaration that can be found within a team that is a ", "role tenderer", ". A role tenderer will have ", "#requires role", " declarations specifying that it requires sub-teams to perform particular roles on its behalf.", "The declaration has the form", "where", "Note that one or more belief connection sources are required. Belief propagation is described further in the chapter on ", "Team Belief Connections", ".", " This is a declaration that can be found within a team that is a ", "role performer", ". A role performer will have ", "#performs role", " declaration(s) specifying that it can perform a particular role on behalf of a role tenderer.", "The declaration has the form", "where", "Note that one or more belief connection sources are required. Belief propagation is described further in the chapter on ", "Team Belief Connections", ".", "The base class ", "Team", " has a constructor taking a ", "String", " argument that represents the name of the team to be constructed. A team definition must thus include a constructor that invokes the base class (", "Team", ") constructor with the team name provided. As part of the construction, the kernel posts a ", "TeamFormationEvent", " for establishing the team structure (also known as the role obligation structure)", ", and a ", "TeamStartEvent", " to trigger application level initialisation.", "The ", "TeamFormationEvent", " extends ", "MessageEvent", ", but uses BDI behaviour with the following BDI behaviour attributes set:", "Table 2-2: ", "The BDI behaviour attributes for the ", "TeamFormationEvent", "There is a default plan for the ", "TeamFormationEvent", ".  This plan uses the default team manager, described in the next section.", "The team manager is responsible for coordinating the assembly of the team structure. This can be done using team initialisation files, or in the code.", "The team structure can be specified by using a Java property to point to a file that contains details of the teams required. The most straightforward way of doing this is by associating a file to be read in with the ", "Team.Structure", " property via the ", "-D", " flag. This flag is used when running your application with Java.", "An example of the use of this flag follows:", "The team initialisation file", " is specified using the JACOB Object Modelling Language. The format of a team initialisation file is as follows.", "The following table details the meaning of each of the syntactical elements in the team initialisation file:", "Table 2-3: ", "The syntactical elements in the team initialisation file", "Alternatively you can specify the entire team structure inline.", "This allows the entire team structure to be specified as one monolithic ", "Team", " entry, or as a number of distinct team/role relationships.", "The initialisation file can specify a structure that is a superset of those team entities that you declare in code. This allows the provision of a central, predetermined and precise structure for the team. Using this method, the team structure can be better planned and changes can be made quickly and easily in the one location.", "Relationships described in the initialisation file as part of role and team relationships must be legal according to the existing ", "#requires role", ", ", "#performs role", " and Class (", "Team", " and ", "Role", ") declarations in code.", "It is possible to write custom team formation plans to allow any part of a team structure to be constructed dynamically at runtime. This is a powerful technique which allows, for example, dynamic specification of team structure at the top level while the lower level structure is handled by the team initialisation file.", "To specify that a manually formed team is preferred, add a plan to the team's plan set to handle the ", "TeamFormationEvent", ". The default plan has a rank of zero, so adding any plan with the standard plan rank (", "5", ") will cause this default to be overridden.", "The plan to handle the team formation event is then responsible for specifying the structure of roles as they relate to the current team. Specification of team structure involves attaching teams to roles and roles to teams. This can be achieved by posting a ", "RoleControl", " event with its ", "assign(String role, String container, String actor)", " ", " posting method. To detach teams the ", "RoleControl", " event is posted with its ", "revoke()", " ", "posting method. This is discussed in more detail in the chapter on ", "Team Formation", ".", "If the plan that processes the ", "TeamFormationEvent", " succeeds, a ", "StartTeamEvent", " is posted by the kernel. Its purpose is to enable team-specific initialisations.", "The default plan handling ", "StartTeamEvent", " succeeds without doing anything.", "This plan could be overridden to start an application. Any plan that reacts to a ", "StartTeamEvent", " will do as the default plan has a plan rank of zero. Any new plan you write with a default rank of 5 will therefore be executed in preference to the default plan.", "StartTeamEvent", " extends ", "Event", ", but uses BDI behaviour with the following non default BDI behaviour attributes:", "Table 2-4: ", "The BDI behaviour attributes for the ", "StartTeamEvent", "The ", "Team", " class is used as the base class for teams. It provides the implementations for the team 'lifetime' and includes the core team capabilities. The following methods are available within a team: ", "A ", "role", " in Teams is a distinct entity which contains a description of the facilities that that the two participants in a team/sub-team relationship must provide. A role defines a relationship between teams and sub-teams. The relationship is expressed in terms of the event and belief exchanges implied by the relationship.", "The role construct functions at two levels:", " Role definitions take the form shown below: ", "Each component of this definition is explained in the following table:", "Table 3-1: ", "Components of a Role definition", "The compiler generates two classes from a role definition. The first class is the ", "RoleType", ". The second generated class class is a specialised \"container\" for instances of the ", "RoleType", " called ", "RoleTypeContainer", ". This latter class is used in Teams and TeamPlans to group the performers of a role.", "When a team is declared to require a role (e.g. ", "RoleType", "), the resulting Java class for the team will include a field of the corresponding container type, ", "RoleTypeContainer", ". The access to individual role performers is indirect through such a container.", "Further, in a teamplan, the declaration of using a role results in a ", "RoleType", " member or ", "RoleType", " array member local to the plan. This gives a modelling advantage by allowing teamplans to operate with selected, transient sub-groupings that only exist during and for the purpose of carrying out the teamplan.", "The role functions as an interface definition that declares what an entity that fills a given role must be capable of doing in terms of events handled and posted, and in terms of belief propagation. It is also necessary for the role tenderer to be able to handle events declared as posted, and post events declared as handled in the role specification.", "In general, a role definition will require declarations for the following:", "Each declaration is described in the following sub-sections:", "This statement declares that a role performer must be capable of handling an event of ", "EventType", ". The ", "reference", " becomes a data field referring to the appropriate event instance factory to be used by the JACK kernel. It is through this reference that the event's posting method can be accessed when it is necessary to create an event instance to be sent from the tendering team to the performing team.", "The role events are sub-tasked through ", "@teamAchieve", " ", "statements. The role tenderer can sub-task a role performer with the events declared as handled.", "This statement declares that a role tenderer must be capable of handling an event of ", "EventType", ". ", "reference", " becomes a data field of the generated ", "EventType", " class initialisation to the appropriate event instance factory by the JACK kernel. It is through this reference that the event's posting method can be accessed when it is necessary to create an event instance to be sent from the performing team to the tendering team.", "The role events are sub-tasked through ", "@teamAchieve", " statements. The role performer can sub-task a role tenderer with the events declared as posted.", "This is a statement for declaring a synthesizing team belief connection. ", "reference", " identifies the beliefset (of type ", "DataType", ") to be synthesized. There must be a corresponding declaration for the teamdata to be populated through this belief propagation in the team definition. It will be of the form:", "where ", "role_ref", " refers to the reference in the ", "#requires", " declaration for the role in the tendering team definition and ", "reference", " is the reference in the ", "#synthesizes", " declaration in the role definition. The data is directed from the role performing sub-team(s) to the tendering team.", "This is described in more detail in the chapter on ", "Team Belief Connections", ".", "For an inheriting belief connection, a role definition needs to include an ", "#inherits teamdata DataType reference", " statement detailing the type and reference name of the source beliefset/teamdata concerned. This statement is similar to the ", "#synthesizes teamdata", " role statement, but is directed from the tendering team to the performing team.", "This is described in more detail in the section on ", "Team Belief Connections", ".", "This statement allows the definition of methods to be added to the ", "RoleTypeContainer", " class. The statement form is similar to a reasoning method in a JACK plan. An outline is given below:", "The generated ", "RoleTypeContainer", " class extends a base class named ", "RoleContainer", ". This base class provides a number of useful methods for inspecting the container and accessing the role performers. These are described in the section on the ", "RoleContainer Base Class", ". The ", "#container method", " statement may be used to provide user-defined methods in the role container.", "This statement allows the definition of data members to be added to the ", "RoleTypeContainer", " class.", "The statement has the following form:", "For example,", "The ", "Role", " base class provides implementations needed for maintaining role relationships between teams. Role definitions extend ", "Role", " with specific declarations, allowing the kernel to review and enforce type safety in terms of inter-team event handling and posting.", "In a program, role objects have three different uses.", "All three uses will use the specific role types that extend the ", "Role", " base class. The base class in itself merely contains common data members, a few common methods and the service methods that specific role classes will override.", "The ", "Role", " class implements the following interface:", "The ", "RoleContainer", " class is used as the base class for all role containers. It contains common members and methods, and stubs to be overridden by specific role containers.", "The ", "RoleContainer", " class implements the following interface:", "A role definition for ", "RoleType", " results in two classes:", "The ", "RoleType", " classes provide runtime type checking methods that the kernel uses.", "The generated ", "RoleTypeContainer", " class extends ", "RoleContainer", " and provides a method ", "createRole()", " for constructing ", "RoleType", " objects within the context of the container.", "A ", "teamplan", " ", "specifies how a task is achieved in terms of one or more roles. It typically contains steps determining which of the sub-teams nominated to perform the roles in the role obligation structure will in fact perform each role (a process known as ", "task team formation", ").  It also dictates the steps directing each sub-team to achieve specific goals.", "Teams provides additional constructs to support both activities (the ", " ", "establish()", " reasoning method and the ", "@teamAchieve", " statement). The ", "JACK ", "@parallel", " statement supports non-sequential coordination of sub-team behaviour. As team behaviour (embodied in a ", "teamplan", ") is specified in terms of roles, it is decoupled from the actual sub-team behaviour. Thus team behaviour can be specified and understood independently of sub-team behaviour.", " TeamPlan definitions take the form shown below:", "Each component of this definition is explained in the following table:", "Table 4-1: ", "Components of a TeamPlan definition", "The teamplan can use any of the declarations that are available in JACK agent plans. In addition they can have declarations relating to the roles required to establish the task team for the plan and a declaration specifying the role for which the plan is applicable.", "This declaration states that the current plan requires an instance of the role ", "RoleType", ". This declaration is used in the teamplans of the role tenderer, where the reference to the role container instance ", "rolecontainer_ref", " can be used to access the role container to find an appropriate instance of the role ", "RoleType", " to satisfy this role in the task team. This selection of the role instance occurs during the task team establishment phase. During this phase, ", "role_ref", " will be set to refer to the selected performer and will subsequently be used as a reference to this role instance in the plan. ", "role_ref", " is used to issue a ", "@teamAchieve", ". This is because the team executing the plan needs a reference to the role filler (via the role reference) in order to issue the ", "@teamAchieve", ".", "The ", "#requires role", " declarations are used instead of the ", "#uses role", " declarations when the plan is to use the default ", "establish", " reasoning method to select the role instance.", "Events are posted to the role filler by the ", "@teamAchieve", " statement via the role specification. As such, the programmer need not declare that the event being handled by the role filler is ", "posted", " in the plan.", "Each component of the ", "#requires role", " declaration is explained in the following table:", "Table 4-2: ", "Components of the ", "#requires role", " declaration", "This form of the ", "#requires role", " declaration is the same as the previous version except that it specifies that the plan now needs ", "size", " performers from the ", "rolecontainer_ref", ". During the team establishment phase, the variable ", "role_ref", " will be set to an array that contains the selected performers.", "This declaration states that the current plan makes use of an instance of the role ", "RoleType", ". The declaration is used in the teamplans of the role tenderer, where the ", "reference", " to the role container instance ", "rolecontainer_ref", " can be used to access the role container to find an appropriate instance of the role ", "RoleType", " to satisfy this role in the task team. ", "role_ref", " will be used as a reference to this role instance in the plan. ", "role_ref", " is used to issue a ", "@teamAchieve", ". This is because the team executing the plan needs a reference to the role filler (via the role reference) in order to issue the ", "@teamAchieve", ".", "The ", "#uses role", " declarations are used instead of the ", "#requires role", " declarations when the plan overrides the default ", "establish", " reasoning method to select the role instance.", "Events are posted in the role filler by the ", "@teamAchieve", " statement via the role specification. As such, the programmer need not declare that the event being handled by the role filler is posted in the plan.", "Table 4-3: ", "Components of the ", "#uses role", " declaration", "This form of the ", "#uses role", " declaration is the same as the previous version except that it specifies that the plan now needs ", "size", " performers from the ", "rolecontainer_ref", ". During the team establishment phase, the variable ", "role_ref", " will be set to an array that contains the selected performers.", "This last ", "anonymous", " role usage declaration form provides direct access to the team's role container for reviewing and selecting performers, and for team-level manipulation of resources, such as assignment or revocation of roles. The container is referred to with its team reference name, i.e. ", "rolecontainer_ref", ".", "This declaration occurs in plans of the role filler. It indicates that the plan should not only react to the event it handles, it should also test for applicability based on the currently active role.", "Table 4-4: ", "Components of the ", "#applicable_for role", " declaration", "This declaration occurs in plans of the role tenderer. It indicates that the plan should not only react to the event it handles, it should also test for applicability based on the role relationship it is currently acting under. This form of applicability declaration checks that it has a peer relationship with the team that initiated the ", "@teamAchieve", ".", "Table 4-5: ", "Components of the ", "#applicable_from role", " declaration", "The ", "task team establishment", " ", "stage is an initial execution stage for a teamplan, for the purpose of establishing which particular role performers to use for the plan. Technically, the task team establishment stage is achieved by a reasoning method that is performed prior to the plan body when a plan is chosen for execution. Task team establishment may fail, in which case the plan fails.", "The task team establishment method is defined in a teamplan as a reasoning method:", "There is a default task team establishment method, ", "defaultEstablish()", ", which fills all the ", "#requires role", " usages with distinct performers. They are selected by repeatedly calling the ", "nextFiller()", " method of the appropriate role containers. The default establishment only selects active role objects (discussed in the chapter on ", "Team Formation", "), and requires all fillers to be distinct.  The ", "#uses role", " ", "declarations are then left unfilled; for the plural case, the array is constructed though left unfilled.", "An explicit ", "establish()", " reasoning method ", " will override the default task team establishment method and be solely responsible for identifying and assigning task team role fillers.", "Alternatively, an application may override a role container's ", "nextFiller()", " method by means of the ", "#container method", " statement in the role definition.", "The TeamPlan has access to the same members and methods described in the chapter on JACK Agent plans in the ", "Agent Manual", ".  In addition, the TeamPlan has the ", "#reasoning method establish()", " which was described in the section on ", "Task Team Establishment", ".", "The Team Modelling Framework includes all JACK BDI programming facilities, and provides extra team goal handling support through the additional ", "@teamAchieve", " statement.", "The ", "@teamAchieve", " statement is used in a teamplan to sub-task a goal for a team member. The statement may then succeed or fail depending on whether the team member succeeded or failed in reaching the goal. The infrastructure deals with the necessary inter-team coordination, and in particular, takes care of the required task control to deal with all cases of success, failure, or exception propagation.", "The JACK ", "@parallel", " statement is used in a teamplan as a program control structure to sub-task goals for several team members in parallel, or more precisely, to progress on several branches of activity in the teamplan in parallel. The success or failure of the statement depends on the successes and failures of the parallel branches involved. The programmer specifies whether all branches need to succeed or whether it is sufficient that at least one branch succeed. The programmer also specifies whether to wait for all branches to complete before the statement completes, or whether to complete the statement as soon as possible (e.g. with the first successful branch, if the success of one branch is sufficient).", "The ", "@parallel", " statement provides a very powerful mechanism for expressing teamplans. The implied task synchronisation reduces the effort of programming coordinated activity, in particular while focusing on the \"success paths\". Recovery procedures, contingency planning and their effect on coordination, require careful design and use of the task control statements available in JACK.", "The underlying concept is that in failing a sub-task, a sub-team may qualify the failure, i.e. \"fail for a reason\", for which the teamplan might include a contingency. This is a slightly different execution model than BDI, where failing to complete a plan results in a reposting of the goal, to allow another plan to be used. For team tasks, the recovery on failure needs to be dealt with at the teamplan level as it, for instance, may involve re-tasking other sub-teams as well as the sub-team failing its task. At the same time, the recovery may also allow some other parallel tasks to progress without interrupts.", "Further, the choice of which particular response to make at the team level in reaction to the failure of a sub-team to complete its task is a dynamic choice that may depend both on any partial success the sub-team has had towards its goal, and the more global situation at hand, including the current state of other sub-teams.", "The teamplan reasoning methods can use any of the @-statements that are available in JACK agent plans. In addition they can combine the ", "@teamAchieve", " and JACK ", "@parallel", " statements to coordinate and sub-task sub-teams that have been selected to perform particular roles as part of the teamplan's task team.", "The ", "@teamAchieve", " statement is described in more detail in the next sections.", "The ", "@teamAchieve", " declaration is used to activate a sub-team (role filler) by posting an event to the sub-team. The team that posted the ", "@teamAchieve", " then waits until the event has been processed.", "The ", "@teamAchieve", " has the following form:", "Each parameter of the above definition is described in the following table:", "Table 4-6: ", "Components of the ", "@teamAchieve", " statement", "The ", "EventInstance", " used in the ", "@teamAchieve", " is obtained by accessing the event declaration in the role that the plan uses. For example, a plan might contain the following lines:", "This example would require that a role, ", "RoleA", ", had declared an event with an event reference, ", "eventref", ". The posting method of this event is called to generate an event instance inline.", "Optionally, the event can be pre-constructed and a reference kept locally in the plan. This local reference to the event instance could be used to check the value of event members after the ", "@teamAchieve", " has returned.", "As mentioned previously, ", "@teamAchieve", " suspends the execution of the containing teamplan until the event has been processed in the sub-team. A ", "@teamAchieve", " terminates successfully if the event has been successfully handled by the sub-team, otherwise it fails.", "The ", "@teamAchieve", " statement can also be used to post events back to the peer of the team performing the plan, with the following syntax:", "The technique for communicating the results of the processing of a ", "@teamAchieve", " event to the commanding team is as follows:", "The sub-team plan handling an event sub-tasked by a ", "@teamAchieve", " can change the fields of its local copy of the event. When the plan succeeds, these fields are copied back into the event instance that was originally used in the teamplan executing the ", "@teamAchieve", ". Thus, if a handle to that event instance is maintained, it is then possible to retrieve all fields that have been changed.", "During the handling of an event sub-tasked with ", "@teamAchieve", ", a team may throw a Java exception. If this is not caught by the handling plan, it is propagated back to the team that is executing the ", "@teamAchieve", " statement in the following way:", "A ", "@teamAchieve", " may also be interrupted by an exception thrown to it by a parallel execution branch in the teamplan. In this case, the infrastructure notifies the active sub-team so that a ", "TeamAbort", " is thrown to the plan handling the ", "@teamAchieve", " event.", "The notion of team belief connections focuses on how beliefsets of teams and sub-teams may be connected through role relationships. Team Belief Connections are either directed 'upwards', synthesizing beliefs of sub-teams into a containing team, or 'downwards', allowing sub-teams to inherit beliefs from a containing team. In both instances, the connection is between sub-teams that fill specified roles in the containing team's Role Obligation Structure and the containing team.", "The propagation dynamics of a belief connection, both synthesizing and inheriting, are ", "asynchronous", ", and allow for source-end filtering to avoid or delay propagation, as well as target end synthesizing. Default plans for source-end filtering are provided \u2013 these plans can be overridden by the user if desired. Target end synthesis is implemented using the ", "teamdata", " construct.", "A generic capability for propagating changes is provided as part of the beliefset infrastructure.  This propagation includes filtering when the ", " ", "#propagates changes", " declaration is used with an optional event type as described below.", "Beliefset types to be connected must include declaration statements of the following form:", "or", "in their definition.", "A ", "#propagates changes", " statement marks that the beliefset may be a source beliefset in a team belief connection, and it provides an implementation of the connection dynamics, so that changes to the beliefset are propagated correctly.", "If an event type is specified in a ", "#propagates changes", " statement,  it will be sub-tasked to allow the team to block propagation selectively. Event types used for propagation in this way must implement the ", "PropagationEvent", " ", " interface:", "The parameters are described below:", "Table 5-1: ", "Parameters for the ", "propagate", " method", "Note that ", "propagate", " returns an event \u2013 this will typically be achieved by defining a suitable posting method in the usual way and then invoking the posting method from within ", "propagate", ". An example of how to construct such an event is provided in the synthesizing belief connection example presented later in this chapter.", "If changes to a belief type are to be propagated through the team hierarchy, the fields must be transportable. This means that either the fields must be declared as JACOB objects in an api file (refer to the ", "JACOB Manual", " for more details) or they must be defined as a Java class that implements ", "java.io.Serializable", ".", "The ", "teamdata", " construct is provided to encapsulate the behaviour and data associated with the target end of a team belief connection. Each teamdata is defined as a type level entity using the keyword ", "teamdata", ", and it has the following form:", "A teamdata is usually an extension of a normal JACK beliefset, which provides the declarations of fields and queries. The extension part defines the behaviours associated with the receipt of change propagations from the sources involved in the connection.", "A teamdata definition includes two reasoning methods:", " ", " ", "The ", "#synthesis method", " is invoked to receive a propagated belief. It has the following prototype:", "XXXX__Tuple", " is a placeholder for the type of the incoming tuple; it must be replaced with the actual type. The parameters are described in the following table:", "Table 5-2: ", "Parameters for the ", "#synthesis", " method", "The typical behaviour is for the synthesis method to add (selectively) the propagated tuple to the beliefset part of the teamdata. This beliefset can be of a different type to that of the propagated beliefset. However, if multiple sources are involved in a connection, those sources must all be of the same type.", "The synthesis method should be written for optimal performance. If a change propagation update requires any lengthy computation, then the synthesis method should defer that computation and instead post an asynchronous event for that purpose.", "The ", "#connection method", " is a reasoning method which is invoked asynchronously when a sub-team is added to or removed from a role, and when this results in a change to whether or not there is a belief connection for that team. If the team belief is connected through multiple roles, then only the first addition or the last remove will result in a belief connection change and an associated ", "#connection method", " invocation. It has the following prototype:", "The parameters are described below:", "Table 5-3: ", "Parameters for the ", "#connection", " method", "#connection method", " and ", "#synthesis method", " invocations are synchronized, ensuring that a team performs only one such method at a time.", "The computation flow in a team belief connection is as follows:", "Table 5-4: ", "Fields of the ", "PropagationMessage", " event", "All distribution filtering is done at the source end of a change propagation, and all synthesizing computation is done at the target end. Further, at the target end, the change propagations are sequential, allowing only one change propagation at a time to occur.", "A synthesizing team belief connection maps sub-teams' beliefs into corresponding beliefs at the containing team level. This is achieved by propagating information from the sub-team beliefsets to the containing team(s). In order to create a synthesizing team belief connection, appropriate declarations must be included in the", "In addition", "To associate a synthesizing belief connection with a role, the following statement form is used: ", "stype", " and ", "sref", " identify a ", "source", " beliefset that will be involved in a synthesizing belief connection \u2013 the target for the connection is ", "not", " specified. Multiple declarations are allowed within a role definition.", "Recall that a role defines a team/sub-team interface. Within a role type definition, the ", "#synthesizes teamdata", " declaration declares that any sub-team that performs this role must provide a data item named ", "sref", " of type ", "stype", ". Likewise, any team that requires this role should have a target data declaration that involves this particular data item or it will be unable to receive the propagated beliefs.", "A sub-team becomes a source in a synthesizing belief connection by filling a role that contains a ", "#synthesizes teamdata", " declaration. Thus the sub-team must include an appropriate ", "#performs role", " declaration and fill the role in the containing team's Role Obligation Structure. Also a data item with the type and the reference specified within the role must be defined either directly within the sub-team definition, or indirectly through the sub-team's capability structure. The data item can be defined either through a ", "#private data", " declaration, a ", "#exports data", " declaration in a capability, a ", "#synthesizes teamdata", " or through a ", "#inherits teamdata", " declaration. The latter two cases require that the sub-team is the target for another belief connection.", "A team becomes a target in a synthesizing belief connection by requiring a role that contains a ", "#synthesizes teamdata", " declaration. Thus the team must include an appropriate ", "#requires role", " declaration and a ", "#synthesizes teamdata", " declaration that binds the data item specified in the role with the role container that contains the sub-teams that fill the role.", "A ", "#synthesizes teamdata", " declaration has the following form in the team definition: ", "where", "As indicated above, teamdata can be synthesized from beliefs specified in more than one role. In this case, multiple ", "#requires role", " statements will be required in the team and the types of the source beliefs must be the same. Note that ", "ttype", " refers to the type of the target teamdata, not the type of the source data.", "Recall that the teamdata type is typically achieved by extending a beliefset type. Depending on the application, that beliefset type may be the same as the source data type or it may be different.", "The above declaration results in the creation of a teamdata instance. The intention is that the data to be contained in this instance will be provided solely from the data sources for the connection \u2013 hence there is no mechanism to populate the instance at construction time. This teamdata instance is then accessible to the target team and through the ", "#uses data", " declaration, to the target team's capabilities and plans as though it had been declared as ", "#private data", ". In particular, a teamdata instance can be used as a source belief for another belief connection.", "The ", "#synthesizes teamdata", " statement results in code that ensures that when role fillers are added to or removed from any of the indicated role containers the corresponding beliefset change propagation path is added or removed. The actual synthesizing computation is defined separately (via the ", "#synthesis method", " of the teamdata definition). Although a connection is defined in terms of role filling, it is maintained on a sub-team basis. Thus if a connection involves multiple roles and one sub-team fills more than one of the roles, a change to that sub-team's beliefset is propagated only once to the teamdata, and not once for each role container that contains the sub-team.", "Suppose that a ", "Section", " team requires a ", "Soldier", " role and a ", "Private", " team performs the ", "Soldier", " role. Furthermore, suppose that the ", "Private", " team maintains its current location and ammunition level in beliefsets of type ", "Location", " and ", "Ammunition", " respectively. A synthesizing team belief connection that will enable the ", "Section", " team to monitor the location and ammunition levels of its members is to be established. This data will be stored in teamdata of type ", "SectionLocation", " and ", "SectionAmmunition", " respectively.", "The ", "Location", " and ", "Ammunition", " beliefsets could be defined as follows:", "Note that the latter beliefset, ", "Ammunition", ", propagates changes through the ", "AmmoChangePropagation", " ", "filter event", ". When a change occurs, the kernel will sub-task an instance of this event, for deciding whether and when the change propagation is to occur. The ", "AmmoChangePropagation", " event will be similar to the following:", "The application can then include a plan to handle this ", "AmmoChangePropagation", " event. The change propagation will then occur only if and when the plan succeeds.", "The ", "SectionAmmunition", " beliefset is teamdata that accumulates the ", "count", " of sub-team's ", "Ammunition", " beliefsets. A possible definition for this is outlined below:", "SectionLocation", " makes use of explicit replication as follows:", "In the example, the local ", "handler", " is inherited from the ultimate base class, ", "BeliefSet", ", via the explicit base class, ", "Location", ". The local ", "handler", " is thus available since the synthesized belief extends a beliefset. In the general case, the synthesized belief may need to capture the ", "EventRecipient", " explicitly by implementing the ", "EventSource", " interface, which in fact is the ", "attach()", " method.", "The ", "Soldier", " role could contain the following declarations:", "The ", "Private", " team needs to perform the ", "Soldier", " role and to define the data sources specified within that role:", "The ", "Section", " team could incorporate declarations similar to the following:", " An inheriting team belief connection maps a team belief into separate sub-team beliefs. Conceptually this is done by means of a distribution computation that translates the team belief individually for each sub-team, followed by a (virtual) replication of the translated belief into the corresponding sub-team's belief. Often a sub-team will perform a role for one team only, but in the general case the sub-team may fill the same role for many teams and the inherited belief connection will combine belief updates from all the teams in the same way as a synthesizing belief connection.", "In order to create an inheriting team belief connection, appropriate declarations must be included in the", "In addition", "To associate an inheriting belief connection with a role, the following statement form is used: ", "stype", " and ", "sref", " identify a ", "source", " beliefset that will be involved in an inheriting belief connection \u2013 the target for the connection is ", "not", " specified. Multiple declarations are allowed within a role definition.", "Recall that a role defines a team/sub-team interface. Within a role type definition, a ", "#inherits teamdata", " declaration declares that any team that requires this role must provide a data item named ", "sref", " of type ", "stype", ". Likewise any team that performs this role should have a target data declaration that involves this particular data item or it will be unable to receive the propagated beliefs.", "A team becomes a source in an inheriting belief connection by requiring a role that contains a ", "#inherits teamdata", " declaration. The team must therefore include an appropriate ", "#requires role", " declaration. Also, a data item with the type and the reference specified within the role must be defined either directly within the team definition, or indirectly through the team's capability structure. The data item can be defined either through a ", "#private data", " declaration, a ", "#exports data", " declaration in a capability, a ", "#synthesizes teamdata", " declaration or through a ", "#inherits teamdata", " declaration. The latter two cases require that the team is the target for another belief connection.", "A sub-team becomes a target in an inheriting belief connection by filling a role that contains a ", "#inherits teamdata", " declaration. Thus the sub-team must include an appropriate ", "#performs role", " declaration and fill the role in the containing team's Role Obligation Structure. The sub-team must also include a ", "#inherits teamdata", " declaration that binds the data item specified in the role with the role type. Note that this binding differs to that in a synthesizing belief connection, as a role performer does not have access to the role container.", "A ", "#inherits teamdata", " declaration has the following form in the sub-team definition: ", "where", "As indicated above, teamdata can be inherited from beliefs contained in more than one role. In this case, multiple ", "#performs role", " statements will be required in the sub-team and the types of the source beliefs must be the same. Note that ", "ttype", " refers to the type of the target teamdata, not the type of the source data.", "Recall that the teamdata type is typically achieved by extending a beliefset type; depending on the application, that beliefset type may be the same as the source data type or it may be different.", "The above declaration results in the creation of a teamdata instance. The intention is that the data to be contained in this instance will be provided solely from the data sources for the connection \u2013 hence there is no mechanism to populate the instance at construction time. This teamdata instance is then accessible to the sub-team, and its capabilities and plans as though it had been declared as ", "#private data", " \u2013 in particular, it can be used as the source belief of another belief connection.", "The ", "#inherits teamdata", " statement results in code that ensures that when role fillers are added to or removed from any of the indicated role containers the corresponding beliefset change propagation path is added or removed. The actual synthesizing computation is defined separately (via the ", "#synthesis method", " of the teamdata definition). Although a connection is defined in terms of role filling, it is maintained on a sub-team basis. Thus, if a connection involves multiple roles and one sub-team fills more than one of the roles, a change to the containing team's beliefset is propagated only once to the sub-team's teamdata, and not once for each role container that contains the sub-team.", "Suppose that a ", "Company", " team requires a ", "FireSupport", " role and a ", "Platoon", " team can perform the ", "FireSupport", " role. Furthermore, suppose that the ", "Company", " team maintains the current enemy location in a beliefset of type ", "Location", ". An inheriting team belief connection that will enable the ", "Platoon", " team to monitor the enemy location is to be established. This data will be stored in teamdata of type ", "EnemyLocation", ".", "The ", "Location", " beliefset definition developed for the synthesizing belief connection example can be used:", "The ", "EnemyLocation", " beliefset is teamdata that mirrors the enemy location maintained by the ", "Company", " team. A possible definition for this is outlined below:", "The ", "FireSupport", " role could contain the following declaration:", "The ", "Company", " team requires a team to perform the ", "FireSupport", " role and it must define the data sources specified within that role:", "The ", "Platoon", " team needs to perform the ", "FireSupport", " role and to create the teamdata instance to receive the enemy location:", "This chapter describes team formation. It includes a description of the process that occurs when sub-teams are attached to the role obligation structure", " of a containing team. During the process of attachment/detachment, the associated role instances pass through various states. This process of attachment is carried out during the initialisation phase when the team is constructed. In addition, it is possible to have sub-teams dynamically attached/detached to the role obligation structure while the application is running.", "Teams have a capability, ", "TeamCap", ". This capability includes plans that handle the initial team formation with the sub-tasking and default handling of a ", "TeamFormationEvent", ", and the posting of a ", "StartTeamEvent", ". The initialisation process is triggered automatically as part of the team instance construction.", "An application may override the handling of a ", "TeamFormationEvent", " simply by defining a plan that handles the event (the default plan is of precedence rank 0, and therefore a new plan \u2013 with standard rank 5 \u2013 will have higher precedence.)", "The ", "TeamCap", " capability also includes handling of ", "RoleControl", " events. These events are posted by the application level to assign or revoke a sub-team as a role performer. When they are posted, the infrastructure layer posts additional events that result in any negotiation and detachment/attachment required to connect a sub-team to a containing team. The application layer may include plans that are involved in the negotiation and/or react to the success or failure of attachment/detachment. The ", "RoleControl", " events therefore allows dynamic modification of role obligation structures during the lifetime of an application.", "If the application layer requires a ", "non-JACK", " agent/team  (e.g. an agent written in an alternative language) to perform a role, the application code would need to carry out the attachment and negotiation on both sides of the relationship without the use of ", "RoleControl", " events.", "A ", "RoleType", " instance can be in one of three states (", "INACTIVE", ", ", "ACTIVE", " or ", "DETACHED", ").  When the ", "RoleType", " object is created, it is initially in the ", "ACTIVE", " state. However, it will not be available/visible until it is actually added to a role container. The posting of a ", "RoleControl", " event constructed using the ", "assign", " posting method results in an attempt to add the ", "RoleType", " object to the specified role container. If the object is successfully added to the role container, then the object will be in the ", "ACTIVE", " state.", "When the team revokes a role, the ", "RoleType", " object is placed in the ", "DETACHED", " state.  This means that any plans that already have access to the object can continue to access the object but no new activity should be allowed access the object. It is the users responsibility to check the state of the ", "RoleType", " object.", "The ", "RoleType", " object will change from the ", "DETACHED", " to the ", "INACTIVE", " state when the team filling the role finishes processing all tasks associated with the role. It will also be removed from the role container at that point.", "The interaction diagram in the following figure illustrates the interaction between a tendering team and a suggested role performer for processing an ASSIGN action.  ", " ", " ", " ", " ", " ", " ", " ", "Figure 6-1: ", "Interactions for adding a role performer", "On the tendering team side, the ASSIGN action is initiated via a ", "RoleControl(ASSIGN)", " event, that asks for the addition of a role performer to a given RoleContainer. This is a synchronous request, and the RoleControl handler does not return control to the invoking task after having issued the ", "SubTeamProtocol(ASSIGN)", " message, but waits until the actor team has processed and replied to it.", "On the (suggested) performer side, the infrastructure layer queries the application level whether the suggested addition is to be accepted. This is done by sub-tasking a ", "RoleEvent(QUERY)", " event, to be handled by the application level and passed or failed. If the event handling fails, the suggested action is understood as rejected, and a ", "SubTeamProtocol(REJECT)", " message is sent to the tendering team. This results in a transition for the ", "RoleType", " instance to ", "Void", " state (i.e. the ", "RoleType", " instance is marked as ", "Detached", " and it is removed from the ", "RoleTypeContainer", "). Further, a ", "RoleEvent(REJECTED)", " is posted on the tenderer team side, so as to allow application level reasoning about the rejected addition.", "If the handling of the ", "RoleEvent(QUERY)", " event succeeds, the suggested action is understood as accepted, and a ", "SubTeamProtocol(ACCEPT)", " message is sent to the tendering team. This results in a ", "RoleType", " instance state transition to ", "Active", ", and the posting of a ", "RoleEvent(ASSIGNED)", " event, so as to allow application level reasoning about the accepted addition. On the performer side, a ", "RoleEvent(ASSIGN)", " event is posted to notify about a successful assignment.", "The following figure illustrates the interaction between a tendering team and a suggested role performer for processing a REVOKE action.  ", " ", " ", " ", " ", "Figure 6-2: ", "Interactions for removing a role performer}}", "On the tendering team side, the REVOKE action is initiated via a ", "RoleControl(REVOKE)", " event, that asks for the removal of a role performer from a given RoleContainer. This is a synchronous request, and the RoleControl handler does not return control to the invoking task directly after having issued the ", "SubTeamProtocol(REVOKE)", " message, but waits until the actor team has processed and replied to it. First, however, the ", "RoleType", " instance concerned is marked as ", "Detached", ", to block subsequent attempts to issue further team tasks to the role performer.", "On the performer side, the infrastructure then waits until all tasks under the role have been completed before returning a ", "SubTeamProtocol(CONFIRM)", " message to the role tendering team. As application level notifications, ", "RoleEvent(REMOVE)", " and ", "RoleEvent(REMOVED)", " events are posted on the performer and tendering sides respectively.", "SubTeamProtocol", " [sent and handled event]", "RoleControl", " [handled event]", "RoleEvent", " [posted event] ", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Copyright \u00a9  2003-2012, Agent Oriented Software Pty. Ltd.", "Previous Topic", " | ", "Next Topic", " ", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Previous Topic", " | ", "Next Topic", " ", "Copyright \u00a9  2000-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACOB libraries", " to interface with C++ applications are not delivered as part of the JACK product and must be purchased separately. The C++ libraries are available precompiled for the following list of platforms. Other platforms can be made available on request.", "JACOB C++ libraries", "The JACK\u0099  documentation set includes the following manuals and practicals:", "The JACOB\u0099  Object Modeller (JACOB) is a system providing machine and language independent object structures that can be stored or transmitted.", "JACOB provides distributed objects in a similar way to CORBA, COM or Java object serialisation but the emphasis is on simplicity, portability, efficiency and low overheads.", "Language specific code can be generated from JACOB object structures, allowing code in the target language to create, manipulate, send and receive JACOB objects easily.", "JACOB consists of four major components:", "These components are explained in the ", "Functional Components of JACOB", " chapter of this document.", "JACOB is useful in situations that require data structures that are machine and language independent. Two important uses of JACOB are:", "JACOB can be used to initialise objects ", "within an application. JACOB-generated code together with user written code allows applications to read and/or write objects to and from a data file or stream.", "An example of object initialisation can be found in the ", "Sample Applications", " chapter.", "JACOB may be used to allow communication ", "between different processes. JACOB-generated code together with user written code allows populated objects to be sent and received between different processes.", "For example, JACOB may be used to transport data between a Java class and a C++ class, or a JACK Agent and a C++ class. Populated objects are sent and received between the processes via a socket. JACOB code is inserted into each class to allow objects to be sent and/or received.", "Figure 1-1: ", "Communication between a JACK Agent and a C++ process using JACOB", "An example of transporting objects can be found in the Sample Applications section below.", "JACOB object structures that are stored and transported contain objects that are defined in dictionary files", ", using the JACOB Data Definition Language. A dictionary file defines the structure and legal fields of one or more objects, and usually has an ", ".api", " extension.", "Once one or more objects are defined in a dictionary file, the dictionary file is compiled", " using JACOB Build. JACOB Build can generate either Java or C++ code (Java code is generated by default). Once code is generated, the resulting classes can then be compiled and used for object initialisation and transportation.", "JACOB object structures", " may be created using objects defined in a dictionary, and stored in a data file. Object structures can be created and edited by opening a data file in the JACOB Object Browser, which provides a graphical environment, or a text editor.", "JACOB object structures may be used to store objects in applications. The types of objects allowed in an application are defined in a dictionary. The objects used in the application may be stored in one or more data files, which can be edited in the JACOB Object Browser.", "Data files", " containing JACOB object structures may currently be in one of four formats", ":", "Data files may be converted to another format using the Convert option in JACOB Build. Note that currently only ASCII and Binary formats can be used with C++ code.", "JACOB dictionary files can be compiled to generate Java or C++ code. Code in other languages may be generated if a new driver is defined for that language.", "The JACOB Object Browser", " provides a graphical environment which allows users to view or edit JACOB object structures contained in data files. Data files that contain objects defined according to a dictionary file may be created, edited and saved. Objects can be edited by opening a data file and loading the associated dictionary file. New objects, object copies and object references may be added to a data file. The JACOB Object Browser may also be used to delete objects from a data file.", "Figure 1-2: ", "The JACOB Object Browser Window", "To use JACOB to initialise and/or transport data structures, the user must first define the objects in the structure in one or more dictionary files. Objects and their fields are defined in dictionary files using the JACOB Data Definition Language.", "After defining objects in one or more dictionary files, the dictionary files must be compiled with JACOB Build.", "JACOB dictionary files contain definitions of objects", " and their fields. The contents of a data file or data stream may only include objects of the types that are defined in one or more dictionary files.", "An example object ", "MyData", " is defined below.", "A corresponding ", "MyData", " object in a data file would be :", "Figure 1-3: ", "Development steps for JACOB object transportation", "To use JACOB for communication", " between processes, JACOB-generated code together with user written code must be used to transport JACOB objects. A dictionary written in the JACOB Data Definition Language is compiled into source code for transportable classes using JACOB Build. Either Java or C++ source code may be generated. The source code is then compiled into classes with a standard Java or C++ compiler.", "The transportable classes generated are able to read and write object structures to and from streams. Additional code must be written by the user to provide and manage streams for transporting objects. The streams used may be files or sockets, or a JDBC connection (for Java only). The streams may also be any other kind of byte stream interprocess communication infrastructure.", "To send objects, code written by the user must be included in either existing or new classes. The code must decide which stream to use, and then use it to send objects.", "Code written by the user for receiving objects must also be included in existing or new classes. The code for receiving JACOB objects must decide which dictionary to use (a dictionary may include definitions from multiple dictionary files). The code must also construct and initialise the chosen dictionary. Once a dictionary has been chosen, the code must decide which stream and associate it with the dictionary. The stream may then be used to receive objects.", "Once the classes containing the user-written sender and receiver code have been compiled, they can be used to send and receive objects.", "Each JACOB component is installed", " automatically during the installation of JACK. The JACOB components", " can be found in the following locations:", "Table 2-1: ", "JACOB Packages", "The general form of the command to start the browser is", "where ", "<data-file>", " is a data file or a collection of data files, and ", "<dict-file>", " is a dictionary or multiple dictionaries associated with the preceding data file(s). If the command ends with one or more data files, the last collection of data files will be associated with the preceding dictionary set (if any). The JACOB Object Browser may also be started with multiple groups of data file collections with associated dictionaries.", "Note that both ", "<data-file>", " and ", "<dict-file>", " are optional. The browser can also be started as", "Objects defined in the JACOB Object Modelling language can be viewed and modified using the JACOB Object Browser", ". Each object structure consists of two parts:", "The JACOB editor has a menu bar at the top of the work area. The following menus are available from the menu bar.", "Use this menu to perform operations on the current project.", "Figure 3-1: ", "The JACOB Object Browser File Menu", "Use this menu to change JACOB Editor options.", "Figure 3-2: ", "The JACOB Object Browser Option Menu", "When this options is on, a list of multiple objects with unique identity numbers is written. A list of multiple objects that is read or written may have references between the objects. Note that this option is not supported for binary files.", "Use this menu to access the About JACOB screen", ".", "Figure 3-3: ", "The JACOB Object Browser Help Menu", "Objects and their contents are manipulated in the ", "work area", " of the JACOB browser. The work area is depicted below.", "Figure 3-4: ", "The JACOB Object Browser Work Area", "The work area consists of two ", "panes", ": the Object Tree pane and the Object Field pane. These panes are explained below.", "The left pane in the main work area is the Object Tree pane", ". This pane is depicted below.", "Figure 3-5: ", "The Object Tree Pane", "This is where new object files appear when loaded or created. Once a dictionary is added to a data file, the browser in the Object Tree pane can be used to navigate the object structure.", "The right pane in the main work area is the Object Field pane", ". This pane is depicted below.", "Figure 3-6: ", "The Object Field Pane", "This is where the fields that an object contains are displayed and manipulated. These can include text and numeric fields as well as pointers to other objects.", "The arrow in the top left-hand corner is used to go up a level in an object structure.", "Context-sensitive menus are available extensively throughout the editor environment. These menus are invoked by moving the pointer over an item and clicking the right mouse button. This presents options that are relevant to the current object or work space in the current context.", "The context-sensitive menus introduce some new functionality and duplicate some options available in the File menu.", "Selecting New from the file menu creates a new Data File", " which appears in the Object Tree pane. Initially this file is unstructured and empty.", "Adding a dictionary to an empty file such as this will allow new objects to be declared.", "Data files can be loaded", " by selecting Open from the file menu. These files appear in the Object Tree pane, but their structure is not known so they cannot be browsed or edited until a dictionary is added to them.", "When loading data files, make sure that the file name filter in the dialog is set to All Files so that data files are visible.", "Invoking the context-sensitive menu for a Data File presents the menu below.", "Figure 3-7: ", "Add Dictionary in a data file context-sensitive menu", "In order to populate a Data File one or more dictionary (", ".api", ") files must be attached to it. This is achieved by selecting Add Dictionary", " from the above menu and loading the appropriate file from disk.", "This dictionary defines what objects and fields exist in each data file, and describes how they are structured. Once an appropriate dictionary has been added to a data file, its structure and contents can be viewed in the browser.", "Once a set of dictionary files has been attached to a Data File, the set cannot be edited. The only way to change a set of associated dictionary files is to close the Data File, open it again and then add dictionary files.", "A sub-menu named Add Top-Level Object", " is available in the context-sensitive menu for a Data File. An example of this menu is depicted below.", "Figure 3-8: ", "Add Top-Level Object in a data file context-sensitive menu", "This menu displays all of the top-level objects that are declared in the current dictionary file in alphabetical order. Selecting any of these objects adds a new object of that type to the current data file.", "Additionally, either a reference", " to or a copy", " of the currently selected object can be added to the data file by selecting Add Reference or Add Copy (respectively).", "Objects can contain fields and object pointers", ", which are references to other entities. Object pointers are initially null, but can be made to point to newly created objects.", "In the example above, if ", "Address", " is selected, an object of that type would be added to the current data file. The ", "Address", " object has three fields; ", "Name", ", ", "Email", " and ", "Phone", ". It also has a pointer to a ", "Comments", " object which can be added optionally to include extra information about a person.", "See the section entitled ", "Replacing Object Pointers", " for details on how to make object pointers non-null.", "Once an object has been added to a data file, its fields can be modified. In the example above, an ", "Address", " object is added to the data file, which would result in the following appearing in the Object Field pane:", "Figure 3-9: ", "An ", "Address", " object in the Object Field pane", "Any changes made to the above fields are mirrored in the Object Tree pane if the dictionary file declares these fields as visible there.", "Clicking on the ", "Comments", " object pointer will display any comments pertaining to this address book entry. Clicking the arrow in the top left-hand corner of the Object Field pane will return to the previous fields view.", "If an object pointer is null, it must to be replaced", " with a reference to an object before data can be added to it. This can be achieved by invoking the context-sensitive menu on the object pointer and selecting Refer to New. This menu is depicted below.", "Figure 3-10: ", "Refer to New in an object pointer context-sensitive menu", "This menu displays objects of the correct type that can be added in place of the current value.", "In the example in Figure 2.10, the ", "Comments", " object pointer can be set to point to a newly created ", "Comments", " object. Once created, the contents of this object can be changed and saved to disk like any other field.", "In addition to this, an object pointer can be replaced with a pointer to the object currently selected in the Object Tree pane by selecting Refer to Selection. This would allow, for example, the object pointer for two different ", "Address", " entries to point to the same ", "Comments", " object. Further, an object pointer can be replaced with a pointer to a ", "copy", " of the currently selected object by selecting Refer to Copy.", "To remove an object pointer", ", invoke the context-sensitive menu on an object pointer and select Remove Object. This menu is depicted below.", "Figure 3-11: ", "Remove Object in an object pointer context-sensitive menu", "This deletes the reference to that object and makes the object pointer null.", "An aggregate object", " is a 'container' into which other objects can be placed. Aggregate objects can be empty, or they can contain one or more objects.", "Figure 3-12: ", "An unexpanded aggregate object", "An 'empty' aggregate object does not have an expansion control next to it; in the image above, 'directives' and 'implements' are empty aggregate objects.", "To put something into an aggregate object, open the contextual menu for the aggregate object.", "Figure 3-13: ", "Insert New in an aggregate context-sensitive menu", "With the Insert New", " submenu, the user can put in a new object of any type the aggregate can hold. Alternatively, you can choose Insert Reference", " or Insert Copy", " to put either a reference to or a copy of the currently selected object into the aggregate object.", "The user can expand an aggregate object to see its contents. Each object contained in an aggregate object behaves just as if it were a top-level object. The user can also use the contextual menu for an object contained in an aggregate object to add further objects to the aggregate.", "Figure 3-14: ", "Add New in an object context-sensitive menu", "The Add New, Add Reference and Add Copy menu items behave much the same as the Insert New, Insert Reference and Insert Copy menu items in the contextual menu for the aggregate object itself. However, whereas the Insert items add an object at the top of the aggregate's list, the Add items place the newly added object immediately after the object from whose contextual menu the item was chosen. For example, in the image above, if you choose Add New and Field, the new field will be placed after the ", "hard_lab", " field already in the aggregate.", "Items can be deleted from aggregate objects by choosing Delete from the item's contextual menu. You cannot, however, delete the aggregate objects themselves (except by deleting the top-level object of which they are a part).", "To delete a top-level object", ", invoke the context-sensitive menu on an object and select Delete. This menu is depicted below.", "Figure 3-15: ", "Delete in an object context-sensitive menu", "This causes the selected object to be deleted from the current Data File.", "If all changes from an editing session need to be discarded", ", then invoke the context-sensitive menu on a Data File in the Object Tree pane and select Re-Open. This menu is depicted below.", "Figure 3-16: ", "Re-Open in a data file context-sensitive menu", "This option allows the version of the data file most recently saved to disk to be loaded into the editor. A dialog appears to confirm that this action is what was intended.", "Selecting Save from the file menu or the context-sensitive menu on a Data File, causes the current data file to be saved", " to disk. If the data file was newly created, the user is given the opportunity to change the default name before saving the file to disk.", "The editor automatically creates backup files by copying the original file to a file with a ", ".bak", " extension. The current file is then written to disk.", "Selecting Close from the context-sensitive menu on a Data File closes the current data file", ". The user is given the option to save any changes before closing the file.", "Selecting Exit from the File menu causes the JACOB editor to quit", ". The user is given the option to save any changes before exiting the editor.", "This section describes the JACOB Data Definition Language", " in Extended Backus-Naur Form (BNF) and describes the purpose of each of the fields and keywords.", "In this syntax definition, non-terminal tokens are written as words within angle brackets, like ", "<Object>", ", and square and curly brackets mark repeated (zero or more) and optional (zero or one) parts respectively. Terminal tokens are enclosed by single-quotes, and a vertical bar separates alternatives.", "The JACOB Data Definition Language", " has a syntax as defined below.", "The lexical level defines ", "<Ident>", ", ", "<Fieldname>", ", ", "<Number>", ", ", "<String>", " and ", "<EOF>", " as follows:", "There may also be Java-style comments interspersed with definitions in the usual way, i.e. each comment is treated as a token separator.", "All string values to be used as identifiers in generated code must adhere to the appropriate identifier syntax of the target language, and must not be any of its reserved words.", "A JACOB Data Definition Language file is itself a sequence of objects in the language described above. There are six different types of objects to use:", "Objects of type ", "Class", " are definitions of new classes. The fields of such objects are:", "Objects of type ", "Field", " are used for defining the fields of a class. The fields of a ", "Field", " object are:", "Objects of type ", "Enum", " are definitions of enumeration types. The fields of such objects are:", "Objects of type ", "Member", " are used for defining the members of an enumeration. The fields of a Member object are:", "Objects of type ", "Code", " are portions of target language source code to be copied to the output 'in place'. The fields of a ", "Code", " object are:", "A ", "Code", " object is a ", "Directive", " object.", "Objects of type ", "Include", " declare files containing portions of target language source code to be copied to the output (usually) 'in place'. The fields of an ", "Include", " object are:", "A ", "Include", " object is a ", "Directive", " object.", "JACOB is used to compile ", "*.api", " files", ". The compilation procedure results in the generation of C++ or JAVA files which are then compiled using a standard C++ or JAVA compiler (as appropriate). The resulting object code defines the JACOB objects.", "The general form of the command to compile ", "*.api", " files is", "where ", "<dict-file>", " is a dictionary file. JACOB Build ", "may also be run with the command line options", " below.", "Displays language warnings.", "usage : ", "-Wlang", "arguments : none", "default value (option not used) : no language warning errors are reported", "Sets the default output language of JACOB. The language may either be Java or C++. Another language may be used if a driver for that language is created.", "usage : ", "-lang ", "string", "default value : java", "When Java code is generated, this identifies the location of JACOB classes for the generated code.", "usage : ", "-pkg ", "string", "default value : ", "aos.apib", "This defines the file defining the location of the class that initialises JACOB. This effectively sets the syntax of the JACOB language by allowing an alternative definition of the default language file.", "Another language, such as XML or SQL may be used if a class that initialises the language exists.", "usage : ", "-syntax ", "string", "default value : ", "aos.apib.apic.boot.DefReader", "This option identifies the directory where generated files are placed.", "usage : ", "-dj ", "string", "Files generated have the extension ", ".cpp", " instead of ", ".C", ". Note that this option must be used with the ", "-lang cxx", " option.", "usage: ", "-dos", "This option is not used by default.", "Displays the version of the JACOB Compiler.", "usage: ", "-v", " or ", "-version", "Displays the command line options that may be used with the JACOB Compiler.", "usage: ", "-h", " or ", "-help", "Converts data", " from one format to another format.", "usage: ", "-convert -v ", "mode infile outfile typedict", "-v", " (optional): verbose mode prints messages about opening files, and reading and writing objects.", "mode", " is an inmode letter immediately followed by an outmode letter. e.g. ", "AX", " converts ASCII to XML.", "a", ",", "A", " = ASCII; ", "x", ",", "X", " = XML; ", "b", ",", "B", " = Binary; ", "u", ",", "U", " = unspecified (input only)", "baxu", " uses the ", "read/writeMultipleObjects()", " interface. ", "AXBU", " uses the ", "read/writeObject()", " interface.", "Note that the ", "readMultipleObjects()", " interface is not supported for Binary.", "typedict", " (optional): a compiled ", "Init__XXX.class", " file or any JACOB definition file. Note that the ", ".class", " extension should not be included.", "The JACOB Compiler ", "processes one or more definition files, and generates code modules to link in with an application that intends to use, read and write the classes defined through the definition files. The compiler is a Java application that takes one or more definition files as input, and generates one or more Java or C++ files as output.", "The definition files input to the compiler are defined using the JACOB Data Definition Language", ". The syntax is defined in Extended Baccus-Naur Form (EBNF) in the section entitled ", "JACOB Object Modelling", ".", "For generating Java code, the field type mappings are as described in the section entitled ", "JACOB Object Modelling", ".", "All ", "Enum", " definitions", " result in separate classes; one for each ", "Enum", " class. Within that class, each enumeration member is layed out as a ", "public static final", " data member. Fields of type ", ":enum", " are translated into ", "int", " values.", "Each ", "Class", " definition", " results in its own Java file containing the corresponding Java class definition. In addition, each class definition is associated with a ", "StreamerSupport", " extension class that contains the code for reading and writing objects of the type defined. These ", "StreamerSupport", " extension classes are non-public classes appended to the Java files defining the data classes.", "One additional class is also generated for the definition source file. The class is named by adding the prefix ", "Init__", " to the input file name. This class includes all the initialisation", " needed for using the definition set in an application. Further, when compiling this class with ", "javac", ", all classes concerned are compiled automatically.", "Inline source code fragments from Code directives", " for Java are copied to the output file as they occur among the fields.", "The default aggregation is an array. The ", "Aggregate", " interface includes methods for adding elements and constructing an ", "Enumeration", " for accessing elements in order.", "For generating C++ code, the field type mappings are as described in the section entitled ", "JACOB Object Modelling", ", with the exception of the ", ":bool", " type, which is mapped into ", "unsigned char", " such that ", "0", " represents ", ":false", " and ", "1", " represents ", ":true", ".", "Each ", "Enum", " definition", " is mapped into a class definition as in Java, but the member set is also reconstructed as an anonymous ", "public enum", " declaration within the class.", "All classes of a definition source file are layed out together in a single C++ source file pair (separating headers from implementation).", "The generated code further includes an additional class that includes all the initialisation needed for using the definition set in an application.", "Inline source code fragments from ", "Code", " directives", " for C++ are copied to the output header file essentially as they occur among the fields; in particular, within a ", "public:", " segment.", "The default aggregation is a class extending ", "JACOB_Aggregate", ". This includes methods for adding elements and constructing a ", "JACOB_Enumeration", " for accessing the elements in order.", "The Writer", " is the combined functionality of code libraries and generated code and enables the mapping of an object structure onto a stream representation so that the same object structure is reconstructed when the reader is applied to the stream (see below).", "The Writer functionality involves the processing of an in-core data structure for generating an output stream in one of several formats. The algorithm for this is a plain depth-first tree traversal that is implemented partly by pre-compiled library code and partly by the code generated for the class definitions. The latter is contained within the ", "StreamerSupport", " extension classes, and each such class is therefore (made) capable of accessing the transportable fields. (In C++ code the class is called ", "JACOB_StreamerSupport", ".)", "There is a generic class for output streaming, named ", "OutStream", ", and there are four separate extensions of this:", "The generic C++ class for output streaming is ", "JACOB_OutStream", ". This class currently has the separate extensions ", "JACOB_AsciiOutStream", " for ASCII file representation and ", "JACOB_BinaryOutStream", " for binary file representation.", "The writing of objects", " is generated as part of the ", "StreamerSupport", " or ", "JACOB_StreamerSupport", " derivations as straightforward depth-first tree traversal. The ", "AsciiOutStream", " or ", "JACOB_AsciiOutStream", " identifies and keeps track of objects written out (including the one in progress); upon the second and subsequent occurrence of an object its identification number", " is written out, preceded by an ", "&", " character instead of traversing the object. The identification number is unique within the object structure.", "The Reader", " is the combined functionality of code libraries and generated code, and enables the processing of an object stream and the reconstruction of the corresponding runtime object structures it represents. The Reader functionality involves the processing of an input stream in one of several formats into a corresponding in-core data structure, by using a ", "TypeDict", " of definitions regarding which objects the input stream may contain.", "There is a generic class for input streaming, named ", "InStream", ", and there are separate extensions of this, ", "AsciiInStream", " for the ASCII file representation described earlier, ", "JDBCInStream", " for JDBC file representation, ", "XMLInStream", " for XML file representation and ", "BinaryInStream", " for a compact binary file representation. The ", "InStream", " constructor uses reflection to find the class of an object if it is not known.", "To open a JACOB stream", " regardless of the format, use the static method", "which will inspect the start of the stream, and return the correct derivation of InStream after resetting the input stream.", "The generic C++ class for input streaming is named ", "JACOB_InStream", ". This class currently has the separate extensions ", "JACOB_AsciiInStream", " for ASCII file representation and ", "JACOB_BinaryInStream", " for binary file representation.", "To open a JACOB stream", ", the format must first be determined. The correct derivation of ", "JACOB_InStream", " can then be opened (e.g. a new ", "JACOB_AsciiInStream", " for ASCII data).", "Reading", " is invoked by a stream method ", "readObject", ". This reader recognises the ", "<Object>", " introduction phrase (the angle bracket and the class name of the object to come in the input stream). This is sufficient to construct a blank object of the indicated type, and invoke the read method of the associated ", "StreamerSupport", " (or ", "JACOB_StreamerSupport", " for C++).", "The Initialisation", " is the combined functionality of code libraries, generated code, and user-written code by which the reading/writing capability is enabled in an application program.", "The JACOB functionality is enabled in an application, apart from any linking of object files, by constructing a ", "TypeDict", " object. The ", "TypeDict", " object defines the mapping between class names occurring in transport streams and actual class definitions generated by the JACOB utility.", "When JACOB processes a definition file", ", it also constructs a definition group class with a static method ", "addGroup(TypeDict d)", ", which at runtime adds all the definition classes of the definition file into the given dictionary (", "TypeDict", "). The generated definition group class is named after the definition file.", "The application program thus constructs and builds the ", "TypeDict", " object or objects as part of its initialisation. The ", "TypeDict", " object is then passed to the reader method of the input stream for reading the input file.", "A dictionary file", " defines the object(s) to be manipulated. When JACOB is run on an ", ".api", " file, say ", "filename.api", ", two files are generated. If Java code is generated, one of the files is called ", "Init__filename.java", ". If C++ code is generated, one of the files is a header file, containing an ", "Init__filename", " class definition.", "The ", "Init_filename", " code implements the dictionary specification for the object. Objects are read using the dictionary specified during the input of the stream. The Sample Application section contains examples demonstrating the implementation of dictionaries.", "Apart from the simple ASCII language described earlier, JACOB can read and write files", " in several other formats. These formats encode exactly the same information but may be preferred for other reasons.", "There are currently four supported JACOB file formats:", "ASCII", " is a concise and readable format which can be edited by hand quite easily if necessary. The input streamer is called ", "AsciiInStream", " and the output streamer is called ", "AsciiOutStream", ".", "The binary", " format is an extremely compact object representation. It can be used when the speed of object transfer is paramount or if it is desirable to make the stream not human-readable. The input streamer is called ", "BinaryInStream", " and the output streamer is called ", "BinaryOutStream", ".", "The JDBC format", " is a representation of data in tabular form such as a relational database or spreadsheet. JACOB objects in JDBC format are in the form of multiple tables. These tables are in generic form. If multiple JACOB object structures are stored in a database with other data, they are identified as distinct JACOB object structures by 'stream identifiers'. Stream identifiers are used to uniquely identify JACOB objects transported in a JDBC output streamer.", "The input streamer for JACOB objects in JDBC format is called ", "JDBCInStream", " and the output streamer is called ", "JDBCOutStream", ". Both of these classes use methods from the ", "JDBCSupport", " class.", "See the JDBC API documentation (", "http://java.sun.com/products/jdbc", ") for further information.", "The XML format", " is very similar to the default ASCII representation.", "Where the ASCII representation would write:", "The XML representation would be:", "The XML format is useful if you want to use XML tools to manipulate the JACOB objects or object definitions. The input streamer is called ", "XMLInStream", " and the output streamer is called ", "XMLOutStream", ".", "JACOB was designed to be used for two primary application types:", "The first example provides code used to initialise an array of objects using a data file and JACOB.", "The second example describes code contained in the JACK distribution defining a client/server system that sends and receives objects in either binary or ASCII. There is code for the client and the server in both C++ and Java.", "One of the most common uses of JACOB is as a utility to input data directly into an application", ". This section lists and describes some simple code that uses JACOB generated code to read data into an application. Java code for this example is described in the Java development steps section. C++ code is included with the JACOB C++ distribution, and is described in the C++ development steps section.", "The procedure used consists of the following steps:", "The example in this section reads a list of waypoints", " from a data file and stores them in the form of an array of objects of type ", "Waypoint", ". The data is then written to the screen, written to an ASCII file, and written to a binary file. The ASCII and binary files could be read in using the JACOB code by another application, or at a different time by the current application. This code could of course be combined with components of the client/server code and the object read in could be sent to other processes.", "Step One:", " The waypoint object is defined in the file", " named ", "waypoint.api", " below.", "Note that the embedded 'package' statement should be changed to the actual package being built. Alternatively, this line can be removed entirely if an empty (unnamed) package is being built.", "Step Two:", " This must be compiled using the command", "This will generate two files, ", "Waypoint.java", " and ", "Init__waypoint.java", ".", "Step Three:", " These two files must be compiled using the command", "Step Four:", " The following is a printout of a class called ", "WaypointInitialiser", " that reads a list of waypoints in the form of the ", "Waypoint", " class. The waypoints are stored in an array, printed to the screen, and written to an ASCII file and a binary file.", "Lines 1 to 5 import the required classes.", "Lines 7 to 10 identify the class.", "Line 11 declares a ", "Base", " class type.", "Line 13 declares an object of type ", "TypeDict", ". This is the JACOB dictionary declaration.", "Lines 16 to 17 declare the variable waypoints as type ", "Vector", ".", "Lines 20 to 21 initialise the JACOB dictionary using the JACOB generated class ", "Init__waypoint", ". This defines the waypoint class.", "Lines 24 to 70 are the main body of the code. The entire code is contained in the ", "try", " beginning from line 24. While this is not textbook Java, the method was chosen as it simplifies the main body of the code.", "Lines 27 to 30 define a JACOB ASCII input stream as the data file ", "fighter_1.dat", ". Note that the stream is associated with the dictionary.", "Lines 39 to 42 define the ASCII and binary output streams used for output to the ASCII and binary files.", "Lines 46 to 56 read the data file.", "Line 46 controls the loop. Objects are read from the data file until there are no more objects to read.", "Lines 49 to 52 store each waypoint read in in the ", "Vector", " waypoints.", "Lines 54 and 55 write each waypoint object to the binary and ASCII stream as they are read from the input file.", "Lines 58 to 62 store the ", "Vector", " waypoints in an array of type ", "Waypoint", ", ", "w", ".", "Lines 63 to 70 extract the data from the array ", "w", " and writes it to the screen", "Source code for the application Waypoint Initialiser is listed below.", "Step Five:", " A sample data file", " containing a list of six waypoints, ", "fighter_1.dat", ", is listed below.", "When the above code is executed:", "The code has demonstrated the reading of an ASCII file, and the writing of ASCII and binary files. The reading of binary files is also possible using a similar method to the ASCII read.", "The code in this example has been tested under Linux and VC++ but it may still require some changes, depending on the C++ environment and where the JACOB libraries are installed.", "The C++ object initialisation example", " may be compiled with the provided Makefile by typing 'make', or by following the steps below.", "Step One:", " The waypoint object is defined in the file", " named ", "waypoint.api", " below.", "Note that this file is the same as the ", "waypoint.api", " file in Step One of the Java development steps section apart from the ", "Code", " object. JacobBuild will ignore a ", "Code", " object if the ", ":lang", " field does not match the language of the source code being generated.", "Step Two:", " The ", "waypoint.api", " file must be compiled using the command", "which generates two files, ", "waypoint.h", " and ", "waypoint.cpp", ".", "Note that using the ", "-dos", " command line option creates ", ".cpp", " files instead of ", ".C", " files.", "Step Three:", " The generated C++ file must be compiled, either with the provided Makefile, using an IDE such as Visual Studio or using the command", "Step Four:", " The following is a printout of a file called ", "WaypointInitialiser.cpp", " that reads a list of waypoints in the form of the ", "waypoint", " class. The waypoints are stored in an array that is printed to the screen and written to an ASCII file and a binary file.", "Lines 1 to 15 include the required header files.", "Lines 17 to 19 are the application ID.", "Lines 20 to 24 declare the ", "Streams", " and other parameters used in the application.", "Lines 25 to 27 declare the files used in the application.", "Line 23 declares a ", "JACOB_Base", " class type.", "Line 24 declares a an object of type ", "JACOB_TypeDict", ". This is the JACOB dictionary declaration.", "Lines 39 to 40 construct and initialise the JACOB dictionary using the JACOB generated class ", "Init__waypoint", ". This defines the waypoint class.", "Line 62 defines a JACOB ASCII input stream as the data file ", "fighter_1.dat", ". Note that the stream is associated with the dictionary.", "Lines 108 to 111 define the ASCII and binary output streams used for output to the ASCII and binary files.", "Lines 115 to 129 read the data file.", "Line 124 stores each waypoint read in the ", "vector", " waypoints.", "Lines 127 to 128 write each waypoint object to the binary and ASCII stream as they are read from the input file.", "Lines 140 to 152 extract the data from vector and write it to the screen.", "Source code for the application WaypointInitialiser is provided below.", "Step Five:", " The application can be compiled using", "A sample data file", " containing a list of six waypoints, ", "fighter_1.dat", ", is listed in Step Five of the Java development steps section.", "When the above code is executed:", "The code has demonstrated the reading of an ASCII file, and the writing of ASCII and binary files. The reading and writing of binary files is also possible using similar methods to the ASCII reading and writing methods.", "The object communication", " capability of JACOB allows the sending and receiving of data objects ", "between JAVA and C++ classes. One of the major potential uses of this code is to implement rapid data transport between C++ and JAVA code. This section lists and describes some simple code that demonstrates this capability.", "Both Java and C++ code for a simple client and server system is included with the JACOB C++ distribution. Java code for this example is described in the Java development steps section. C++ code is described in the C++ development steps section.", "The example described in this section consists of two applications, a server and a client. The server receives data objects from a client and sends the data back to the client. The client sends a specified data object to the server (and receives the object back again) a specified number of times. This code can be used as test code to obtain timing information for data object sending. The data object can be sent or received in either ASCII or binary form, or in XML form (Java only).", "Step One:", " Some test data objects are defined in the file ", "msg.api", ". This file is partially reproduced below.", "msg.api", "The three data objects defined above are very simple but can be used to illustrate this application, as will be shown later in this section in Step Five.", "Step Two:", " This must be compiled using the command", "This will generate several files. For each of the objects (", "ObjectName", ") defined in the ", "msg.api", " file it will generate an ", "ObjectName.java", ". It will also generate an ", "Init__msg.java", " file.", "Step Three:", " These generated java files must be compiled, for example using the command", "Step Four", ": The server and client code are printed and explained below.", "Server", "The server receives data objects sent to it by a client, and sends the objects back to the client.", "Lines 1 to 3 consist of the required imports.", "Lines 5 to 9 are the class and application ID.", "Line 10 declares an object of type ", "TypeDict", " (the dictionary).", "Lines 11 to 14 declare the ", "Streams", " and other parameters used in the class.", "Lines 16 to 22 check the number of command line arguments.", "Line 24 constructs the new dictionary (", "TypeDict", ").", "Line 25 initialises the dictionary.", "Lines 27 to 34 initialise the socket with the user specified port number.", "Lines 35 to 73 contain the code that reads the objects and writes them in the appropriate type (binary, ASCII or XML). This code loops forever, accepting a connection and reading all objects present on the stream.", "Line 67 declares an object of type ", "Base", ".", "Lines 68 and 69 read the data object and then write the data object back to the client.", "Server code", "Client", "The client sends a specified data object to the server (and receives the object back again) a specified number of times.", "Lines 1 to 3 consist of the required imports.", "Lines 5 to 8 are the class and application ID.", "Line 10 declares an object of type ", "TypeDict", " (the dictionary).", "Lines 11 to 14 declare the ", "Streams", " and other parameters used in the class.", "Lines 16 to 29 check the number of command line arguments.", "Line 31 constructs the dictionary.", "Line 32 initialises the dictionary.", "Lines 34 to 46 use the command line arguments to set the host, input file, port number and the number of times a data object is to be sent by the client.", "Lines 50 to 61 set up the input stream to read in the data object.", "Line 62 reads the data object into ", "obj", ".", "Lines 67 to 93 set up the socket (using the user-specified port number and host), and the input and output streams (ASCII, binary or XML streams as defined by the command line arguments).", "Line 95 records the time at the start.", "Lines 97 to 106 write the data object to the output stream and read the data object when it is returned. This is repeated the number of times specified by the command line argument.", "Lines 107 to 110 print the time taken to send and receive the data object the specified number of times.", "Client code", "Step Five", ": The application can be compiled using", "If the data is being sent to the server in ASCII form and being sent back to the client in ASCII form then the server may be started using the following command", "The last two command line arguments specify the form in which the data object is sent and received. This can be either A (ASCII), B (binary) or X (XML). Note that the server can be started in its own window or it can be executed in the background.", "The client may be started using the following command", "This also specifies that the data is being sent and received to/from the server in ASCII form. ", "data.RealSimple", " is the file that contains the data. For example it could contain", "The code in this example has been tested under Linux and VC++ but it may still require some changes depending on the C++ environment and where the JACOB libraries are installed.", "The C++ object communication example", " may be compiled with the provided Makefile by typing 'make', or by following the steps below. Further information about running this example is provided in the ", "readme", " file in the example directory.", "Step One:", " Some test data objects are defined in the file ", "msg.api", ". Part of this file is reproduced in Step One of the Java development steps section.", "Step Two:", " The ", "msg.api", " file must be compiled using the command", "This will generate two files, ", "msg.h", " and ", "msg.cpp", ".", "Step Three:", " The generated C++ file must be compiled, either with the provided Makefile or using the command", "Step Four", ": The server and client code are printed and explained below.", "Server", "The server receives data objects sent to it by a client, and sends the objects back to the client.", "Lines 1 to 9 include the required header files.", "Lines 14 to 20 declare the ", "Streams", " and other parameters used in the application.", "Line 16 declares an object of type ", "JACOB_TypeDict", " (the dictionary).", "Line 17 declares an object of type ", "JACOB_Base", ".", "Lines 27 to 30 check the number of command line arguments.", "Lines 31 constructs the new dictionary (", "JACOB_TypeDict", ").", "Line 32 initialises the dictionary.", "Line 34 initialises the socket with the user specified port number.", "Lines 35 to 82 contain the code that reads the objects and writes them in the appropriate type (binary or ASCII). This code loops while a connection is accepted.", "Lines 71 and 77 read the data object and write the data object back to the client. This code loops forever, reading all objects present on the stream.", "Server code", "Client", "The client sends a specified data object to the server (and receives the object back again) a specified number of times.", "Lines 1 to 15 include the required header files.", "Lines 20 to 32 declare the ", "Streams", " and other parameters used in the application.", "Line 22 declares an object of type ", "JACOB_TypeDict", " (the dictionary).", "Lines 41 to 65 check the number of command line arguments.", "Lines 42 to 58 use the sixth command line argument to set the input file.", "Lines 66 to 68 use the command line arguments to set the port number and the number of times a data object is to be sent by the client.", "Line 69 initialises the socket with the user specified port number and host.", "Line 72 constructs the dictionary (", "JACOB_TypeDict", ").", "Line 73 initialises the dictionary.", "Lines 75 to 80 set up the input stream to read in the data object.", "Line 82 reads the data object into ", "b", ".", "Lines 91 to 116 set up the input and output streams (ASCII or Binary streams as defined by the command line arguments).", "Line 122 records the time at the start.", "Lines 125 to 131 write the data object to the output stream and read the data object when it is returned.", "Line 140 prints the time taken to send and receive the data object the specified number of times.", "Client code", "Step Five", ": The application can be compiled using", "If the data is being sent to the server in ASCII form and being sent back to the client in ASCII form, the server may be started using the following command", "The last command line argument specifies the form in which the data object is sent and received. This can be either A (ASCII) or B (binary).", "Note that the server can be started in its own window or it can be executed in the background.", "The client may be started using the following command", "This also specifies that the data is being sent and received to/from the server in ASCII form. ", "xx.dat", " is the file that contains the data. For example, it could contain", "The client may also be started without a data file. Objects may be entered manually, by typing them in to the same window the client is running in. e.g. type ", "<RealSimple :val 8>", " and press Enter.", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.\n", "\nLink to", "Non-frame version.", "\n\n\n", "Copyright \u00a9  2012, Agent Oriented Software Pty Ltd", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "JACK applications invariably involve multiple agents interacting asynchronously with each other and with their environment. Thus although the specification of individual behaviours may be straightforward, the system behaviour that is observed at execution time can be extremely complex and difficult to interpret. The benefits of using graphical visualisation to display distributed system behaviour has long been recognised and visualisation tools have been provided with JACK since its first release. Visualisation is not only of benefit to the end users of an application, but also to the developers and to Subject Matter Experts (SMEs).", "From a developer's perspective, appropriate visualisation of system behaviour can greatly assist in the debugging of an application. The role of the SME in the development of an agent application is to provide agents with domain-specific behaviours. The JDE provides tools for graphical specification of agent behaviours which have proven to be well-suited for use by SMEs who are non-programmers. However, verification of these behaviours can be difficult for the reasons mentioned above. Visualisation of agent behaviours during system execution has proven to be of great assistance in the verification process.", "The people involved in an application development will require different visualisations of behaviour depending on the nature of the application and their role in its development. Consequently JACK provides a selection of visualisation tools that focus on particular aspects of system behaviour:", "Table 1-1: ", "Visualisation tools that focus on system behaviour", "While the tools listed previously are extremely useful in helping a developer to debug an application, situations occasionally arise when a more detailed trace of system execution is required. For these situations, JACK provides the following logging tools:", "Table 1-2: ", "Logging tools", "The remainder of this manual discusses each of the behaviour visualisation and logging tools in detail.", "The JACK Intelligent Agents\u00ae  ", "Design Tracing Tool", " (DTT)", " provides developers with the ability to view the internal details of a JACK application during execution. Execution of applications is shown by highlighting the links in design diagrams", " that correspond to transitions between JACK elements. The DTT can be used to view different aspects of executing applications by tracing a combination of all agents, selected agent types and individual agents in project design diagrams.", "The DTT runs within the JACK\u0099  Development Environment (JDE)", " and requires connection to a portal associated with the traced JACK application. Once tracing settings have been configured and the application to be traced is running, tracing visualisation can be run, stepped or paused.", "Designs traced in the DTT are shown in ", "traced design windows", " (TDWs)", ". TDWs can be shown in descriptive mode, and tracing can be viewed more slowly by delaying transitions between design elements. During application execution, the DTT displays the number of previous executions of transitions between design entities. The agents and tasks relevant to a TDW can also be viewed.", "The DTT can be configured to trace a combination of all executing agents, agent types and individual agents in team and non-team projects. Any design element in a design diagram apart from a ", "Note", " and a ", "Named Role", " is traceable.", "The intended users of the DTT are application designers, subject matter experts (SMEs) and agent system developers. Application designers can use the tool to verify system behaviour. SMEs can use the DTT to demonstrate running JACK applications. In particular, the descriptive mode of the DTT can be used to show a running description of application execution. Application designers can use the DTT as an agent behaviour debugging tool", ".", "This chapter assumes that the user is familiar with the JACK\u0099  Development Environment (JDE)", " and JACK\u0099  agents. If further information is required on these topics, refer to the ", "Development Environment Manual", " and the ", "Agent Manual", ".", " ", "This chapter introduces concepts and terms associated with the DTT. Setup of the DTT, including configuration of design tracing, is described in detail. Design tracing control and different options for tracing visualisation are also described. The chapter concludes with a worked example of running and stepping through design tracing of an application.", "The DTT runs within the JDE.", " An application that is examined with the tool runs in a separate process. The DTT uses JACK's interprocess communications layer (DCI)", " to pass data between the application and the tool. Consequently, before the user can examine the application using the DTT a DCI connection needs to be established. Also, since the tool connects to a running application, the programmer must incorporate a pause mechanism into the application. This ensures that execution of the application is halted at an appropriate point until the DTT has connected to the application and is in control of execution.", "Design tracing and graphical plan tracing", " are mutually exclusive and must be used separately. There are several differences in the requirements for setting up and running both types of tracing. If both types of tracing are attempted at the same time, the behaviour of the JDE is undefined.", "For further information on tracing graphical plans see the ", "Plan tracing tool", " chapter of this manual.", "To trace the agents in an application, it is necessary to connect the JDE to a portal", " created by the application.", "When running an application a portal with the name ", "%portal", " is created by default, with the host ", "localhost", " and the next available port. An application can also be created with a non-default portal with the use of the DCI command line arguments or by setting the following Java portal properties", ":", "From a programming viewpoint, the only modifications that may need to be made to an existing JACK application for it to be used with the DTT:", "A traced application must be launched with the following Java argument", ":", "    -Djack.tracing.enabled=true", "A traced application can be started from the command line or from the ", "Compiler Utility", " of the JDE.", "If a traced application is launched from a command line, the portal used by the JDE to connect to it must be specified with the Java portal properties specified in the previous section. Design tracing is displayed within the JDE. Once an application has started, the JDE must be launched and connected to the portal created by the application (see the ", "Trace", " menu section for further details).", "The following is an example of the command used to start a traced application named ", "Program", " from the command line:", "java -Djack.tracing.enabled=true -Djack.portal.name=Server -Djack.portal.host=localhost -Djack.portal.port=9999 Program", "When a traced application is started from within the JDE, it is launched from the ", "Run", " tab of the ", "Compiler Utility", ". A portal can be created by the application either with Java portal properties or DCI command line arguments", ". The following figure shows an application named ", "Program", " run with DCI command line arguments.", "Figure 2-1: ", "Starting tracing from the JDE", "For more information on DCI, refer to the ", "Agent Manual", ". The application will now execute until its suspension point is reached.", "Once the application has been started, the DTT can be launched from within the JDE", ".", "The JDE provides access to DTT functionality via the ", "Trace", " menu", ". This menu has 5 choices:", "Note that the nameserver address can also be entered using the ", "Connect To Portal...", " menu option.", "Figure 2-2: ", "Connect to Nameserver", " dialog", "Figure 2-3: ", "Connect to Portal", " dialog", "Once connected to a portal and design tracing is configured, an application can be resumed from its suspension point and traced with the DTT.", "Figure 2-4: ", "Ping Agent", " dialog", "Once connected to a portal the ", "Tracing", " window", " opens. The tracing window displays the name of the portal and all agents in a running application connected to the portal. Tracing of an application may be stopped by right clicking on any agent in the ", "Tracing", " window and selecting the ", "Quit tracing on portal", " option,", " or by closing the ", "Tracing", " window.", "The ", "Design Tracing Configuration", " window", " enables design tracing settings to be added, removed and edited. The design tracing settings configured in the window can also be saved and loaded. Design tracing settings are usually configured before starting an application. These settings can also be configured while an application is paused.", "The ", "Design Tracing Configuration", " window is opened from the ", "Trace", " menu", " of the JDE. The window contains a table with a row for each design tracing setting and a columncorresponding to each trace configuration field.", "The ", "Design Tracing Configuration", " window can contain any combination of rows. This allows tracing of all agents, specific agent types and/or individual agents in a design diagram. Each row is usually shown as a separate TDW during application execution. However if two rows with the same name specify the same design diagram they are shown in one TDW.", "The following figure shows the ", "Design Tracing Configuration", " window configured with rows for three TDWs. The first row traces all agents in the ", "Paint_requesting_capability", " design. The second row traces the agent named ", "robot23", " and the third row traces all ", "Part", " type agents.", "Figure 2-5: ", "The ", "Design Tracing Configuration", " window", "A new trace row is added by clicking the ", "Add", " button", " of the ", "Design Tracing Configuration", " window. The new trace row can then be edited to trace all agents, all agents of a specified type or an individual agent in a design diagram. The new trace row can also be edited to trace a different aspect of an existing row. Note that it must be given the same name as the existing row.", "A trace row is removed by clicking and highlighting the trace row in the ", "Design Tracing Configuration", " window and clicking the ", "Remove", " button.", "A trace row must specify a project and design diagram", ". The ", "Agent Type", " and ", "Agent Name", " fields are optional and are filled with asterisks (*) by default, which means all agents will be traced. Trace rows can be edited as required (if a traced application is already running it should be paused first).", "A design diagram is selected", " by typing the project path, file name and design name or by choosing the project and design graphically.", "To choose a design diagram manually, click the ", "Project:Design Name", " column of the ", "Design Tracing Configuration", " window and type the project name and design name in the following format:", "To choose a design diagram graphically, click the ", "Choose...", " button", " in the ", "Project:Design Name", " column of the ", "Design Tracing Configuration", " window. A window named ", "Select a project file, then choose a design diagram", " will appear.", "Click the required project file from the list of files. A list of design diagrams associated with the project file will be displayed. Click on a design diagram name and then click ", "Choose", ".", "Once a design has been selected, the path of the project file will be shown in the ", "Project:Design Name", " column of the ", "Design Tracing Configuration", " window. The width of the ", "Project:Design Name", " column can be increased to view the full path and name of the project and design.", "Agent types to be traced", " are configured in the ", "Agent Type", " column of the ", "Design Tracing Configuration", " window. When a new row is created it contains an asterisk (*) in the ", "Agent Type", " column by default, meaning all agent types will be traced. Different agent types in a design diagram are traced by adding a new row for each type.", "An agent type is selected", " by typing the agent type or by selecting it graphically. To select an agent type manually, click the ", "Agent Type", " column of the ", "Design Tracing Configuration", " window and type the agent type in the following format:", "To select an agent type graphically, click the ", "Choose...", " button", " in the ", "Agent Type", " column of the ", "Design Tracing Configuration", " window. A window labelled ", "Select a project file, then choose an agent type", " will appear. Click on the required project file from the list of files. A list of agent types associated with the project file will be displayed. Click on an agent type and then click ", "Choose", ".", "Once an agent type has been selected, the agent type will be shown in the ", "Agent Type", " column of the ", "Design Tracing Configuration", " window.", "Individual agents to be traced", " are configured in the ", "Agent Name", " column of the ", "Design Tracing Configuration", " window. When a new row is created it contains an asterisk (*) in the ", "Agent Name", " column by default, meaning all agents of the type specified in the ", "Agent Type", " field of the row will be traced (if ", "Agent Type", " is also * then all agents in the design diagram will be traced). The execution of agents in a design diagram can be viewed in separate TDWs by configuring rows with individual agents.", "Individual agents are traced by typing the agent name and server name in the ", "Agent Name", " column. Agent names should by typed as they appear in the code of the application to be traced. For example, an agent named ", "robot23", " in an application that connects to a server named ", "Server", " is typed as ", "robot23@Server", ".", "Two or more individual agents in a design diagram may be traced in the same TDW by naming rows with the same name.", "To trace all agents", " in an application, select the required design and leave the agent type and agent name columns as the default settings (asterisks).", "The design tracing configuration of an application in the ", "Design Tracing Configuration", " window can be saved to a ", "design tracing configuration file", " and loaded for later use.", "To save the current configuration", " in the ", "Design Tracing Configuration", " window click the ", "Save...", " button", ". A ", "Save Trace Configuration File", " dialog window will open, where a new design tracing configuration file can be named and saved.", "To load a previously saved design configuration file", ", click the ", "Load...", " button", " in the ", "Design Tracing Configuration", " window and select the required design tracing configuration file from the ", "Load Trace Configuration File", " dialog window.", "Note that when a design tracing configuration is loaded from a file, any previously configured trace settings in the ", "Design Tracing Configuration", " window are replaced by the trace settings from the file.", "A design tracing configuration file", " contains the date and time of the file creation and details of each trace setting. The design tracing details that are saved are:", "The design tracing configuration of an application must be applied before commencing tracing. Once all trace settings have been configured, click the ", "Apply", " button", " in the ", "Design Tracing Configuration", " window. The ", "Design Tracing Controller", " window will open.", "If a design, agent type or agent name of a row is incorrectly specified, an ", "Error applying configuration", " window", " will appear.", "When an error occurs, check the trace settings in the ", "Design Tracing Configuration", " window. Ensure that the following details are correct:", "An error may also occur due to:", "Execution of an application traced with the DTT is controlled with the ", "Design Tracing Controller", ". This window will appear after configuring tracing, or can be manually chosen from the ", "Trace", " menu.", "The window is divided into ", "Global Trace Settings", " and ", "Design Trace Control", ". ", "Global Trace Settings", " allow tracing to be turned on or off, designs to be traced in descriptive mode and configuration of delayed tracing visualisation. ", "Design Trace Control", " allows tracing to be stopped, run or stepped.", "Figure 2-6: ", "The ", "Design Tracing Controller", " window", "Tracing visualisation", " is turned on and off by selecting the ", "Tracing On", " checkbox", " in the ", "Design Tracing Controller", " window.  Unchecking the checkbox stops tracing at the next traced transition and the executing application continues without tracing visualisation. This option is selected by default.", "Tracing designs in descriptive mode is turned on by selecting the ", "Trace in Descriptive Mode", " checkbox", " in the ", "Design Tracing Controller", " window. This option displays elements of all traced designs with their descriptions. Designs are not traced in descriptive mode by default.", "Descriptive mode in an individual TDW can also be toggled on and off using the ", "Toggle descriptive mode", " button on the tool bar of the window.", "A traced application runs in realtime by default, and the transition time between each traced design element is 0. Application execution and tracing visualisation can be delayed by increasing the ", "Transition Delay in Seconds", " to a number larger than 0. The transition delay can be edited before or during design tracing.", "Execution of a traced application is controlled", " with the ", "Stop", ", ", "Run", " and ", "Step", " buttons of the ", "Design Tracing Controller", " window.", "When a traced application is resumed after connecting to a portal, the application begins running and pauses at the first step of a TDW. The ", "Stop", " button is selected and tracing can be continued by selecting the ", "Run", " or ", "Step", " button.", "Design tracing of an application is stopped by using the ", "Tracing On", " checkbox or the ", "Stop", " button. Tracing of an application may be stopped completely by:", "When tracing is stopped the application continues to run and nothing is highlighted in TDWs.", "Tracing of individual TDWs can be stopped and continued using the ", "Stop/Continue tracing design", " button", " on the control bar of the window. Transitions will not be highlighted in the TDW as the traced application continues executing.", "The ", "Step", " button is used to trace a single step of execution of the traced application. For each step, all transitions between design elements that occur at that step are shown. Tracing visualisation is stopped once the step is completed.", "If JACK elements of an application without corresponding elements TDWs are being executed, there may be some delay before the next highlighted link is displayed.", "The following steps describe how to reconfigure design tracing", " of an application during execution:", "Design tracing is displayed in traced design windows (TDWs)", ". Traced design windows contain documentation, a design graph, a list of relevant agents and a list of relevant tasks. TDWs also have a control bar and tool bar to view components of the traced design and to control tracing visualisation. The design graph of a TDW is the only component displayed by default.", "A separate TDW is displayed for each row. If two different rows with the same name trace the same design only one TDW will be shown.", "The DTT highlights transitions that correspond to direct execution transitions between JACK elements. This means that although indirect links appear in a design diagram they will not be highlighted during design tracing.", "Figure 2-7: ", "A design graph in a traced design window", "Traced design windows can be resized, maximised, and moved within the JDE window to view design tracing in more than one window.", "The control bar", " of a TDW has checkboxes for displaying:", "The control bar also has two buttons for controlling tracing visualisation:", "The first button resets the number of times traced links in the design have been followed to zero. The second control bar button is used to stop and continue tracing of that particular window.", "The tool bar", " of a TDW has a zoom slider and a ", "Toggle descriptive mode", " button. The zoom slider", " is used to shrink or enlarge the design graph. The ", "Toggle descriptive mode", " button", " is used to display elements in the design diagram with or without documentation.", "To view the documentation", " of the design graph in a TDW, select the ", "Documentation", " checkbox in the control bar of the window.", "The design graph of a TDW contains the project design diagram specified in the corresponding design tracing configuration row. Design graphs are displayed for tracing visualisation only and are not editable.", "To view a design graph", " in a TDW, select the ", "Design Graph", " checkbox in the control bar of the window (selected by default). A non-editable design graph will be displayed.", "To view a list of agents", " that are relevant to a TDW, select the ", "Agents", " checkbox in the control bar of the window. The names, types and portals of agents relevant to the TDW are displayed.", "To view a list of tasks", " that are relevant to a TDW, select the ", "Tasks", " checkbox in the control bar of the window. The details of all executed tasks relevant to the TDW are displayed. These details include the task number, the JACK elements involved and the name, type and portal of the agent executing the task. When a relevant task is selected, the design graph of the TDW appears grey to indicate that the selected task and associated transition has occurred.", "Links between design elements are highlighted when a transition", " between corresponding JACK elements occurs. The number of times a link has been followed is shown in brackets next to the link label. For example, a link between a plan and a posted event followed twice is shown as ", "posts (2)", ".", "The traced design window containing the most recently traced transition always appears in front of other traced design windows. Transitions that occur simultaneously between design elements in the same TDW are shown as links highlighted at the same time. To view both transitions, ensure that both windows are visible (e.g. side by side in the JDE).", "If JACK elements without corresponding design elements in a TDW are executed, tracing visualisation does not change. The last followed link in the current TDW remains highlighted until a link on another TDW is followed.", "The number of times links in a TDW have been followed can be reset to 0 by clicking the ", "Reset the count on links", " button", " on the TDW control bar.", "If no TDWs are displayed", " when a traced application is executed:", "This section briefly describes the ", "paint_robot", " example and explains the steps necessary to set up and run the application with the DTT", ". The ", "paint_robot", " example is based on an example in the JACK\u0099  Agent practical exercises. The example is accessed by selecting the ", "paint_robot", " example from the ", "Create Project From Example", " option in the ", "JDE Help", " menu.", "Figure 2-8: ", "Create Project from Example", " options", "The  ", "paint_robot", " example contains a Robot agent and several Part agents. The Part agents are responsible for being painted and to achieve this, they send appropriate requests to the Robot agent. The current status of the part (painted/not painted) is held by each part agent in its own beliefset.", "Two design diagrams are contained in the example, ", "Painting_capability", " and ", "Paint_requesting_capability", ". The ", "Painting_capability", " design contains design elements which correspond to JACK elements that are used by the ", "Painting", " capability of the ", "Robot", " agent type. The ", "Paint_requesting_capability", " design contains design elements which correspond to JACK elements that are used by the ", "PaintRequesting", " capability of the ", "Part", " agent type.", "Step 1: Develop the application", "The specification is the same as in Practical 1 of the ", "Agent Practicals", " except that the part agent now maintains a beliefset that stores its current status. The implementation can be examined using the JDE; here we only consider the application's ", "main()", " method:", "In order to trace designs in the ", "paint_robot", " example, a new line has been added to the ", "Program.java", " file:", "Step 2: Starting the application", "To compile the application, select the ", "Compiler Utility", " window's", " ", "Compile Application", " tab", " and click the ", "Compile", " button", ".", "Once compiled, select the ", "Compiler Utility", " window's ", "Run Application", " tab", ". To enable the DTT, select the ", "Program.class", " file and in the ", "Java Args", " field", " ", " enter:", "This creates a DCI nameserver and portal named ", "Server", " on ", "localhost", " at port 9999.", "Figure 2-9: ", "JACK Compiler Utility", " ", "Run Application", " tab", "Click ", "Run", ". This starts the application, which will create the agents and then bring up the following dialog.", "Figure 2-10: ", "Start example", " dialog", "Before clicking ", "OK", " in the above dialog, the DTT needs to be connected to the application (step 3).", "Step 3: Connect the DTT to application", "Select the ", "Connect to Portal", " option", " from the ", "Trace", " menu", ". Enter ", "Server", " as the portal name and ", "9999", " as the Address.", "Figure 2-11: ", "Connect to Portal", " dialog", "The DTT ", "Tracing", " ", " window will now appear in the JDE. Details of the portal and existing agents will be displayed in this ", "Tracing", " window.", "Figure 2-12: ", "Tracing", " window", "Step 4: Configure design tracing", "This step describes how to configure tracing", " of all agents in the ", "Paint_requesting_capability", " design and tracing of the ", "robot23", " agent in the ", "Painting_capability", " design.", "Figure 2-13: ", "Trace settings in the ", "Design Tracing Configuration", " window", "Step 5: Start design tracing", "This step describes how to start tracing and how to step through tracing visualisation.", "Figure 2-14: ", "Start example", " dialog", "Figure 2-15: ", "Tracing the ", "paint_robot", " example", "Figure 2-16: ", "Relevant tasks of the ", "robot23", " traced design window", "This example demonstrates the use of the DTT with a simple design tracing configuration. Use of different DTT features will vary according to the application being traced and the intended viewers of the design tracing visualisation.", "The JACK Intelligent Agents\u00ae  ", "Plan Tracing Tool", " (Plan Tracing Tool)", " provides the ability to display and trace the execution of Graphical Plans and the events that handle them in JACK Intelligent Agents\u00ae  (JACK) applications.", "The Plan Tracing Tool is a graphical tool that displays agent behaviour by tracing executing tasks in a graphical environment.  Tasks consist of events and the plan instances that handle them. Each event that is traced", " within a task can be shown graphically, with nodes that are highlighted according to actions within the task. Each plan that is traced within a task can also be shown graphically, with individual nodes of reasoning methods highlighted to reflect the current actions and decision making processes expressed in the plan.", "At each stage of execution, the execution history of a task \u2013 including events and applicable plan instances \u2013 may be examined by the user. The Plan Tracing Tool displays the documentation, graph, variables and exceptions of traced events and plans. The context conditions of plans may also be viewed. Other details of traced events displayed by the tool are plan instances that are applicable to the event and plans that have failed to handle the event. The events handled by plans in the task, including applicable", " and failed plan", " instances, can also be examined.", "The user can control execution of individual agents with the ability to start, stop and step tracing of those agents.  This provides a powerful, visual way to interact with an executing agent system.", "Graphical plans in an application may be traced after creating them in the JACK\u0099  Graphical Plan Editor, generating JACK files with the ", "Generate traceable plans", " option and compiling the application. The Plan Tracing Tool will trace events in JACK applications with or without graphical plans.", "Only plans that are created in the Graphical Plan Editor can be graphically traced with the Plan Tracing Tool.  Textual plans created in the JACK Development Environment can also be traced, but without the detailed step-by-step interaction possible with graphical plans.", "JACK Teams\u0099  projects may be traced with the Plan Tracing Tool. However, the reasoning methods of team plans will be shown in code form.", "This chapter assumes that the user is familiar with the JACK\u0099  Development Environment (JDE),", " the JACK\u0099  Graphical Plan Editor (GPE)", " and JACK agents. If further information is required on these topics, refer to the ", "Development Environment Manual", ", the ", "Graphical Plan Editor Manual", " and the ", "Agent Manual", ".", " ", "In this document, we use a simple multi-currency Bank Account system as an example and as a source of figures.  It is available in the ", "examples/accounts", " directory of the JACK installation. The example is also accessible from the ", "Create Project from Example", " option", " of the JDE ", "Help", " menu.", "This section briefly describes the example application and then works through the mechanics of using the Plan Tracing Tool to investigate its operation.", "To follow the example, open the project file ", "accounts.prj", " in the JDE.", "The example application is a (small) part of a Banking application which maintains bank accounts in nominated currencies, and performs currency conversions to allow transactions against the accounts to occur in any currency.", "The example consists of a ", "BankAccount", " agent which maintains a table of bank accounts and performs transactions on those accounts, a ", "CurrencyExchange", " agent which maintains a table of currency exchange rates and uses it to convert amounts from one currency to another, and a ", "Communicator", " agent which acts as an interface.", "The ", "BankAccount", " agent maintains a table of bank accounts in an instance of ", "Account", " as described in the following table:", "Table 3-1: ", "Details stored about each bank account", "Accounts can be held in any currency, and apart from an integer account number and the owner's name, the only other attribute stored is the current balance.", "The ", "BankAccount", " agent receives messages creating accounts, enquiring about account attributes and transactions.", "Accounts are created with ", "CreateAccountRequest", " and are credited or debited with ", "CreditAccountRequest", " and ", "DebitAccountRequest", " messages.  Information requests are made with ", "AccountInfoRequest", " messages.", "Transactions can be in any currency, and the ", "BankAccount", " agent makes use of the services of a ", "CurrencyExchange", " agent to convert amounts from one currency to another.", "Accounts must maintain a non-negative balance, so withdrawals that exceed the current balance are not permitted.", "A transaction is performed in the currency of the account.  If the ", "CurrencyExchange", " agent cannot convert the transaction's currency to that of the account, the transaction is not permitted.", "The agent uses the ", "SendAndWaitPlan", " plan to send messages to the ", "CurrencyExchange", " agent, and wait for and collect the replies.", "When a transaction cannot be performed, the ", "BankAccount", " agent replies with a ", "RequestError", " message.", "The ", "CurrencyExchange", " agent maintains a table of currency exchange rates in an instance of ExchangeRate, as described in the following table:", "Table 3-2: ", "Details stored about the currency exchange rates", "The ", "CurrencyExchange", " agent receives messages setting exchange rates and asking for amounts in one currency to be converted to another.", "Exchange rates are set with ", "SetExchangeRate", " messages.  These are handled by ", "SetExchangeRatePlan", ".", "Currency conversions are performed in response to ", "ExchangeRequest", " messages.  These are handled by ", "ExchangePlan", ", which posts a ", "ComputeRate", " event to determine the appropriate exchange rate to use.", "The ", "CurrencyExchange", " agent has several plans to handle the ", "ComputeRate", " event.  They are listed below.", "Table 3-3: ", "Plans used to handle the ", "ComputeRate", " event", "The ", "Communicator", " agent is used to interface between Java code and the ", "BankAccount", " and ", "CurrencyExchange", " agents. It uses ", "SendAndWaitPlan", " to send messages to the other agents, and wait for and collect the replies.", "The ", "Accounts", " class has a main method that creates the three agent instances. The class then uses the ", "Communicator", " agent to send requests to the other two agents.  This is sufficient to explore the Plan Tracing Tool's functions.", "The Plan Tracing Tool works only with JACK projects created with the JACK Development Environment (JDE).  It is designed to be most useful with applications containing plans created graphically with the Graphical Plan Editor, but can also display, though not trace, the internal steps of textual reasoning methods created with text editors within the JDE. The tool graphically displays the execution of traced events ", "that are handled by both graphical and non-graphical plans, along with graphical  plans.", "A user therefore begins by developing the plans in an application with the Graphical Plan Editor tool within the JDE. JACK code is then generated with tracing support enabled and the application is compiled.", "When the program is compiled and ready to run, it can be run under the control of the Plan Tracing Tool from the ", "Compiler Utility", "'s ", "Run Application", " tab, or directly from a command prompt.", "The Plan Tracing Tool is a graphical tool that controls the execution of a JACK application and enables the user to view the execution steps taken and the values of variables computed within plans and events.", "Plan tracing is controlled by an ", "Agent Tracing Controller", " window.", "Figure 3-1: ", "The ", "Agent Tracing Controller", "With this window the user controls the execution of the agents in the traced JACK application.", "Each agent within an application runs several tasks at any one time. Traced instances of plans and the events they handle are shown in task windows corresponding to the task they are associated with.", "Figure 3-2: ", "A task window showing an instance of the ", "CreditAccountExchangePlan.convert", " reasoning method", "The previous figure illustrates the ", "convert", " reasoning method of ", "CreditAccountExchangePlan", ".  Execution is paused on the decision node, which is highlighted in blue to represent this. Previously executed nodes, and the links traversed to reach them, are shown in grey.", "The values of the reasoning method's parameters and variables, as well as variables of the ", "CreditAccountExchangePlan", " plan (marked with a \"", "+", "\"), can be seen in the ", "Variables", " section of the task window.  Their values are updated in the ", "Variables", " section as the plan is executed.", "The plan's documentation and conditions are also available in ", "task windows.", "The following figure illustrates the ", "CreateAccountRequest", " event. Execution is paused on the ", "Invoke Plan", " node, which is highlighted in blue to represent this. Nodes that have previously executed are shown in grey.", "Figure 3-3: ", "A task window showing the graph and plans of a ", "CreditAccountRequest", " event instance", "The graph of event execution is shown by default. Event documentation and variables are also shown in the task window.", "A list of applicable plan instances", " that are currently being considered for processing of an event is available in the task window. The list includes details of the plan type and plan variables. If one of these plan instances has been selected to handle the event and is executing in the task, it is highlighted. A list of applicable plans can be completely recomputed during event processing.", "The task window also contains a list of failed", " plans. These are plan instances that have been chosen to handle the event, but have failed to process the event successfully. Some event types do not have a list of failed plans, in which case the list in the task window remains empty.", "A new task window is created for each new task the agent begins as soon as the task enters a reasoning method or posts an event that is being traced.", "The Plan Tracing Tool determines which reasoning methods and events to trace either by tracing all of them (the default) or by reading a ", "Plan Tracing configuration file at startup.", "In this section we work through an example of compiling and running an application with tracing, to provide some immediate familiarity with using the Plan Tracing Tool.", "Start plan and event tracing with the following steps:", "The ", "Agent Tracing Controller", " window will appear, followed by a task window similar to that displayed in the the following figure.", "Figure 3-4: ", "A task window showing the conditions and graph of a ", "CreditAccountRequest", " event instance", "The ", "Tracing", " selection box at the top of the task window shows the traced reasoning methods and events active in the task.  There is only one event at this stage. The row of checkboxes below it can be used to select different information to be shown in the window.", "The task window currently displays the graph of event execution and the ", "Conditions", " section. To view the ", "Applicable", " and ", "Failed", " sections instead of the ", "Conditions", " section, click on the ", "Conditions", " checkbox to unselect it and select the ", "Applicable", " and ", "Failed", " checkboxes. A task window then appears that is similar to the following figure.", "Figure 3-5: ", "A task window showing the ", "CreditAccountRequest", " event with ", "Applicable", " and ", "Failed", " plans", "The ", "Applicable", " and ", "Failed", " sections will currently be empty, as the plans applicable to the event have not yet been examined.", "Click on the ", "Step", " button to go to the next step of execution. The ", "Invoke Plan", " node of the graph will be highlighted in blue, and an applicable plan will be highlighted in the ", "Applicable", " section, as shown in the following figure.", "Figure 3-6: ", "A task window showing the ", "CreditAccountRequest", " event", "Click on the ", "Step", " button to continue plan and event tracing until the fourth task window appears. The window will be similar to the following figure.", "Figure 3-7: ", "A task window showing an instance of the ", "CreditAccountPlan.body", " reasoning method", "In the ", "Graph", " display, the node that will be executed next is shown in blue.  In the previous figure, this is the ", "Start", " node of the reasoning method.", "Push the ", "Step", " button on the ", "Agent Tracing Controller", " to view the following figure.", "Figure 3-8: ", "A task window showing an instance of the ", "CreditAccountPlan.body", " reasoning method after a step has been taken under the control of the ", "Agent Tracing Controller", "This fourth task traced by the example is handled completely by the single plan.  Click the ", "Step", " button until it is completed.  The task window remains, but may now be hidden by a new task window displaying the body method of ", "CreditAccountExchangePlan", ".  If so, move this new window aside to find the previous one and close it.  Task windows remain on the screen after their tasks have completed until they are closed by the user.", "The new task window is displayed in the following figure.", "Figure 3-9: ", "A task window showing an instance of the ", "CreditAccountExchangePlan.body", " reasoning method", "Step this new window three times with the ", "Agent Tracing Controller", " to produce the next figure.", "Figure 3-10: ", "A task window showing an instance of the ", "CreditAccountExchangePlan.convert", " reasoning method", "Using the ", "Tracing", " selection box at the top of the window, examine the ", "body", " method and the ", "convert", " method. Both are running in the same task, with one executing in response to the subgraph node of the other.", "There are several other controls on the ", "Agent Tracing Controller", ".", "Pressing ", "Run", " will cause the agents to run freely, through all trace steps. Task windows are still created and updated as appropriate. The agents can be slowed down in this mode by setting a ", "Transition Delay", " ", "(in seconds) in the ", "Agent Tracing Controller", ".  Each affected agent running freely will then wait for this period at each place where it could have stopped if being stepped.", "The agents to be controlled during tracing can be chosen in the selection box above the row of ", "Stop", ", ", "Run", ", and ", "Step", " buttons.  In the state reached in the figure of the ", "body", " reasoning method of the ", "CreditAccountExchangePlan", " plan, the only choices will be ", "All Agents", ", or the ", "BankAccount", " agent \"anne\".  If other agents are being traced, they can be selected in this box too.", "To complete running the example, click ", "Run", ". After all task windows have appeared and stepped through the nodes in the reasoning methods and events shown, the system will stop.  You should have sixteen (16) task windows on the screen at this stage, five (5) for each of the ", "creditAccount", " calls in ", "Accounts.main", ". The remaining eleven (11) correspond to the handling of traced events, less the one you closed earlier.", "To finish the tracing run, close the ", "Agent Tracing Controller", ". The dialogue in the following figure will appear.  Choose ", "Exit", " to finish the run.", "Figure 3-11: ", "The ", "Exit Application", " dialogue", "Plans from more than one agent can be specified in the Plan Tracing configuration file", ". For example, use the ", "trace2.cfg", " file in the example to trace the ", "CurrencyExchange", " agent plans and events responsible for converting currencies.", "It is not necessary to use the JDE to run a traced program.  Provided that the JACK application has been compiled with tracing enabled as described in the previous sections, you can run the program under the control of the tracer with a command such as:", "Ensure that the Java ", "CLASSPATH", " is set appropriately to allow Java to find ", "jack.jar", " and the classes in the example.", "In the remainder of this chapter, we will cover the construction of Plan Tracing configuration files, and the options that adjust the runtime behaviour of the Plan Tracing Tool.", "Configuring the Plan Tracing Tool is a two-part process.  First, a Plan Tracing configuration file is created, either using the ", "Run Application", " tab of the ", "Compiler Utility", " in the JDE, or by hand with a text editor", ".  The desired runtime options are then set when the JACK application is run.", "A Plan Tracing configuration file is composed of lines identifying JACK agents, and the plans and events within them that are to be traced.", "Each line has three tokens separated by white space.  They are listed in order below:", "Table 3-4: ", "Contents of a line in the Plan Tracing configuration file", "For example, the ", "trace1.cfg", " file from the walkthrough earlier contains:", "Figure 3-12: ", "Example Plan Tracing configuration file", "This arranges for the tracing of the plans and events used by ", "ex.accounts.BankAccount", " agent types to process requests to deposit money into an account.", "When the ", "Select or Create...", " button on the ", "Run Application", " tab of the JDE's ", "Compiler Utility", " is pressed and the file selected does not already exist, the JDE will offer to create it.", "Plan Tracing configuration files created by the JDE enable tracing for all the plans and events within agents of the current project.  This is a useful way to generate an initial configuration file that can be edited to enable tracing on only some plans, events or agents.", "If the Plan Tracing Tool is run without a Plan Tracing configuration file, then all plans in all agents are traced.", "The behaviour of the Plan Tracing Tool can be further modified at runtime by a number of JACK options.  We've seen two earlier, when we ran the Plan Tracing Tool from the Unix or Windows command line:", "These options can also be set as ", "Java Args", " in the ", "Run Application", " tab of the JDE's ", "Compiler Utility", ".", "In this section, we describe the runtime options.", "If set to ", "true", ", this option turns on the Plan Tracing Tool at runtime. This option ", "must", " be set in order to run plan tracing.", "It is set automatically if the ", "Trace Graphical Plans", " box in the ", "Run Application", " tab of the ", "Compiler Utility", " is ticked, but can also be set manually to run an application with the Plan Tracing Tool from the command line.", "This option is used to select a Plan Tracing configuration file to determine which agents, plans and events are traced by the Plan Tracing Tool.", "If set to ", "true", ", the current task window is always brought to the front of all windows whenever any node in a graph it shows is traced.", "This option is ", "false", " by default.", "If set to ", "true", ", and a task window is minimised, this option will always restore the window when any node in a graph it shows is traced.", "This option is ", "true", " by default.", "If set to ", "true", ", whenever a new agent is created, the Plan Tracing Tool is put in to ", "Run", " mode as soon as tracing begins.", "If set to ", "false", ", agents are stopped when traced until ", "Stepped", " or ", "Run", " from the ", "Agent Tracing Controller", ".", "The ", "New Agents Trace in 'Run' Mode on Creation", " checkbox on the ", "Agent Tracing Controller", " can be used to set this property to ", "true", " for new agents.", "This option is ", "false", " by default.", "If set to ", "true", ", shows the zoom combo box in task windows.", "This control offers fixed percentage scaling values for the currently traced graph, with similar effect to the zoom slider below.", "This option is ", "false", " by default.", "If set to ", "true", ", shows the zoom slider in task windows.", "The slider can be adjusted to enlarge or shrink the currently traced graph.", "Figure 3-13: ", "The zoom slider of a task window", "This option is ", "true", " by default.", "If set to ", "true", ", shows tick marks on the zoom slider in task windows.", "This option is ", "true", " by default.", "If set to ", "false", ", ignores reasoning methods that are non graphical.", "This option is ", "true", " by default.", "If set to ", "true", " this option, lists all the facts in ", "BeliefSet", "s displayed in the ", "Variables", " section of the task window.", "If set to ", "false", ", it lists only the number of facts in ", "BeliefSet", "s displayed in the ", "Variables", " section of the task window.", "This option is ", "false", " by default.", "If set to ", "false", ", the Plan Tracing Tool displays reasoning method nodes in their Code form.", "If set to ", "true", ", the Plan Tracing Tool displays reasoning method nodes in Descriptive Mode.", "This option is ", "false", " by default.", "Inter-agent communication is a difficult aspect of programming to test and debug. When monitoring a system, it is often not sufficient to trace the internal behaviour of each agent -- in order to determine exactly what is going on, it may become necessary to monitor communication between each agent and the timing of their respective messages. The Agent Interaction Diagram is provided to facilitate these activities.", "Enabling the Agent Interaction Diagram", " in an application allows messages sent and received by each agent in the application (and those in other applications that register with the Interaction Diagram) to be viewed. The Agent Interaction Diagram is a useful tool both for analysing and debugging communication between agents. It has also proven to be invaluable when analysing and developing agent systems with a high volume of inter-agent messaging, especially when a relationship exists between message order and agent behaviour.", "Having enabled the Agent Interaction Diagram, one can optionally configure the Diagram.", "To enable an interaction diagram, we specify which processes are contributing to the interaction diagram, the type of interaction diagram associated with each process and optionally a JACOB file for performing interaction diagram configuration. In a multi-process application, processes can be declared to share a single diagram.", "Enabling of an interaction diagram is achieved through properties which can be specified on the command line or in a properties file (one per process).", "Table 4-1: ", "Properties for enabling an interaction diagram", "To make the Agent Interaction Diagram easier to understand a ", "message", " member is available in the ", "MessageEvent", " and ", "BDIMessageEvent", " classes. It takes the form;", "The ", "message", " member is accessible with the ", "getMessage", " method. The base implementation of this method returns a member or an empty ", "String", " if the member is null. The method takes the form:", "When writing posting methods for message events, a descriptive statement should be assigned to this member. This text will then appear in the Agent Interaction Diagram, allowing easy identification of the message that has been sent.", "Below we summarise the steps involved in the creation of an interaction diagram called ", "blue_poles", " for both single process and multiple process applications.", "Configuration is concerned with the look and content of the actual interaction diagram. This (optional) configuration can be achieved using either a properties file (typically the file used for enabling the interaction diagram for the process hosting the interaction diagram) or a JACOB configuration file (specified by the ", "jack.tracing.idisplay.control", " property for the process hosting the interaction diagram). If configuration details are provided for a process using both methods, the configuration details in the properties file are ignored.", "The following properties can be used to configure the look and content of an interaction diagram:", "Table 4-2: ", "Properties to configure the appearance of an interaction diagram", "If the property ", "jack.tracing.idisplay.control", " specifies a JACOB file which uses objects from the dictionary ", "aos/jack/gui/idnew/control.api", ", this file is used for interaction display configuration. This dictionary defines three types of objects, each of which controls a different aspect of the interaction diagram.", "a. The ", "InteractionDisplayTuning", " Object", "The configuration file should contain a single instance of this type. Notice that most of the fields have the same names as system properties in the table above, since they perform the same functions.", "The fields of the ", "InteractionDisplayTuning", " object are detailed below.", "Table 4-3: ", "The fields of the ", "InteractionDisplayTuning", " object", "b. The ", "AgentDisplay", " Object", "This object stores configuration information that applies to a single agent's display in the interaction diagram. As many of these objects as required can be included in the ", "agents", " field of the ", "InteractionDisplayTuning", " object. The fields are detailed below.", "Table 4-4: ", "The fields of the ", "AgentDisplay", " object", "The three fields that specify colours (", "nameBackgroundColour", ", ", "nameTextColour", " and ", "lineColour", ") can take either comma-separated RGB values (with a range of 0-255 for each element) or the names of constant colours defined in the ", "java.awt.Color", " class, specifically:", "c. The ", "MessageDisplay", " Object", "This object stores configuration information that applies to the display of individual messages in the interaction diagram. As many of these objects as required can be included in the ", "agents", " field of the ", "InteractionDisplayTuning", " object. The fields are detailed below.", "Table 4-5: ", "The fields of the ", "MessageDisplay", " object", "To create and edit a configuration file using the JACOB graphical editor, follow these steps:", "The programmer can trace the activity of JACK entities by setting the ", "jack.run.debug.options", " property on the command line. For example:", "activates both tracing of messages and events. As this example illustrates, more than one mode of tracing can be activated by supplying a list separated by colons (", "\":\"", "). A list of the more commonly used trace modes is given below:", "Table 5-1: ", "JACK trace modes", "Use of the debugging flags results in the details of the execution being logged to the standard error. The debugging flags are often used together with redirector properties. For example,", "would redirect (the messages produced from the ", "jack.run.debug.options", " property from) standard error to file ", "outputFile1", ", from output to file ", "outputFile2", " and redirect standard input to file ", "inputFile", ".", "Generic debugging", " of a JACK\u0099  (JACK) application (also known as Agent Debugging", ") is performed using JACOB\u0099  (JACOB) objects that implement the ", "AgentDebuggerCommand", " interface. This generic debugging tool is a simple and extensible remote agent debugger. It accepts connections on the ", "jack.debugger.port", " and then creates a thread that reads JACOB debug objects from it and casts them to the ", "AgentDebuggerCommand", " type. The debugger then calls the ", "process", " method", " in the debug object.", "Debugging capabilities are specified with debug objects, which are defined with JACOB ", "dictionary files. The default debugging capability is defined with the ", "DumpState", " object which is currently the only supported debug object. See the ", "Debug objects", " section of this chapter for information on the ", "DumpState", " object. The debugging capabilities of the tool are extended by defining new debug objects. This process is described in the ", "User defined debug objects", " section of this manual.", "The ", "AgentDebuggerCommand", " interface is controlled with two Java properties:", "This chapter assumes that the user is familiar with JACK agents and JACOB. If further information is required on these topics, refer to the ", "Agent Manual", " and the ", "JACOB Manual", " .", "To use generic debugging the JACK kernel ", "must listen for a connection on a portal. The user then connects to the portal using telnet and can enter commands (debug object class names) which will result in the kernel logging information about the agents. Commands are entered on the telnet command line.", "To start generic debugging the user sets the following properties on the command line:", "It is possible to extend generic debugging capabilities with additional commands entered by the user. Additional commands are entered with:", "This establishes a thread that accepts connections from the specified port. Once a connection is established a thread reads JACOB objects off the socket  and invokes the ", "process", " method of the ", "AgentDebuggerCommand", " interface. The user can then telnet to the nominated port and type debugging commands to dump the state of agents in the application.", "The initial debugging command available is ", "DumpState", " and it can be used at the telnet command line as follows:", "This command will print a JACOB object that describes the agent ", "myAgent", " to the standard error of the process. If the code ", ":agent myAgent", " is omitted, it will dump the state of all agents. If the code ", ":stderr :true", " is omitted, any output will go to the socket instead of the standard error.", "The ", "AgentDebuggerCommand", " interface", " has one method, ", "process", ".", "The ", "process", " method is called on debug objects that are read by the thread established by the debugger. The method passes in the streams ", "java.net.Socket", ", ", "aos.apib.inStream", ", and ", "aos.apib.OutStream", " to allow the client object to perform further communications with the client.", "Debug objects are defined with JACOB. They implement the ", "AgentDebuggerCommand", " interface and override the ", "process", " method. The objects allow the debugging tool to be extended to examine different attributes of an executing JACK process.", "This debug message is included in all JACK applications. It is used to dump the state of a running JACK process. The ", "DumpState", " object has two fields:", "The user can define debug objects", " by using JACOB to implementing the ", "process", " method of the ", "AgentDebuggerCommand", " interface. For example, if you wanted to define a message to determine how much memory a JACK process was using you could do so by creating a dictionary file", ", in this case named ", "MyDebugMessages.api", " with the following contents:", "To run a JACK application with ", "debugging:", "Alternatively, use the above Java properties when running the application from the JACK Development Environment.", "A message similar to the following will be displayed:", "A number of properties are provided for customisation of the runtime behaviour of JACK tools and applications. Developers are of course free to provide their own application specific properties if required.", "This appendix lists the effect of usage, possible values and default setting of each publicly available JACK property. The properties are listed under the tools that they customise.", "Several JACK properties are accessible from the JDE ", "Preferences", " window. Refer to the ", "Development Environment Manual", " for instructions on how to set these properties. JACK properties can also be used when running a JACK application. In this case, the property name must be preceded by a ", "-D", " and entered either on the command line or in the ", "Java Args", " field in the ", "Run Application", " tab of the of the JDE ", "Compiler Utility", ".", "The following is an example of modifying the behaviour of the Plan Tracing Tool with the JACK property ", "jack.plan.tracing.descriptivemode", ". When this option is set to ", "true", " plan tracing is shown in descriptive mode when a traced application starts. To run an application with this property activated from the command line use:", "Table A-1:", " JACK Compiler Properties", "Table A-2:", " JACK Runtime Environment Properties", "Table A-3:", " Debugging Properties", "Table A-4:", " Design Tracing Tool Properties", "Table A-5:", " Interaction Diagram Properties", "The following properties can be used to alter the default behaviour of the Plan Tracing Tool. To use these properties, the Plan Tracing Tool must first be enabled in the JDE or by setting the ", "jack.plan.tracing.enabled", " property to ", "true", ".", "Table A-6:", " Plan Tracing Tool Properties", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Copyright \u00a9  2002-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "The", " ", "JACK Design Tool\u0099 ", " ", "(Design Tool)", " enables design and planning of JACK\u0099  (JACK) applications to occur within a convenient, icon-based environment. By providing a visual representation of the various links between components in any given design, a clear representation of the overall design structure can be obtained.", "The Design Tool is a graphical mechanism used to design agent and teams systems, while simultaneously populating the JACK Development Environment (JDE) project directory with design skeletons that can be built upon and developed further at any given point in time.", "Design elements (such as agents, events and plans) can be dragged from the JDE browser window or the palette to the canvas", ", at which point any links can be made that declare relationships between the design elements.", "At all times the link between structural elements on the canvas and in the browser is consistent, and the two representations are continually and automatically updated.", "Changes on the canvas are visible immediately in the JDE browser", ". Changes are highlighted in red in the JDE browser until saved, at which point their text turns to black. Likewise, changes in the JDE browser are immediately represented on the canvas.", "The Design Tool can be used in either Agent mode", " or Teams mode.", "There are several advantages of using the Design Tool. Benefits include the ease with which the user can build and develop designs with familiar 'drag-and-drop' and mouse-controlled design techniques.", "The Design Tool also reduces the difficulty of visualising and understanding the often complex nature of agent and teams design.", "Graphical representation of a design, such as that provided by the Design Tool, offers the following benefits:", "The JDE", " is a graphical environment for the development, execution and maintenance of JACK software. It provides the user with access to a number of tools which facilitate the process, namely:", "The focus of this manual is the Design Tool; the reader is referred to the ", "Development Environment Manual", " and other specific manuals for details about JACK tools.", "Access to the Design Tool is normally via the JDE browser. A project is first opened or created within the JDE (refer to the ", "Development Environment Manual", " for details). This creates a JDE browser window within the JDE window. The user can then create new designs or access existing designs from the ", "Design Views", " folder in the JDE browser.", "The purpose of the Design Tool is to enable designs to be created, modified, viewed and deleted using an intuitive graphical user interface (GUI). To use the Design Tool effectively, the user must be familiar with both the structure of a design and the structure of the Design Tool.", "The Design Tool is accessed through the ", "Design Views", " folder", ", located in the JDE project window", ". It is useful to be familiar with the JDE in order to use the Design Tool effectively. For further information on the JDE, refer to other sections within the ", "Development Environment Manual", ".", "Figure 1-1: ", "Project window (left), tool bar (top right) and canvas (bottom right)", "The JDE project window", " consists of the ", "Design Views", " folder, the", " ", "Agent Model", ", the ", "Data Model", ", and the ", "Other Files", " ", "folder. The ", "Design Views", " folder contains all of the design views ", "that belong to a project.", "Expanding the ", "Design Views", " folder, by double-clicking on the ", "Design Views", " folder", " icon or label, results in the individual design views stored within becoming visible.", "To open a design view stored within the ", "Design Views", " folder, double-click on either the ", "Design Views", " label or its associated icon. A canvas", " will appear in the JDE browser. The design view can then be modified as required.", "Figure 1-2: ", "Tool bar and canvas of a stored design", "Tool features used extensively throughout the Design Tool include the following:", "Figure 1-3: ", "Moving the mouse pointer over a button elicits tool tips", "The screen snapshots in this manual were created on a Macintosh running Apple's Mac OS X operating system. On another platform, the Design Tool", " will look slightly different, but these differences are only cosmetic, and will not affect the performance of the Design Tool in any way. In some cases, menu options may be found in different locations.", "There are also some differences in operating system-specific conventions regarding mouse buttons and modifier keys. These are listed and explained below.", "Unix ", "systems typically have a three button mouse, Windows systems have a two button mouse, and Macintosh systems have a single button mouse.", "In the JDE and Design Tool, the left and right mouse buttons function in the same way on Unix and Windows systems. The middle button is unassigned, and not used for any purpose.", "To access the functions of the right mouse button on a Macintosh system, hold down the ", "CTRL", " key while pressing the mouse button (unless a third-party two button mouse is available allowing the use of the right button as required).", "Generally, where a ", "CTRL", " key is used in Windows and Unix, the ", "COMMAND", " key is used on the Macintosh. For example, on Windows you use the ", "CTRL", " key to make multiple selections. On the Macintosh you would use the ", "COMMAND", " key. The ", "SHIFT", " key performs the same function on all three platforms.", "A design", " consists of components such as ", "agents, teams", ", events", " and capabilities", ". Components can be dragged and dropped from the Agent ", " or Teams mode ", "Design Palette", " onto the canvas, and moved into position. From this point, ", "links (relationships) between components can be created as a design is assembled.", "There are two main types of components:", " agent components and teams components. The components of an agent design are: ", "agent, capability, event, plan and beliefset. The components of a teams design comprise the components of an agent design, plus the three components specific to teams design, namely:", " team, role and teamplan.", "Commonly used design diagrams can illustrate:", "Components", " available on the ", "Design Palette", " in Agent mode are the five standard agent components: ", "Agent", ", ", "Event", ", ", "Capability", ", ", "Plan", " and ", "Beliefset", ". ", "A ", "Note", " option is also available, with which the user can make brief notes that can be attached to any selected component.", "Agent mode", " is the default; the Design Tool automatically opens into Agent mode when the JDE is opened for the first time. However, should a project be saved and closed while in Teams mode", ", the Design Tool will keep the Teams mode setting. The next time that the Design Tool is opened, it will open in Teams mode. The Design Tool is also capable of detecting whether an imported design is an Agent or Teams design", ", and of opening in the appropriate mode.", "Where Agent mode", " provides the ability to design systems with agent features, Teams mode provides the option of designing systems with teams features.", "The drop-down ", "View", " menu provides the Teams mode option for the JDE. Clicking on the Teams mode option toggles the JDE between Agent mode and Teams mode.", "Teams mode can also be toggled with the ", "Teams Mode On/Off", " button on the JDE tool bar.", "Components available to the user when the ", "Design Palette", " is in Teams mode are ", "Team", ", ", "Role", " and ", "Team Plan", ", as well as the five agent components and the ", "Note", " option.", "Links are", " the relationships between components. It is the links between components that transform a collection of components on the canvas into a design. A link is represented by a line arrow between two components, and can be edited by double-clicking on the link when in Selection mode", ".", "Figure 2-1: ", "A link which represents that the agent type can post an event of type 'event'", "Link points", " are the enlarged points around the perimeter of a component which appear when the mouse pointer moves over a component while the Design Tool is in Link mode", ". Links connect components by their link points.", "Figure 2-2: ", "Link points visible on a plan", "Link mode is discussed later in this document.", "Two types of links exist between components:", "A JDE project can have multiple design diagrams.  A large and complex design is better served broken up into smaller design elements, with each design diagram showing certain aspects of the overall design.  Each design diagram is shown in a separate window, allowing multiple diagrams to be compared and discussed simultaneously.", "The following is a list of specific structural elements available within the Design Tool.", "At the", " top of the Design Tool window is the control bar. On the control bar, from left to right, are the ", "Documentation", " checkbox", ", the ", "Design Graph", " checkbox, the ", "Export design diagrams", " button and the ", "Print design diagrams", " button.", "Figure 3-1: ", "Control bar", "The ", "Documentation", " checkbox", " opens a ", "Documentation", " textbox in which more detailed comments about the diagram can be entered and stored. When the ", "Documentation", " checkbox is checked, documentation relevant to each diagram is immediately visible without intruding pop-ups, or the user needing to change windows. Unchecking the checkbox removes the ", "Documentation", " textbox from view.", "Documentation can be saved or updated by saving the associated project. To make the ", "Documentation", " textbox disappear, simply uncheck the ", "Documentation", " checkbox above the tool bar.", "Ticking", " the ", "Design Graph", " checkbox opens the canvas design. The ", "Design Graph", " checkbox provides a means by which a diagram can be closed from view while documentation is being added in the ", "Documentation", " textbox", " (opened, as explained above, by clicking the ", "Documentation", " checkbox).", "Clicking on the ", "Export design diagrams", " button", " on the tool bar exports any design in the current project. When the ", "Export design diagrams", " button is clicked, an ", "Export Design Diagrams", " window pops up, enabling the user to select which designs and which attributes of the designs will be exported.", "Within the ", "Export Design Diagrams", " pop-up dialog box, there are options for exporting the following design diagram features:", "The dialog box also contains text fields for entering the width and height of the exported design.", "Figure 3-2: ", "Exporting Design Diagrams", " window", "Clicking on the ", "Print design diagrams", " button", " on the tool bar prints any design. When the button is clicked, a ", "Print Design Diagrams", " window pops up, enabling the user to select which, and how many, designs to print.", "It is important to note that any or all designs can be selected for printing in the same print run via the selection options on the right of the pop-up options window.", "Within the ", "Print Design Diagrams", " pop-up dialog box, there are options for printing the following design diagram features:", "Figure 3-3: ", "Printing Design Diagrams", " window", "Directly ", "beneath the control bar", " is the tool bar. On the tool bar are several buttons providing various functions, plus the zoom slider", ". It is with these functions that the Design Tool is used, and designs are created and modified.", "The tool bar can be considered the 'control centre' of the Design Tool. The functions available on the tool bar, from left to right, are:", "Figure 3-4: ", "Tool bar", "Selection ", "mode is one of two modes in which the user can edit designs.", "To enter Selection mode, click on the ", "Selection mode button on the tool bar. The Design Tool is in Selection mode when the Selection mode button is indented.", "Selection mode enables the user to move components around on the canvas, and to highlight design components for editing or deletion. Clicking on design elements highlights them in blue. Any changes in the canvas result in the JDE browser being automatically updated and highlighted in red text.", "Link mode", " is one of two modes in which the user can edit designs.", "To enter Link mode, click on the Link mode button on the tool bar. The Design Tool is in Link mode when the Link mode button is indented.", "While in Link mode, links between the various components in a given design can be created, edited and deleted. Changes will be highlighted in the JDE browser. Changes do not revert to the default black text colour in the JDE browser until they have been saved or discarded.", "Moving the mouse over a component in the canvas while in Link mode will cause the selected component to be highlighted in red. A series of link points on the perimeter of the component will become visible. Fixed links are made to and from these points, and floating links can be created from anywhere within a component.", "The ", "Remove selected objects from diagram", " button (Remove button)", " can be used to either remove a component (e.g. an agent, event etc.) from a design, or remove the link between two components. To remove a component or link, left-click on the selected design element on the canvas while in Selection mode. The Remove button will become enabled, and the component or link to be deleted will become highlighted.", "Once the component to be deleted is highlighted, click on the Remove button. The selected component or link will be deleted from the design. In the case of links, a prompt will appear asking the user to confirm that they wish to remove the link. This is because removing a link from a design also deletes the link from the underlying model. No such prompt appears when deleting a component, as the component is only deleted from the design, not from the underlying model.", "The Open Design Palette", " button opens a palette from which a selection of components can be dragged onto the canvas. Links between components can then be created and edited, as the design is assembled.", "If the palette is opened while the Design Tool is in Agent mode", ", the ", "Design Palette", " will be opened in Agent mode. However, if the Design Tool is in Teams mode ", ", the ", "Design Palette", " palette", " will be opened in Teams mode.", "The palettes provide access to the component types that make up a design. They provide a base from which components can be dragged and dropped onto the canvas.", "The palettes are accessed via the tool bar", ". They are opened by left-clicking on the Open Design Palette button", ". The components available on the ", "Design Palette", " can then be dragged and dropped onto the canvas using the mouse.", "New components can be added to a design on the canvas with the palette. However, to link existing components in the design diagram, previously created entities can be dragged from the JDE browser on to the canvas.", "The ", "Design Palette", " can also be accessed via the JDE menu bar at the top of the JDE window. To access the palettes in this manner, click on the ", "Window", " menu", ", then click the ", "Design Palette", " option", ".", "When in Agent mode, the ", "Design Palette", " ", "provides the five standard components of agent design, plus the ", "Note", " option. The five standard components of agent design are ", "Agent", ", ", "Capability", ", ", "Event", ", ", "Plan", " and ", "Beliefset", ".", "Figure 3-5: ", "Design Palette", " in Agent mode", "When in Teams mode, the ", "Design Palette", " is accessed by selecting the ", "Design Palette", " option ", "from the ", "Window", " menu", ".", "Figure 3-6: ", "Design Palette", " in Teams mode", "When in Teams mode, the ", "Design Palette", " provides Teams mode components that can be dragged and dropped from the ", "Design Palette", " onto the canvas.", "The zoom slider", " enables the user to increase or decrease the size of the design display within the Design Tool window. Various parts of a design can be focused upon using a combination of the zoom slider and the scroll bars to the right side and at the base of the canvas.", "Figure 3-7: ", "Zoom slider", "The", " ", "Filter components shown", " option enables the user to hide various components in any given design, providing a clearer view of the relationships between elements.", "Boxes that are checked in the filter components option window relate to components that are visible in the relevant design. To filter a component, rendering it invisible, simply uncheck the relevant checkbox.", "When a component is filtered from a design, the links relating it to other components within that same design are also filtered, as are any indirect links to that component.", "Components are filtered according to their type. For example, event components can be filtered out by ensuring that the ", "Event Types", " checkbox is unchecked. Note that more than one type of component can be filtered out simultaneously.", "Figure 3-8: ", "Filter Components", " dialog (Teams mode)", "Clicking the ", "Filter components shown", " checkbox", " opens a dialog for a series of filter options. The user can choose to filter various component forms from the current design by clicking the relevant checkboxes associated with each component type.", "The ", "Show indirect links", " option", " enables the user to see more clearly the relationship between components that are indirectly, rather than directly, linked.", "Figure 3-9: ", "Indirect Links", " options", "When the ", "Show indirect links", " button", " is pressed, a pop-up options window will appear. It provides a checkbox option to show indirect links, and a textbox to enter the number of filtered nodes between links. By altering the number of filtered nodes between indirect links, relationships of different proximity levels can be shown as required.", "The ", "Show indirect links", " function provides a means by which the user can clarify the relationship between components that are not directly linked, yet still share a relationship. A dotted link line appears on-screen, providing a means by which the relationship between indirectly linked components can be more readily identified.", "The ", "Show indirect links", " option is useful when used in combination with", " the ", "Filter components shown", " option. Together they provide a powerful means of isolating and recognising indirect relationships within the overall context of any given design.", "To use the indirect links option:", "The next step in hiding indirect links is to filter the component types that the user does not wish to view. To filter the components that will become hidden:", "Figure 3-10: ", "Direct (left) and indirect (right) links", "Descriptive mode enables the user to view documentation that is associated with any element on-screen within the context of a design.", "The user can toggle between non-Descriptive mode (the default) and Descriptive mode by clicking on the Descriptive mode button in the Design Tool tool bar.", "If an element does not have documentation associated with it, Descriptive mode will behave the same as non-Descriptive mode for that element. As in the non-Descriptive mode, only the name of the element will be shown.", "The canvas provides", " a working area in which graphical representation of the different design structure components can be created, modified, moved around and deleted.", "Figure 3-11: ", "Design Tool canvas", "Links between the individual components can be built and modified on the canvas. These are graphically represented by line arrows between the different components. Links between components are created on the canvas.", "This section contains instructions for creating, opening, importing, editing and saving designs. See the ", "Development Environment Manual", " for instructions on:", "A design", " will typically consist of many design diagrams, all of which illustrate different perspectives. In this way, a project is built systematically and different perspectives of the total design can be isolated.", "Design diagrams", " are stored in the ", "Design Views", " folder and its sub-folders. Sub-folders can be added to the ", "Design Views", " folder by right-clicking on the folder and selecting the ", "Add Nested Container", " option", ". It is also possible to change the name of the folder by selecting the ", "Edit Label", " option", " from this menu. The other options in the ", "Design Views", " folder menu are discussed in the following sections which illustrate how to create a design using the Design Tool.", "Creating, editing", " and deleting components can be done at any stage of the design development process. Documentation can also be added, edited or deleted at any point during the creation of a design. The ", "Design Views", " folder can be found near the top of the JDE project window.", "To add", " a new design view:", "Figure 4-1: ", "Add new design view", "To open an existing design:", "The ", "Import Design View", " option enables the user to import a design view that exists in another project. In other words, it enables the user to reuse a single design view within the context of one or more projects.", "To import an existing design view using the ", "Import Design View", " option:", "To edit ", "an existing design view:", "Changes to a design are saved when a project is saved in the JDE. See the ", "Development Environment Manual", " for further information.", "Design Tool and Font preferences are accessed by selecting the ", "Preferences", " option in the JDE ", "Tools", " menu.", "The ", "Preferences", " window", " in the JDE has a ", "Design Tool", " tab. This allows the user to alter the ", "Preferences", " associated with the Design Tool.", "To select an option, simply click on the textbox associated with the desired option. The options available within the ", "Design Tool", " tab are as follows:", "When this option is checked, the design bar is visible on all design windows within the Design Tool, enabling all ", "tool bar functionalities to be within easy reach of the user. However, if this option is selected it will not apply to designs that are already open.", "When this option is checked, the name labels on each of the icons on the design bar and palette are visible. However, this does not apply to designs that are currently open.", "This option will", " enable a pop-up window confirming the user's wish to delete links in a design before the deletion command is carried out.", "This option ", "enables the tick marks on the zoom slider to be viewed. However, depending upon the degree of magnification of a given design, tick marks may not be helpful, and can be removed from view with this option to provide a cleaner view.", "This option is not applied to designs that are already open in the JDE.", "The zoom slider can be", " made visible, or can be hidden from view by toggling this option on or off. This option is not applied to designs that are already open in the JDE.", "This option displays", " a drop down list of magnification percentage options to the left of the Descriptive mode button", " in the tool palette. It should be noted that when this option is selected it is not applied to Design Tool windows that are already open.", "When this option is ", "checked, the design tool will always open with the design initially in Descriptive mode.", "This option creates Selection mode", " as a default rather than as a option of equal value with Link mode, so that after drawing a link the Design Tool returns to Selection mode, ready to enable the next link to be selected.", "When selected this option enables the user to use a text editor(default or external)", " to edit the text in note nodes rather than a simple node editing dialog window.", "This option displays the first sentence of non-note node documentation within a node when descriptive mode ", "is on.", "This ", "option ensures that when descriptive mode", " is on that the node is resized and node text is reformatted to display all node documentation (or the first sentence if the previous option is selected).", "This option enables the user to set the number of characters shown in a node when descriptive mode is used.", "The", " ", "Preferences", " option in the ", "Tools", " menu of the JDE has a ", "Fonts", " tab with the options listed below. Two options are given in this tab to change the font of node and link text in design diagrams. Note that when the options are changed and applied, Design Tool windows that are already open will need to be closed and then reopened for the changes to take effect.", "Each preference has an ", "Edit", " button, which opens a ", "Font Chooser", " window. The ", "Font Chooser", " window contains a list of fonts available on system being used, and from this list the ", "Family", ", ", "Typeface", " and ", "Size", " of the font can be chosen.", "The two options relevant to design diagrams are:", "In any given ", "project, components can be loaded, created, modified and deleted. The way in which components are manipulated is a key factor in determining the layout of any given design.", "When the Design Tool is in Selection mode, right clicking on a component opens a context menu", " with options for editing or removing the component.", "The context menu options available for nodes are:", "Components that ", "have already been created can be dragged from the JDE browser and dropped onto the canvas, rather than being recreated with the palette.", "To create a new ", "component and define its relationship to the rest of a design, click on the palette button on the tool bar (or type ", "SHIFT-CTRL-D", "). This will open the palette, with a selection of component types (Agent, Capability, Event etc.). Drag the required component on to the work area. As the component is being dragged, it will remain blue.", "Once the component is dropped onto the Design Tool canvas by releasing the left mouse button, a dialog box will pop up. The component can now be named, its package can be defined, and any relevant documentation can be added. The component will also be added to the browser window.", "To edit the ", "attributes of a component in the Design Tool, double-click with the left mouse button (or use the ", "Edit...", " option of the context menu) on the relevant component. A dialog box will open that enables the name, package and documentation of the component to be edited.", "Internal details of a component are edited in the JDE browser or by editing the component as a JACK file.", "Editing a component ", "in one view results in those changes being carried over into all views. For example, should a component be renamed in one view, all references to that component will be renamed. Any links that are removed will result in the appropriate changes being made within the JDE browser and to any relevant design views.", "To remove a ", "component from a design view:", "Alternatively, when in Selection mode use the ", "Remove from Diagram", " context menu option.", "To remove a component from a project:", "Links", " define the relationships between the different components in a design.", "Right clicking on a link opens a context menu", " with options for editing or removing the link.", "The context menu options available for links are:", "To create", " a link between two components:", "If the user has made an error in establishing the nature of the link between the two components, the link flow direction can be reversed by double-clicking on the link while in Link mode. A pop-up box will appear, and the link can be edited as required. Alternatively, the incorrect link can be deleted using the ", "Remove selected objects from diagram", " button. A new correct link can then be created in its place.", "To edit", " a link between two components:", "To edit the ", "attributes of a link between two components in the Design Tool, double-click with the left mouse button (or use the ", "Edit Link...", " option of the context menu) on the relevant link. A dialog box will open that enables the reference label of the link to be changed.", "To remove a ", "link between two components:", "Alternatively, right click on the relevant link and select the ", "Remove Link...", " context menu option.", "Moving design ", "elements on the Design Tool canvas is sometimes necessary to improve the layout of the design diagram.", "To move a component or link on the Design Tool canvas:", "When a design ", "element is moved, the floating link between two components moves to a more practical position automatically. This happens in any instance where one or both of the components is moved on the Design Tool canvas in such a way that the graphical link becomes awkwardly represented, but only in cases where the link between the components is a floating rather than a fixed link.", "When a link is created", " in the Design Tool, associated text describing the type of the link is automatically generated on the Design Tool canvas. To move text about on the Design Tool canvas:", "Components and links", " can be renamed in the Design Tool. See the sections on editing components and links for further information.", "Notes provide", " the facility of concise and convenient on-screen documentation.", "Figure 6-1: ", "Note", " icon", "When the Design Tool is in Selection mode, right clicking on a note opens a context menu", " with options for editing or removing the note.", "The context menu options available for nodes are:", "To add a ", "Note", " to a design:", "Notes can be associated with design elements. This is achieved by creating a link from the ", "Note", " to the element. Note that the link does not have an arrow showing an implied direction. The link between ", "Note", " and design element will be illustrated within the design tool as a line between the two.", "To edit the ", "text of a ", "Note", " in a diagram, double-click with the left mouse button (or use the ", "Edit...", " option of the context menu) on the relevant ", "Note", ". A dialog box will open that enables the ", "Note", " text to be edited.", "To remove a ", "Note", " from a design:", "Alternatively, when in Selection mode use the ", "Remove from Diagram", " context menu option.", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "Copyright \u00a9  2001-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "The ", "JACK\u0099 ", " ", "Development Environment (JDE)", " is a cross-platform graphical editor suite written entirely in Java for developing JACK\u0099  agent and team based applications. Extensive use of drag-and-drop and context-sensitive menus assist the construction of agents. The JDE allows the definition of projects, aggregate agents and teams, and their component parts under these projects.", "The JDE is a purpose-built toolkit that facilitates the construction of agent/team models. In many situations an application will consist of a single model. However, the JDE also supports the co-operative development of the models required for an application. It also supports the reuse of model components and in the case of co-operative development, the sharing of components.", "Figure 1-1: ", "JDE ", "This", " manual is designed to complement the ", "Agent Manual", ". It is assumed that the reader has an understanding of agent programming using the JACK framework.", "Integral features of the JDE include the ", "Design Tool", ", the ", "Graphical Plan Editor", " and the ", "Plan Tracing Tool", ", all accessible from within the JDE browser", " and tool bar", ". These features each have their own individual documentation in which they are more fully detailed. This documentation is available as part of the complete ", "JACK\u0099 ", " ", "Intelligent Agents", " (JACK) package.", "There are two common ways to invoke the JDE:", "On Unix ", "platforms, running the default configuration is achieved by running the script, ", "JACK_Developer", ". This is found in the directory in which the JDE has been installed. On Unix, the script can also be run with the name of a project file e.g. ", "JACK_Developer NewProject.prj", "On Windows platforms", ", selecting ", "JACK Developer", " on the ", "Start", " menu invokes the default configuration.", "On Macintosh platforms", ", double-click on the JACK Developer icon. This is found in the directory in which the JDE is installed.", "To start the JDE from the command line, type the following (where ", "path_to_jack.jar", " is the path to the ", "jack.jar", " file): ", "java -classpath path_to_jack.jar -Xmx85m aos.main.Jack", "If an out of memory error appears, the upper limit of memory available to the Java Virtual Machine may need to be increased. For example, to increase the amount of memory available to 120 megabytes, replace ", "-Xmx85m", " with ", "-Xmx120m", " in the above command line.", "After this ", "introductory section, an overview provides a brief sketch of the JDE, covering its functions, the interface elements, and the standard JDE interaction protocol. Subsequent sections delve into the JDE's features in greater depth.", "Certain ", "typographical conventions have been adopted in this manual:", "In keeping with current GUI design practice, the JDE adopts the look and feel of the host operating system. Within this constraint, the JDE has been designed to be as cross-platform compatible as possible. For example, if the user is familiar with the JDE on a Windows platform, they will find that it is much the same on a Unix platform.", "The screen snapshots in this manual were created on a Macintosh running Apple's Mac OS X operating system. On another platform, the JDE GUI", " will look slightly different, but these differences are only cosmetic, and will not affect the performance of the JDE in any way. In some cases, menu options may be found in different locations.", "There are also some differences in operating system-specific conventions regarding mouse buttons and modifier keys. These are listed and explained below. Windows is the most common platforms for JDE users, so this document adopts Windows conventions as the default when describing actions within the JDE framework.", "In this document, textual content refers to the JDE on a Windows platform. Where there are variations in menus, options and so on across platforms, a note will be provided explaining those differences.", "Unix ", "systems typically have a three button mouse, Windows systems have a two button mouse, and Macintosh systems have a single button mouse.", "In the JDE, the left and right mouse buttons function in the same way on Unix and Windows systems. The middle button is unassigned, and not used for any purpose.", "To access the functions of the right mouse button on a Macintosh system, hold down the ", "COMMAND", " key while pressing the mouse button (unless a third-party two button mouse is available allowing the use of the right button as required).", "Generally, where a ", "CTRL", " key is used in Windows and Unix, the ", "COMMAND", " key is used on the Macintosh. For example, on Windows you use the ", "CTRL", " key to make multiple selections. On the Macintosh you would use the ", "COMMAND", " key. The ", "SHIFT", " key performs the same function on all three platforms.", "Useful information and updates relevant to the JDE are available at the Agent Oriented Software web site, ", "http://www.agent-software.com", ".", "JACK\u0099 ", " ", "Intelligent Agents", " supports two agent reasoning models:", "These models are implemented as extensions of the Java language. These extensions:", "Figure 2-1: ", "JDE menu bar and work area ", "The class level constructs provided by the two models are discussed in detail in the ", "Agent Manual", " and ", "Teams Manual", ". These constructs are the primary building blocks of every JACK application and can be defined in any text editor. For some, this is the preferred method of program development. However, others prefer to use graphical environments for code development. The JDE provides support for this mode of development through conventional drag-and-drop functionality and context sensitive menus.", "The JDE also supports aspects of the software development life cycle other than code generation and execution. In particular, tools are provided to support the design process and the tracing of design and plan execution. These tools are fully integrated with the basic code generation/compilation/execution functionality of the JDE. The Design Tool, the Graphical Plan Editor and the Plan Tracing Tool are each explained separately within their own documents.", "When the JDE is invoked, a window is created which initially consists of a menu bar and a work area.", "Within the JDE a project consists of a collection of programming elements. Through the JDE menu bar", ", one can create a new project or open an existing project. When this occurs, a special instance of a JDE browser window", " is opened. This is known as the ", "project window", ".", "Directly below the JDE menu bar is the JDE Tool Bar", ". The JDE Tool Bar provides a series of shortcut buttons that can be clicked to bypass the drop-down menus of the menu bar for many of the basic functions of the JDE. The buttons available to the left perform various actions in the JDE, and are referred to as ", "action buttons", ".", "There are also three buttons to the right end of the JDE Tool Bar. These buttons toggle various modes on and off, and are referred to as ", "toggle buttons", ".", "Further details about these buttons and their functions are provided in the ", "JDE Tool Bar", " chapter of this document.", "The project window provides the primary interface for code development including access to the Graphical Plan Editor", ". It also enables the user to create and access design views for the JACK Agent Model", " or JACK Teams Model", ".", "The project window is configured differently depending on whether one is developing an agent model or a teams model \u2013 the appropriate mode is selected via the ", "View", " menu", " from the JDE menu bar. The JDE menu bar also provides access to the ", "Compiler Utility", " which enables the user to compile and execute agent and teams models.", "The JDE menu bar contains the following drop-down menus:", "These menus provide access to the high level functions of the JDE, such as loading and saving projects, and editing projects in various ways. These menus are outlined briefly below, and are explained in greater detail elsewhere in the ", "Menu Bar", " chapter of this document.", "The ", "JACK Developer", " menu exists only in the Macintosh environment. The ", "JACK Developer", " menu contains the following options:", "The ", "File", " menu", " contains the following options:", "These options are discussed in detail in the ", "JDE menu bar", " chapter of this document.", "The ", "Edit", " menu", " contains the following options:", "The ", "View", " menu", " contains the following options:", "These options can all be toggled on or off providing alternatives affecting the various functions of the JDE. Checks indicate which of the options is currently toggled on.", "The ", "Entity", " menu", " contains the following options:", "The ", "Trace", " menu", " contains the following options:", "The ", "Tools", " menu", " contains the following options:", "The ", "Window", " menu", " maintains a list of titles of all currently opened (not minimised) JDE browser windows. Initially, the ", "Project", " window will be listed here. Selecting a title form the list will bring a particular window to the front of the JDE.", "The ", "Help", " menu", " contains the following options:", "Within ", "a JDE session only one project can be active at a time. When a project", " is first opened, a special JDE browser window is opened which is known as the ", "project window", ".", "Additional JDE browser", " windows can be opened by selecting items from the project window", ", and dragging them onto the JDE work area. For example, if a subtree of the project window's folder hierarchy is dragged and dropped into the JDE work area, a new JDE browser window is opened for browsing the selected subtree.", "The project window", " is opened when an existing project is loaded or a new project is created. This is achieved via the ", "File", " menu", " on the JDE menu bar", ". The project window displays the name of the current project in the title bar. It also displays a hierarchical tree structure of folders which contain the project components. The window may be moved around the JDE window and resized according to the needs of the user.", "The project", " can be closed via the ", "File", " menu", " on the JDE menu bar. Note that closing the project window", " also closes the project. If a project has unsaved changes, a prompt will appear asking whether the changes should or should not be saved. A project can be explicitly saved via the ", "File", " menu at any time during a JDE session.", "Saving a project via the ", "File", " menu causes any entities that have been changed (highlighted in red in the project window) to be saved. The project file is updated to include any references to newly created or loaded files and any new or updated entity files are saved. A project is stored as a file in JACOB syntax", " with a ", ".prj", " extension. To learn more about JACOB, refer to the ", "JACOB Manual", ". When saving a project, a prompt may appear asking the user to create all required folders necessary for that project.", "The project window", " contains project details", " (such as ", "Project Name", " and ", "Documentation", ") and the ", "Design Views", " folder", ". It also holds the ", "Agent Model", " container and the ", "Data Model", " container, both of which contain folders for storing the various programming elements of the project. Finally, the project window also contains the ", "Other Files", " folder, enumerating non-JACK files of interest.", "These folders allow grouping of entities in a project. For large projects, some folders will contain many entities. In such situations, it is useful to group the entities within a folder into sub-folders. This is achieved through the use of nested containers. Containers can be nested within containers, without limit to the number of nesting levels. Entities of the same type can be moved between nested containers.", "The elements in the project window's folder hierarchy can be expanded or contracted by clicking on the '+' symbol or arrow to the left of the element or by double-clicking on the element's folder or name. When an element is expanded, the '+' symbol becomes a '-' symbol, or the right arrow becomes a down-arrow on the Macintosh. Clicking on the '-' symbol or down-arrow (or, equivalently, double-clicking on the element next to the '-' symbol or down-arrow) collapses the expanded tree.", "Context-sensitive menus", " are provided for performing operations on folders and folder elements. The menus are accessed by placing the mouse cursor over an item and pressing the right mouse button. A menu then appears providing operations that can be applied to that item.", "Drag-and-drop", " is used to associate one entity with another (such as a plan with an agent). The element to be dragged is first selected by clicking and holding the left mouse button down while over the icon. The left button is then kept down while the mouse is moved until the cursor is over the destination item. Releasing the left mouse button will then associate the dragged element with the destination element. Multiple drag-and-drop can also be performed as described in the ", "JDE Browser", " chapter.", "Note that if a drop operation is permitted, the Drop Allowed cursor", " is displayed.", "Figure 2-2: ", "Drop Allowed cursor", "If the operation is not permitted, the No Drop Allowed cursor", " is displayed.", "Figure 2-3: ", "No Drop Allowed cursor", "A project", " as a whole encapsulates all of the resources related to an agent model", " and any extra (non-JACK) files such as regular Java files and data files required.", "The project details are the first item in the project window. It has the following seven attributes:", "Table 2-1: ", "Project attributes", "The type definition files created within the JDE are stored as G-Code files in the ", "Save", " folder", ". Compiling an application results firstly in JACK files being generated from the G-Code files. The JACK files are written to the ", "Generated JACK Sub-folder", ". The files in the ", "Generated JACK Sub-folder", " are then translated to Java code; these files are stored in the ", "Generated Java Sub-folder", ". Finally, the generated Java code is compiled along with any other Java source files needed. The resulting class files are stored in the ", "Generated Class Sub-folder", ". Note that the G-Code to JACK code step can be performed independent of the other steps if desired.", "Applications that have been developed outside of the JDE can be imported into the JDE. This can be done through the Compiler Utility. Alternately, the G-Code and a project file", " can be generated by entering the following command in the directory which is the root of the application source tree:", "java aos.main.JackBuild -r -x -E myproject.prj -dj backup", "myproject", " can then be opened in the normal way from within the JDE.", "The ", "-dj", " option", " results in the application files being copied to a directory called ", "backup", ". If this option is omitted, and the resulting G-Code was compiled with the default setting for the ", "Generated JACK Sub-folder", ", the original JACK files would be overwritten.", "The user can also import components from other projects into the current project. This is discussed in the ", "JDE Browser", " chapter of this document.", "It", " is possible to design and build an application using the Design Tool. The Design Tool can be accessed by right-clicking on the ", "Design Views", " folder. Existing designs can be accessed from within the ", "Design Views", " folder. Entities that exist in the JDE browser can be incorporated into a design by dragging them onto the design canvas. Any new entities or links between entities that are created while building a design will result in corresponding changes to the contents of the JDE browser window.", "The Design Tool is discussed in greater detail in the ", "Design Tool Manual", ".", "The", " following folders are contained within the ", "Agent Model", " container:", "Of these folders, ", "Team Types", ", ", "TeamPlan Types", ", ", "Role Types", " and ", "Named Roles", " are available only when the ", "Teams mode", " option is checked in the ", "View", " menu.", "When the JDE is in ", "Teams Mode", ", the ", "Agent Types", " folder may be included or excluded (as per your preference settings).", "The", " following folders are located within the ", "Data Model", " container:", "The Code Editor appears whenever a text item is edited, unless an external editor is used. Using an external editor is discussed in the ", "Preferences", " section.", "The kinds of items that are edited with the Code Editor include:", "The Code Editor", " has a number of features designed to facilitate writing JACK code", ". It has a tool bar located in the top-left corner of the Code Editor window. The functions of the Code Editor are discussed in further detail in the ", "Code Editor", " chapter of this document.", "To", " open the Code Editor:", "When ", "editing an internal JDE text item (i.e. not an external file), the Code Editor", " window has two buttons to the right: ", "Save", " and ", "Close", ".", "Saving ", "changes to external files is discussed in detail in the ", "Code Editor", " chapter of this document.", "The JDE", " allows the user to specify an alternative to the Code Editor. This is discussed in the ", "Preferences", " section of this document.", "JACK-based", " applications can be compiled and run from within the JDE with the ", "Compiler Utility", ". It provides a graphical user interface to the standard command-line based ", "aos.main.JackBuild", " utility provided with JACK. Refer to the relevant section of the ", "Agent Manual", " for further details.", "Open the ", "Compiler Utility", " at any time by selecting ", "Compiler Utility", " from the ", "Tools", " menu on the JDE menu bar, or by clicking on the Compiler Utility icon in the tool bar. If the ", "Compiler Utility", " is already open, its window will be brought to the front.", "Figure 2-4: ", "Compiler Utility icon", "To close", " the window at any time, click the ", "Close", " button", ".", "The ", "Compiler Utility", " window consists of the tabs listed below. Further details are provided in the ", "Compiler Utility", " chapter of this document.", "The", " JDE menu bar contains the following menus:", "The JDE menu bar", ", located at the top of the JDE work area", ", provides access to major functions, as outlined below.", "The ", "JACK Developer", " menu", " is used to perform application specific operations on the Mac OS X platform. The ", "JACK Developer", " menu contains the following options:", "The options from the above list that are specific to the JDE are discussed in detail below. The remaining options are standard for all Macintosh software.", "The ", "About JACK Developer", " option provides information about Agent Oriented Software Pty. Ltd. It also provides information about the particular release version of the JDE and JACK being used, and further copyright information.", "The ", "Preferences", " option is located in the ", "JACK Developer", " menu on the Mac OS X platform, whereas in Windows it is located in the ", "Tools", " menu. More information on ", "Preferences", " is provided below.", "This", " option quits the JACK Developer.", "The ", "File", " menu", " is used to perform project-level operations and to exit the JDE. The ", "File", " menu contains the following options:", "These options are discussed in detail below.", "The ", "New Project", " option creates a new project. By default, the location of this project is the directory in which the editor is invoked.", "To create a new project:", "The ", "Open Project", " option opens an existing JDE project file (", ".prj", ").", "To open an existing project:", "The ", "Save Project", " option saves all project components that have been modified or are unsaved (highlighted in red). If the component being saved already exists on the file system, the existing version is copied to a backup file with the extension ", ".bak", " and the new version is saved in its place.", "To save a project:", "The ", "Load External Edits", " option will cause any text which has been changed by an external editor and saved to its temporary file, to be loaded back into the appropriate JDE programming element.", "The ", "Load External Edits", " option will be inactive unless an external editor has been selected in the preferences. It will also be inactive if the preference to ", "Load changes from an external editor as soon as the file is saved/written", " is set since it makes this option redundant.", "The ", "Copy/Move Project", " option moves the project to a different directory, or makes a copy of the current project.", "To copy/move a project:", "If a project is being opened that was saved with an old version of the JDE, this option will load everything and update it to the new internal format. This is useful if you know ahead of time that the old project needs to be re-formatted.", "The ", "Close Project", " option closes the current project. If the current project has any unsaved components, an option is provided in a pop-up dialog box to save them before closing.", "To close a project:", "This", " will generate JACK code for any elements that require it; for example, JACK files for new elements or elements that have been modified (highlighted in red).", "To update JACK files:", "The ", "Generate All JACK Files", " option generates JACK code for all elements in the current project, regardless of whether they are up-to-date or not. In other words, the ", "Generate All JACK Files", " option is a complete generation and updating option.", "To generate all JACK files:", "The ", "Remove JACK Files", " option in the ", "File", " menu removes any generated JACK files from the currently active project. The ", "Remove JACK Files", " option actually renames old generated files to become ", "*.bak", " files.", "The ", "Generate Project Report", " option in the ", "File", " menu generates a project report containing the documentation and details of the selected project components.", "The ", "Page Setup", " option in the ", "File", " menu provides various options relating to printing JDE projects. Depending on the platform, it provides options on paper size and source, orientation (landscape or portrait), and margin widths.", "The ", "Print Project Report", " option in the ", "File", " menu opens the ", "Print Project Report", " window. This window allows the user to select the print format (text or XML). The various parts of the report that the user wishes to print can be selected individually with a variety of checkboxes, or all parts of the report can be printed at once.", "The ", "Exit", " option exits the JDE and provides a prompt to save any unsaved changes before exiting.", "To exit the JDE:", "This menu", " provides the following options for text in the editor windows:", "The ", "Cut Text", " option cuts highlighted text from a text editor window.", "To cut text:", "This", " option copies highlighted text from a text editor window to the clipboard.", "To copy text:", "This", " option pastes text from the clipboard into the current text editor window at the current insertion point. Text that has been copied or cut can be pasted from the clipboard. Text must be copied or cut before the ", "Paste Text", " option can be used.", "To paste text:", "The ", "View", " menu on the JDE menu bar provides the following options:", "Check marks to the left of each option indicate whether that option has been selected or not.", "When", " the ", "Full Package Path", " option is checked, the entire package path of the current project is displayed on elements in the project.", "When", " the ", "Documentation Nodes", " option is checked, the user is able to view and edit documentation for types and files, including the current project.", "By ", "clicking on the ", "Teams Mode", " option in the ", "View", " menu, the user can toggle between Teams mode", " and Agent mode. The results of toggling between the two modes are directly visible in both the JDE browser", " and the ", "Design Palette", ".", "The folders which are displayed within the JDE browser are mode dependent. In Agent mode", " the following folders can be accessed: ", "Agent Types", ", ", "Capability Types", ", ", "Plan Types", ", ", "Event Types", ", ", "Named Data", ", ", "Beliefset Types", ", ", "View Types", " and ", "External Classes", ".", "In Teams mode", " ", "the following folders can be accessed: ", "Capability Types", ", ", "Plan Types", ", ", "Event Types", ", ", "Team Types", ", ", "TeamPlan Types", ", ", "Role Types", ", ", "Named Roles", ", ", "Named Data", ", ", "Beliefset Types", ", ", "View Types", ", ", "TeamData Types", " and ", "External Classes", ".", "Likewise, the contents of the ", "Design Palette", " are mode dependent. Agent mode provides", " the following icons: ", "Agent", ", ", "Capability", ", ", "Event", ", ", "Plan", ", ", "Named Data", " and ", "Note", " while Teams mode provides all the icons of Agent mode, as well as ", "Team", ", ", "TeamPlan", ", ", "Named Role", " and ", "Role", ". The ", "Agent", " icon is greyed out if the ", "Agent Types", " folder is opted to be excluded in ", "Preferences", "; otherwise it is functional.", "When this option in the ", "View", " menu is checked, the JDE Tool Bar is visible. To hide the JDE Tool Bar, simply uncheck this option by clicking it.", "The ", "Entity", " menu ", " provides the following options:", "The options listed above all provide shortcuts that add an object of the selected type.", "The ", "Trace", " menu ", " provides the following options:", "Use ", "this menu option to connect to a DCI name server. For example, if the application had been started using the DCI arguments described in the previous section, the user would enter ", "localhost:9999", " or ", "9999", " to connect to the application's nameserver. Name server connection is optional; however, without a nameserver, the Design Tracing Tool user needs to know explicit portal addresses in order to connect the Design Tracing Tool to each portal, rather than using portal names.", "Note that the nameserver address can also be entered using the ", "Connect To Portal...", " menu option.", "Refer to the ", "Design Tracing Tool", " chapter of the ", "Tracing and Logging Manual", " for further information on this option.", "Figure 3-1: ", "Connect to Nameserver", " dialog", "Use this menu ", "option to connect to a portal via the portal name or address. Once connected, the ", "Tracing", " window will be displayed, showing all agents connected to that portal.", "If already connected to a nameserver, you would normally connect by specifying a portal name. Otherwise, use an explicit address such as ", "localhost:9999", " or ", "9999", ".", "Figure 3-2: ", "Connect to Portal", " dialog", "Once connected to a portal an application can be resumed from its suspension point and traced with the DTT.", "Use this menu ", "option to configure settings for design tracing. Design tracing should be configured whilst an application is stopped or paused.", "Designs can be traced for specific agent types and/or agent names. An asterisk can be used as a wildcard to indicate matching all agent types or agent names.", "The ", "Design Tracing Configuration", " window lists the following:", "Agents can be added or removed in the ", "Design Tracing Configuration", " window by clicking the ", "Add", " or ", "Remove", " options to the right of the window, and the options to ", "Apply", "Load...", "Save...", " or ", "Close", " are available at the bottom of the screen.", " Refer to the ", "Tracing and Logging", " Manual for more details on design tracing.", "Use this menu ", "option to control tracing of designs. Refer to the ", "Tracing and Logging", " Manual for more details on design tracing.", "Use this menu option", " to check if an agent is still responding. The number of attempts and the delay in seconds can be set between ping attempts. The agent name and portal name need to be entered, e.g. ", "robot23@Server", ".", "Figure 3-3: ", "Ping Agent", " dialog", "The ", "Tools", " menu provides", " the following options:", "The ", "Compiler Utility", " and its various features and functionalities are discussed separately in the ", "Compiler Utility", " chapter of this document.", "The ", "Design Palette", " provides access to the various elements of a design. It has two modes \u2013 Agent mode and Teams mode, and the user can toggle between these modes by clicking on the ", "Teams Mode", " option in the ", "View", " menu.", "Figure 3-4: ", "Design Palette", " \u2013 Agent mode", "Figure 3-5: ", "Design Palette", " \u2013 Teams mode", "The icons on the ", "Design Palette", " can be dragged and dropped from the palette onto a Design View canvas by clicking, dragging and releasing the icon with the mouse. In this way, designs can be built quickly and easily with the", " Design Tool, the JDE's graphical user interface (GUI), for creating project designs.", "The ", "Design Palette", ", its modes and its uses are described in greater detail in the ", "Design Tool Manual", ".", "The ", "Plan Editor Palette", " provides access to the various reasoning method statements and components used within the Graphical Plan Editor environment. Icons can be dragged from the palette and dropped onto the Plan Graph Editor canvas, from which point they are used to build and develop graphical reasoning methods.", "Figure 3-6: ", "Plan Editor Palette", "The ", "Plan Editor Palette", " and its functions are described in greater detail in the ", "Graphical Plan Editor Manual", ".", "The ", "Error Log", " shows errors and warnings related to JACK components, e.g. a plan does not handle any event type. It shows errors and warnings generated during JACK file generation.", "The ", "Clear Log", " button at the base of the ", "Error Log", " window clears the text within the ", "Error Log", " window.", "Figure 3-7: ", "Error Log", "The ", "Preferences", " option", " allows the specification of JDE preferences. Various JDE configuration parameters can be set with the ", "Preferences", " option in the ", "Edit", " menu.", "Clicking on the ", "Preferences", " option in the ", "Edit", " menu", " opens a window with a series of tabs providing various preference options.", "The ", "Preferences", " options window can also be opened using the Preferences shortcut in the JDE Tool Bar.", "Figure 3-8: ", "Preferences icon", "The ", "Preferences", " tabs", " are:", "The various options within each tab window are discussed in detail below.", "Tab windows in the", " ", "Preferences", " option are opened by clicking on the relevant window tab at the top of the ", "Preferences", " window. Only one tab window is accessible at a time, but all tabs are visible to the user at any given time.", "To select a preference in any of the tab windows:", "To save preferences in the configuration file ", ".jack.properties", " in the user's home area (system dependent), click on ", "Apply and Save Preferences", ". They will be used next time the JDE is started up. After ", "Apply and Save Preferences", " has been clicked, the ", "Close", " button must be clicked to close the ", "Preferences", " window.", "If the ", "Close", " button is clicked instead of ", "Apply and Save Preferences", ", default preferences will be used until the JDE is exited.", "The", " ", "Project View", " tab provides the various options listed and explained below. To select an option, click on the appropriate checkbox. The options available on the ", "Project View", " tab are as follows:", "The", " JDE allows you to use your own choice of text editor for viewing and/or modifying textual components such as code blocks and documentation. There are a number of preferences that can be set under the ", "Text Editor", " tab of the ", "Preferences", " dialog.", "The options available on the ", "Text Editor", " tab are as follows:", "The following additional checkboxes are also available within the ", "Text Editor", " tab:", "The", " various options available on the ", "Design Tool", " tab all relate directly to the Design Tool, and not to the JDE as a whole.", "To select an option, simply click on the textbox associated with the desired option. The options available within the ", "Design Tool", " tab are as follows:", "Figure 3-9: ", "Zoom slider", "For further details on the Design Tool and the functions provided by these tabs, please refer to the ", "Design Tool Manual", ".", "The ", "various options available on the ", "Graphical Plans", " tab all relate to functions provided within the Graphical Plan Editor ", "environment, including the Plan Graph Editor", ". To select an option, simply click on the textbox associated with the desired option. The options available within the ", "Graphical Plans", " tab are as follows:", "For further details on the Graphical Plan Editor, and the functions provided by the options within the ", "Graphical Plans", " tab, please refer to the ", "Graphical Plan Editor Manual", ".", "The ", "Fonts", " tab provides textboxes with the options discussed below:", "The following options are available in the ", "Advanced", " tab:", "When a project has been loaded into or created in the JDE and has been saved, the project name appears in the ", "Window", " menu next to this heading, and project name information is visible in the menu.", "For example, if the name of the project is ", "NewProject.prj", ", the ", "Window", " menu will contain the text ", "Project: NewProject", ". Should the JDE be opened with no project loaded, this project name text will not be visible.", "The ", "Window", " menu will also display a list providing the names of any individual project windows that are open in the current JDE session.", "The ", "Help", " menu ", " provides the following options:", "The ", "JACK Documentation", " option provides a shortcut to documentation about the JDE.", "The ", "JACK Frequently Asked Questions", " option provides a shortcut to a HTML page providing JACK FAQs.", "The ", "Agent Oriented Software Home Page", " option provides a shortcut to the Agent Oriented Software home page at ", "http://www.agent-software.com.au", "The", " ", "Create Project from Example", " option details how to create a project from the examples listed in the JDE. Various examples are provided.", "To load one of the JACK examples:", "About JACK\u0099 ", " ", "Intelligent Agents", " provides information about Agent Oriented Software Pty. Ltd. It also provides information about the particular release version of the JDE and JACK being used, and further copyright information.", "The JDE tool bar lies directly below the JDE menu bar", ". The JDE tool bar provides a series of shortcut buttons that can be clicked to bypass the drop-down menus of the menu bar for many of the basic functions of the JDE.", "The buttons available to the left perform various actions in the JDE, and are referred to as ", "action buttons", ". The action buttons of the JDE Tool Bar are described in the next section.", "There are also three buttons to the right end of the JDE tool bar. These buttons toggle various modes on and off, and are referred to as ", "toggle buttons", ". The toggle buttons of the JDE tool bar are:", "The JDE tool bar can be dragged around the JDE canvas, docked to a different edge of the canvas, or can be used as a separate floating window on the JDE canvas, depending on the requirements of the user.", "The JDE tool bar action buttons are described below.", "After the ", "Paste Text", " button there are a series of ", "add", " buttons enabling the user to shortcut through to the functions provided by the ", "Entity", " menu.", "These ", "add", " buttons are listed below.", "The remainder of the ", "action", " buttons are described below.", "Figure 4-1: ", "JDE action buttons", "The JDE tool bar toggle buttons are described below.", "Figure 4-2: ", "JDE toggle buttons", "The", " ", "Compiler Utility", " can be opened at any time by selecting ", "Tools > Compiler Utility", " from the JDE menu bar. If the ", "Compiler Utility", " is already open, its window will be brought to the front when the ", "Compiler Utility", " option is selected.", "A shortcut Compiler Utility icon is also available in the JDE Tool Bar. To open the Compiler Utility using this method, simply click on the Compiler Utility icon.", "To close the ", "Compiler Utility", " window at any time, click the ", "Close", " button located at the bottom of the window", ".", "The", " ", "Compiler Utility", " window consists of five tabs. These are discussed below.", "The five ", "Compiler Utility", " tabs are discussed in detail below.", "Most", " of the options in the ", "Options", " tab are equivalent to command-line arguments passed to the ", "aos.main.JackBuild", " utility. The choices made in this tab affect the behaviour of the other tabs.", "Each entry in the ", "Project Java Properties:", " scrolling list is passed to the compiler; the entries are then passed to each subsequent stage in the build process.", "To add an entry to the list, type it into the text box below the Project Java Properties textbox. Use the same format here as with the ", "-D", " option with the ", "aos.main.JackBuild", " utility. For example, entering ", "JAVAC=<property>", " is equivalent to ", "-DJAVAC=<property>", " being provided to ", "aos.main.JackBuild", ".", "Once", " the desired property has been added, click the up-arrow button", " to insert it in the list.", "To remove an entry from the list, click the entry once to select it then click the", " ", "Remove", " button below the list.", "This", " list contains the locations that will be searched by the various compilers when building an application and by the Java runtime environment when running applications. This list initially contains the Project Classpath inherited from the environment in which the JDE was started.", "To add a new location to the project classpath, click the ", "Add", " button", ". A dialog box appears allowing the selection of a folder or a ", ".jar", " file. Clicking the ", "Choose", " button", " will add a selection to the Project Classpath list.", "To remove an entry from the Project Classpath, click the entry in the list once to select it, then click the ", "Remove", " button", " ", "below the list.", "The ", "Up", " and ", "Down", " buttons", " can be used to change the position of the selected item in the Project Classpath.", "The", " ", "Options", " tab window contains several checkbox options that can be toggled on or off. These options are listed here:", "To save the", " settings selected under the ", "Options", " tab, click on the ", "Save Options", " button", ". These settings will be stored in the configuration file: ", ".jack.properties", " in the user's home area (system dependent).", "To close", " the JACK ", "Compiler Utility", " window, click on the ", "Close", " button", " at the base of the ", "Compiler Utility", " window.", "The ", "Compile Application", " tab provides access to the functionality of the JackBuild Utility. Use this tab to convert an application from source code into an executable form.", "The ", "Folder", " ", "textbox lists the current folder. If there is a project open in the JDE, the current folder is the project's root directory; otherwise, it is the folder from which the JDE was launched.", "The current folder can be changed by double-clicking another folder in the list, or by typing a new location into ", "Folder", " and pressing ", "ENTER", " or ", "RETURN", ".", "The main part", " of the ", "Compile Application", " tab is comprised of two lists, labelled ", "Contents:", " and ", "Specific Selection:(optional)", ".", "The ", "Contents:", " list", " contains all of the items in the current folder which are displayed in ", "Folder", ".", "The ", "Specific Selection: (optional)", " list specifies which files to compile.", "To add a file, select a file in the ", "Contents:", " list and double-click with the mouse, or click the right arrow button on the ", "Compile Application", " tab.", "To remove a file, select a file in the ", "Specific Selection: (optional)", " list and double-click on the file with the mouse, or click the ", "Remove", " button on the GUI.", "If the ", "Specific Selection: (optional)", " list is empty, all JACK/Java files in ", "Contents:", " are compiled.", "The JACK compiler automatically detects and compiles the files required from existing JACK code in the current folder if no files are added to the specific selection.", "The", " ", "Java Args:", " text box is used for arguments to be passed to the Java compiler.", "The", " ", "Extra Args:", " text box is for any extra information to be passed to the compiler, or for options not accessible from the ", "Compiler Utility", "'s graphical user interface (GUI). Anything entered into this box should be a valid command-line argument to the JackBuild utility", ".", "Take care not to duplicate any information or options already provided by the ", "Compiler Utility", "'s graphical user interface. The ", "-classpath", " parameter, for example, is already supplied by the ", "Preferences", " tab", ", and the ", "-dj", " and ", "-dc", " options respectively come from the ", "Generated Java Sub-folder", " and the ", "Generated Class Sub-folder", " attributes in the project window.", "To compile", " an application, click the ", "Compile", " button. If there is currently a project open in the JDE, the JACK files are updated (this is equivalent to selecting ", "File > Update JACK Files", " in the JDE menu bar)", " and the compilation process itself begins. The ", "Output/Errors", " tab will be activated, displaying any output from the compiler as it builds an application. When the procedure is complete, the ", "Compile Application", " tab", " is displayed again unless an error has occurred.", "While an application is being compiled, a ", "Stop", " button is visible, with which the user may stop the compilation of the project.", "To", " remove any files from a previous build, or to remove intermediate files from a failed build, click the ", "Clean Up", " button", ". This is equivalent to JackBuild's ", "-clean", " option. The ", "Output/Errors", " tab ", "will be activated, displaying any output from the compiler as it removes files. When the procedure is complete, the ", "Compile Application", " tab is displayed.", "The ", "Close", " button", " closes the JACK ", "Compiler Utility", " window.", "A compiled application can be executed with the ", "Run Application", " tab. Like the ", "Compile Application", " tab, ", "there is a list displaying all of the items in the current folder (which is shown in ", "Contents:", "). When an item in the list is clicked, information about the file or folder is shown on the right-hand side of the window.", "The user specifies the class file to be run by first selecting it from the ", "Contents:", " list, then clicking the ", "Select File", " button", ". The class name is shown in the text box next to ", "Select File", ". Alternatively, one can double-click on the item, or enter the name of the file into the text box adjacent to the ", "Select File", " button.", "When a class file is selected in the ", "Contents:", " list it becomes highlighted, and information about the file becomes visible in the right side of the ", "Run Application", " tab window. This information is specifically: ", "Kind:", " (the type of file), ", "Size:", " (the size of the file) and ", "Modified:", " (when the file was last modified, including the date and time in the format ", "DD/MM/YYYY HH:MM:SS", ").", "If any command-line arguments are required by the application, they are entered in the ", "Extra Args:", " text box. Similarly, the ", "Java Args:", " text box is used for arguments to be passed to the Java interpreter. Also ensure that the ", "Folder:", " entry is correct for running the application \u2013 the ", "Folder:", " entry will be added to ", "CLASSPATH", " as the application's root point.", "To run the application, click the ", "Run", " button", ". The ", "Output/Errors", " tab ", "is not automatically activated so you need to select it manually to display any output or errors from the application.", "When an application is started, the ", "Run", " button is transformed into a ", "Stop", " button", " until the running process exits.", "The ", "Convert Non-JDE JACK", " tab", " is used to generate a new project from existing JACK code that was not developed using the JDE.", "When creating editor files from existing JACK source files and compiling the application from within the JDE, original JACK source files will be overwritten. To keep those original files, ensure that a backup has been made.", "As", " with the ", "Compile Application", " tab and the ", "Run Application", " tab in the JACK ", "Compiler Utility", " window, the ", "Convert Non-JDE JACK", " tab contains a ", "Folder", " textbox, in which the current directory is displayed.", "If there is a project open in the JDE, the current folder is initially the project's root directory. If no project is open, then it is the folder from which the JDE was launched.", "The location of the current project can be changed by entering the new location and pressing ", "ENTER", " or ", "RETURN", ", or by using ", "Contents:", ".", "The top section of the tab is similar to the ", "Compile Application", " tab. It consists of two lists, labelled ", "Contents:", " and ", "Specific Selection: (optional)", ".", "The", " ", "Contents:", " list contains all of the items in the current folder.", "The ", "Specific Selection: (optional)", " list specifies which files to generate G-Code for by adding them to its list.", "The ", "editor files generated", " via the ", "Convert Non-JDE JACK", " tab can be inserted into a project file, thereby making them available as a group to the JDE. To specify the name for this project file, either enter the path to the file in the project file text box or click the", " ", "Browse", " button to specify a file in a different folder.", "If the ", "JACK source files that editor files need to be generated from are part of a Java package, the root package can be entered in the", " ", "Root Package", " text box. When the files are generated, this prefix will be inserted into each object's package statement.", "This", " text box is used for arguments to be passed to the Java compiler.", "The", " ", "Extra Args:", " text box is used to provide any extra information to the compiler when it generates the files, or use options not directly accessible from the JACK ", "Compiler Utility", ". Anything entered in this box should be a valid command-line argument to the", " JackBuild utility.", "The ", "Create Project File:", " option allows the user to type in the name of the required project file, or to browse through existing files using the file chooser option, which opens when the ", "Browse", " button is clicked.", "If the user specifies a root package, any generated import statements will omit that part of the package name.", "To", " start the file generation:", "The ", "Close", " button closes the Compiler Utility.", "The ", "Output/Errors", " tab displays the output of the commands available from the other tabs. This tab can be manually selected to view the output of previous commands.", "To save the output from previous commands, click the ", "Save to File", " button.", "To empty the text fields of the output from previous commands, click the ", "Clear", " button", " for the field to be emptied. Save the output or errors to a file by clicking the relevant ", "Save To File", " button", ". The ", "Output/Errors", " tab also includes a ", "Stop", " button with which the compilation process can be stopped.", "When a project", " is open in the JDE, certain aspects of the file listings displayed in the ", "Compile Application", ", ", "Run Application", " and ", "Convert Non-JDE JACK", " tabs are slightly different. When there is no project open, the current folder defaults to the one from which the JDE was launched. However, if there is a project open, the current folder defaults to the project's root directory.", "When a project is open, files that have been modified but not saved are displayed in italics. This also applies to files that have not yet been generated (in the case of generated JACK source files). These files can still be selected because they will be generated when the ", "Compile", " button", " in the ", "Compile Application", " tab is clicked.", "The", " Code Editor appears whenever a text item is edited.", "The kinds of text items that are edited with the Code Editor include:", "Figure 6-1: ", "Example of the Code Editor window", "In addition to the basic editing functions listed in the ", "Code Editor tool bar", " ", "section, the Code Editor offers the following features:", "The Code Editor ", "has a number of features designed to facilitate writing JACK code. Many of these are accessible from the options bar located in the", " Code Editor window. These features include the following buttons:", "The ", "Keys...", " button opens the ", "Key Bindings", " window. In the categories drop-down menu, the following options are available:", "The ", "Key Bindings", " options enable the user to attach various functions to various non-printable keys on the keyboard.", "Figure 6-2: ", "The Key Bindings window", "For", " editing code that is internal to the JDE (i.e. not an external file), the Code Editor window also provides the following options: ", "Save", " and ", "Close", ".", "When", " editing an external file, the Code Editor window has three buttons: ", "Save", ", ", "Reload...", " and ", "Close", ".", "The", " JDE browser allows the user to view and modify the components in a project from within one or more browser windows. When a project is opened, a special browser window is opened which is known as the", " project window. Only one project window can be open at a time within a JDE session, and this window contains the details of all the components in a project. Additional browser windows can be opened by dragging selected folders or components into the work area.", "The project window contains the details of the project", ":", "The ", "Agent Model", " and ", "Data Model", " containers have folders in which the various programming element types can be stored. Further, the project window contains the ", "Other Files", " folder", ", into which non-JACK files of an application (e.g. Java files)", " can be placed.", "These folders allow the grouping of elements in a project. For large projects, some folders will contain many elements. In such situations, it is useful to be able to group the elements within a folder into sub-folders. This can be achieved through the use of ", "nested containers", ". Containers can be nested within containers, with no limit to the number of nesting levels. Elements of the same type can also be moved about between nested containers.", "This chapter describes the general functionality of the JDE browser. The specific operations that can be performed within the ", "Agent Model", " and ", "Data Model", " containers are discussed in separate chapters.", "The ", "elements in a JDE browser window's folder hierarchy can be expanded or contracted by clicking on the arrow to the left of the element (Windows) or by double-clicking on the element's folder or name.", "When an element is expanded, the right-arrow to the left of it transforms into a down-arrow. Clicking on the down-arrow (or double-clicking on the element next to the down-arrow) collapses the expanded tree.", "The JDE browser tree can also be navigated with the keyboard rather than the mouse. To do this, use the ", "UP", " and ", "DOWN", " arrow keys", " to highlight the desired folder, then press ", "ENTER", " or ", "RETURN", " to expand or contract the highlighted folder.", "Figure 7-1: ", "Unexpanded models in the JDE browser", "Context-sensitive menus are provided to perform operations on folders and folder elements \u2013 these are accessed by placing the mouse cursor over an item and pressing the right mouse button. A menu then appears providing operations that can be applied to the selected item.", "Drag-and-drop is used to associate one element with another (such as a plan with an agent). The icon to be dragged is first selected by clicking and holding the left mouse button down while over the icon. The left button is then held down while the cursor is moved onto the destination icon. Releasing the left mouse button will then associate the dragged element with the destination element.", "Folders that can have elements dragged and dropped onto them have a small rectangular depression in the middle. These are known as ", "target folders", ".", "Multiple drag-and-drop", " can also be performed. The JDE allows multiple drag-and-drop by holding down the ", "SHIFT", " key and selecting elements in sequence by clicking on their names or associated icons, then dragging the cursor over to the element with which they will be associated and releasing the mouse button. This operation allows selection of multiple", " items that can then be dropped on a target.", "Figure 7-2: ", "Multiple Drop Allowed cursor", "The ", "CTRL", " key can be held down to select individual entities in a list without having to select a range.", "A", " JDE project consists of programming elements that appear in the ", "Agent Model", " folder", ", the ", "Data Model", " folder", ", and the ", "Other Files", " folder", ". Some of these elements are type definition elements (e.g. agents, plans, beliefsets, Java class files), and some elements are naming elements (e.g. data naming elements and role naming elements).", "The purpose of naming elements is to associate names with data types, to support consistent use of data within the agent program. The naming elements themselves belong to the", " ", "Agent Model", " container of the project, while their types belong to the ", "Data Model", " container or ", "Other Files", " folder. In particular, naming elements may be used in the design diagrams, whereas ", "Data Model", " elements cannot occur in such diagrams.", "Within the project, all references to data are via naming elements. The data naming elements can be dragged and dropped in the usual way to achieve the required references in the type definitions. Similarly, role naming elements can be dragged and dropped onto the ", "Roles Required", " folder of a team type definition and the ", "Roles", " folder of a teamplan type definition.", "In", " an agent-based application, agents often form only part of the overall application. The agent part of an application is referred to as the ", "agent model", ". For example, if agents are used to control a manufacturing cell, the agents must interact with the machines in the cell. These machines will have been programmed using their individual controllers. The interaction between an agent and its corresponding machine may then be achieved by using an existing communications infrastructure. Thus the application (cell control) involves a number of software elements in addition to the agent model. An agent model may utilise existing agent models or parts of those models (e.g. agents and/or capabilities) ", "that have been developed for other applications.", "A JDE project acts as the repository for an agent model developed with the JDE. This agent model may be a stand alone application, but as noted above, it might also be a part of a larger application. The elements of an agent model can be either of the following:", "The JDE supports two types of element reuse \u2013 either a link can be created for an element in another project, or an element definition in another project can be incorporated directly into the project. In the latter case, the G-Code for the element is shared by any projects that use the element. This means that a change made to the element definition in one project will be seen by all projects that use that element. Note that each project that uses the element will generate JACK code for the element during the compilation process.", "In the case of a link, the linked element can be expanded, viewed and dragged around like a normal element, but it will not be saved in any file and no JACK code will be generated for it. Linked elements are marked as external, and have a hyphen before their package name. Both types of reuse are supported through the JDE browser ", "Importing an Element", " function, which is described in the ", "General functions", " section of this chapter.", "The", " JDE browser supports the following operations for both type definition folders (e.g. the ", "Agent Types", " folder) and naming element folders", " (", "Named Data", " folder and ", "Named Roles", " folder). Type definition folders contain type definitions; naming element folders contain naming elements. In the following, type definitions and naming elements are collectively referred to as ", "entities", ".", "The", " label of a folder can be edited by selecting the", " ", "Edit Label", " option from the folder's pop-up menu.", "To edit the label of a folder:", "Figure 7-3: ", "Label of the selected (", "TeamPlan Types", ") folder becomes an editable textbox", "To", " create a new element definition in a folder, right-click on the relevant folder label and select the ", "Add New", " option.", "For example, to create a new agent type definition, right-click on the ", "Agent Types", " folder label, and select ", "Add New Agent", ".", "The ", "Project View", " tab ", "in the ", "Preferences", " dialog", " has a checkbox named ", "Pop-up dialog when creating new objects", ". If that checkbox has been ticked when the ", "Add New Agent", " option is selected, the pop-up dialog for defining a new type will appear. Otherwise, a new element with a generated name is added to the folder, and thereafter the JDE browser enters the ", "Edit Name", " function", " for that element. Press ", "ENTER", " to accept the generated name, or to change it as needed.", "Pressing the ", "ESCAPE", " key at any point during this editing operation will abort the operation and cause the name to revert to its previous state.", "Each type must have a unique name within a given project. If a name that already exists is entered in the current project, the user will be alerted and will be returned to the Type Name-entry text box.", "The", " JDE supports several different ways of importing elements into the current project.", "In order to import an element, its G-Code (the graphical file format used by the JDE) must be available. In other words, either it was created as part of another project using the JDE, or the original JACK code must have been converted into the graphical file format. This conversion can be done by the JACK compiler from the command line, or by using the JACK ", "Compiler Utility", " within the JDE.", "To import an element:", "Within the ", "Import", " directory window discussed above, the following checkbox options are also present:", "If neither of these options are selected, the element is imported directly into the project.", "An element that has been imported directly into the project can be made external by prefixing its package name with a hyphen. The element is then treated by the JDE as a normal external element. However, if an element which is declared to be external is de-externalized (by the removal of the package prefix), the element will be treated as if it had been defined within the project. In particular, it will have its own G-Code, which is a copy of the G-Code for the original (external) element.", "The ", "Sort Elements", " option enables the user to sort the elements of any given type into alphabetical order.", "The", " ", "Add Nested Container", " menu item is used to create a sub-folder of a ", "Types", " folder, or an ", "Agent Model", " or ", "Data Model", " container. The sub-folders can then be used to organise types into meaningful groups.", "To add a nested container:", "Right-clicking on a nested container displays a menu which gives the user access to the same operations that were available when right-clicking on a top level container. In addition, the user has the option of removing the nested container. If a nested container is removed, its contents will be moved up one level and placed within the parent container. Thus, elements of a project are protected from being accidentally lost.", "The", " JDE browser supports the following operations on individual type definitions and naming elements. Type definitions and naming elements are collectively referred to as entities.", "Once", " an entity has been created, its name can be edited at any time.", "If the new name already exists, the JDE will alert the user to that fact and it will be necessary to find another name or package for the element.", "When an entity is renamed, the JDE will ask whether to locate and change all references to it (unless the ", "Automatically Update References...", " preference option is selected).", "Right-clicking", " on a JACK type definition in the JDE browser elicits the ", "Edit as JACK File", " option. This will present the entire entity in an editing window in the same form as would be passed to the JACK compiler. The code can be edited, and when the changes are saved (or the editor is closed) the changed text will be parsed and broken up into its individual elements, and the entity in the JDE browser will be updated accordingly. Depending on the number and degree of changes, the user may be asked to confirm the changes first. The amount of change required to trigger this confirmation can be set in the ", "Preferences", " option of the ", "Edit", " menu.", "After editing an entity in this way, some elements may be reordered, renamed, restructured or even removed if they are not required. Some textual elements, notably those resulting from graphical reasoning methods, can be edited, but any changes to them will be ignored. These parts of the text will have clear comments stating this.", "Right-clicking", " the ", "Edit", " menu option brings up a dialog box in which the entity's name, package and documentation can be changed.", "Right-clicking", " on an entity and selecting the ", "Add Copy", " option in the pop-up menu bar will create a copy of the selected entity, which can then be renamed with its own unique name.", "For convenience,", " the menu at this level also allows the user to select the ", "Add New", " option that was available from the folder level menu. In this case, the new entity will be added to the encompassing folder.", "For ", "convenience, the menu at this level also allows the user to select the ", "Import", " option that was available from the folder level menu. In this case, the imported entity will be added to the encompassing folder.", "Reloading", " is equivalent to removing an entity and reopening the last saved version.", "To reload from the file system, right-click on the type and select the ", "Reload", " option. Effectively, when this menu item is selected, the type is first removed and then loaded again.", "To", " remove an element from a folder, and hence from the current project (for example, to remove an agent type):", "Depending on the particular type definition or naming element, one or more of the following attributes can be modified using the JDE browser:", "The", " base class that types extend can be altered by editing the ", "Extends", " field. Base classes are provided in a pop-up context-sensitive menu. To edit the ", "Extends", " field, right-click the field.", "If ", "Edit Value", " is selected, a personalised base class can be entered, but the base class entered must be defined in Java code and must itself extend a type base class.", "To", " edit documentation, right-click on that field, select ", "Edit Documentation", " and type the documentation into the editing window that appears.", "The label associated with the ", "Documentation", " field can also be edited. To edit this label, right-click on it, select ", "Edit Name", ", and type in the new label for the ", "Documentation", " field. The new documentation label will be displayed as a ", "Doc: ", " (documentation) option. If a space is entered before the label, the ", "Doc:", " prefix and the space will be omitted from the label.", "To ", "edit the constructor of a type, right-click on the ", "Constructor", " field to pop up a menu, then select ", "Edit Constructor", ". This opens a Code Editor window in which the text of the constructor can be edited.", "Instead of hard-coding the name of the constructor into the text, the word ", "<<Type>>", " can be used as a place-holder.", "Type definitions can contain Java code", ". The JDE browser provides support for manipulation of the following Java constructs:", "Java code", " and declarations outside of JACK Agent Language constructs that would normally appear as part of a type definition are placed in the Java sub-folder of the type definition folder.", "To change the Java code's package:", "Any element can be made external by prefixing the package name with a hyphen, which then displays the ", "Make External", " dialog. This has a similar effect to that of adding an entity to the ", "External Classes", " folder except that the latter only refers to Java classes. By prefixing the package with a hyphen, a reference to the entity is effectively imported.", "Use the ", "Implements", " folder to declare interfaces that the type definition implements. Right-click on the ", "Implements", " folder and select ", "Add New Interface", ". In the text box that appears type the name of the interface that this type definition implements and press ", "ENTER", " or ", "RETURN", ".", "Figure 7-4: ", "Add New Interface", " in the ", "Implements", " folder", "The ", "implements", " keyword does not need to be supplied as it is automatically inserted when JACK code is generated.", "To edit the name of an interface, right-click on the interface and select ", "Edit Value", ". In the text box that appears type the new name of the interface and press ", "ENTER", " or ", "RETURN", ".", "To remove an interface from the project, right-click on the interface and select the ", "Remove", " option.", "Figure 7-5: ", "Editing an Interface", "Use", " this folder to declare any imports that are required for the type definition. This will be needed if classes from another package have been used in Java code added to the type definition in the ", "Other Code", " folder.", "Right-click on the ", "Imports", " folder and select ", "Add New Import", ". In the text box that appears type the full package path of the class that this type definition needs to import and press ", "ENTER", " or ", "RETURN", ". The ", "import", " keyword does not need to be supplied as it is automatically inserted when JACK code is generated.", "To edit the name of an import, right-click on the import and select ", "Edit Value", ". In the text box that appears type the new name of the declaration and press ", "ENTER", " or ", "RETURN", ".", "To remove an import from the project, right-click on the declaration and select the ", "Remove", " option.", "The following figure shows the pop-up menu that you get by right-clicking on an existing declaration in the ", "Imports", " folder.", "Figure 7-6: ", "Editing an import declaration", "To", " add members and methods to a type definition use the ", "Other Code", " folder", " of the type definition. Use this folder to add methods or members to the type. Right-click on the ", "Other Code", " folder and select ", "Add New Code", ". This opens a new editing window.", "Each of these code blocks can be named using the ", "Edit Name", " option obtained by right-clicking on the field in question. This name is only for reference, and appears in a comment above the generated code.", "To edit a given code block, right-click on the item and select the ", "Edit", " option.", "To remove a code block from the project, ", "right-click on the item and select the ", "Remove", " option.", "One entity can refer to another type of entity if it contains a reference to that entity. These references usually map to JACK declarations such as ", "#handles MyEvent", " or ", "#uses MyPlan", ". These references can be made in the JDE by using the JACK Design Tool, or by a drag-and-drop method in the JDE browser as described below.", "The JDE browser ", "supports the following operations for references.", "To ", "add a type definition reference, drag the relevant JDE browser entity and drop it onto the target folder", ".", "For example, to add a new plan reference to an agent type definition, drag the relevant plan from the ", "Plan Types", " folder and drop it on the agent type defintion's ", "Plans", " folder. This creates a plan reference from the agent type definition back to the plan that was dragged into the target folder.", "The icons that indicate whether or not an operation is allowed are described in the ", "Overview", " section of this manual.", "To", " edit the reference name (if present):", "To", " edit a referenced type definition, right-click on the reference and select the ", "Edit", " option. This opens a new window offering an editable view of the actual type definition. Any changes made here are changes to the original type definition and affect all references to that type definition.", "To", " remove a reference from a type definition, right-click on the reference and select the ", "Remove", " option. This will remove the reference from the type definition. The type definition that was being referenced is untouched.", "To change an event reference posting type, click on the arrow beside the event reference icon to expand the tree below the reference (or double-click on the event reference). Then right-click on the ", "Attrib:", " (attributes) field to obtain a pop-up menu of choices. Select either ", "handles", ", ", "posts", " or ", "sends", " to indicate the posting type.", "The", " JDE browser supports the following operations for naming element references.", "To", " add a naming element reference to a type definition, drag the naming element to the target folder in the type definition. For example, to add a data naming element reference to a capability, one would drag the required data naming element from the ", "Named Data", " folder to the target ", "Belief Data", " folder within the capability type definition. This would cause the reference to appear in the ", "Belief Data", " folder.", "As", " with other references, the original data naming element or role naming element can be opened and edited by right-clicking on the reference and selecting the ", "Edit", " option.", "To", " remove a naming element reference from a type definition, right-click on the reference in the type definition and select the ", "Remove", " option.", "In some ", "cases the reference requires parameters. In such cases, right-clicking on the reference will display a menu which contains an ", "Add parameters", " option. Selecting this option will allow the user to add parameters to the reference.", "To ", "change the access mode (internal data) or status mode (external data) click on the arrow beside the data reference icon to expand the tree below the reference (or, equivalently, double-click on the reference). Right-clicking on the access or status fields displays a pop-up menu of choices. Select the appropriate access or status mode from the pop-up menu.", "Where", " the reference to a role naming element specifies that the team type will require subteams to perform a role on its behalf, the specification should include details of the maximum and minimum number of sub-teams required in the role. To edit the specification to add this information, right-click on the reference and select the ", "Add Specification", " option from the menu.", "The ", "Agent Model", " container", " is discussed in the ", "JDE browser: Agent Model", " chapter of this document.", "The ", "Data Model", " container", " is discussed in the ", "JDE browser: Data Model", " chapter of this document.", "The ", "Other Files", " folder", " can be considered to be an index of the data files and Java files required by a project. That is, the files themselves are stored external to the JDE, and the ", "Other Files", " folder contains references to the files, which are displayed as path names.", "While the JDE provides support for the creation and modification of files referenced in this folder, it is anticipated that other development environments might be utilised for this aspect of project development.", "Right-clicking on the ", "Other Files", " folder elicits the ", "Other Files", " options menu.", "The ", "Edit Label", " and ", "Add Nested Container", " selections are common to all folders and are described in generic terms in the ", "General functions", " section of this chapter.", "The ", "Add New File", " selection", " results in the creation of an editor window for entering the new file. Note that the label is initially unnamed \u2013 this will be modified when the the edited file is saved. Use of the default editor is described in the", " ", "Code Editor", " chapter of this document.", "The ", "Import File", " selection", " creates a reference to an existing file. It uses your system's file chooser to select the file to be imported.", "Right-clicking", " on a file in the ", "Other Files", " folder, results in the appearance of the following menu:", "Figure 7-7: ", "Other Files", " definition menu", "The ", "Add New File", " and ", "Import File", " selections behave in the same way as the corresponding selections in the ", "Other Files", " folder. The ", "Edit", " option behaves similarly to the ", "Add New File", " selection, except that when the editor window is created, it contains the specified file.", "The ", "Remove", " option removes the label from the folder. Note that the file itself is not deleted \u2013 if this is desired, it must be done externally of the JDE.", "The ", "Reload", " option", " provides the option of reverting to the last saved version or the original version of the file.", "Right-clicking", " on the ", "Agent Types", " folder results in the following menu:", "Figure 8-1: ", "Agent Types", " folder options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking on an agent type", " definition results in the appearance of the following menu:", "Figure 8-2: ", "Agent type definition options menu", "The operations embodied in the menu choices are common to all agent type", " definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "Extends", ", ", "Documentation", " and ", "Constructor", " fields", " of an agent type ", "definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field.", "These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Agent type definitions", " may contain Java code. The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "An agent type ", "definition", " can contain references to the following type definitions:", "The JDE browser supports the following operations on the above references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "An agent type ", "definition can contain references to data naming elements.", "The JDE browser supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on the ", "Capability Types", " folder results in the appearance of the Capability types options menu.", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a capability type definition results in the appearance of the Capability types definition options menu.", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "Extends", " and ", "Documentation", " fields", " of a capability type ", "definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field.", "These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Capability type ", "definitions may contain Java code. The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A capability type ", "definition can contain references to the following type definitions:", "The JDE browser supports the following operations on the above references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The JDE browser", " supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on the ", "Plan Types", " folder results in the appearance of the Plan types options menu.", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a plan type definition results in the appearance of the Plan types definition options menu.", "Apart from the ", "Edit Graphically", " option, the operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter. The ", "Edit Graphically", " option allows the user to access the Graphical Plan Editor to edit the plan.", "The Graphical Plan Editor is described in detail in the ", "Graphical Plan Editor Manual", ".", "The", " ", "Extends", " and ", "Documentation", " fields of a plan type definition", " can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Plan type", " definitions may contain Java code. The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A plan type", " definition can contain references to event type definitions. It can also contain references to its enclosing capabilities or agents \u2013 this is discussed in a later section.", "The following operations on event type definitions are supported within the JDE browser:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Note that since a plan can only ever handle one event, the semantics associated with the dropping of an event on the handles container is different to that associated with other containers. In particular, if the handles event reference already has an event associated with it, dropping another event on the event reference will cause the old event to be replaced with the new event.", "Also note that to explicitly remove a handles event reference, the menu selection is reset (there is no ", "Remove", " selection as with other references).", "The JDE browser", " supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Operations", " on plan selection and reasoning methods include the following:", "A JACK plan", " may contain a ", "relevant", " method. If present, it can be used to examine the actual event instance that attempts to invoke the plan in order to determine whether the plan is relevant for that event.", "When a new plan is created, a default ", "relevant", " method is provided. When JACK code is eventually generated for the plan, the default ", "relevant", " method looks something like the following:", "Consequently, by default the plan is relevant to every event instance that invokes it.", "The", " relevance method can be edited simply by double-clicking on it, or right-clicking on the method and selecting ", "Edit \"Relevance\"", " from the menu.", "This action opens an editing window that contains the method. The method can then be edited. The default relevant method only contains ", "return true;", ".", "Figure 8-3: ", "Editing the plan's relevance method", "The method prototype and braces do not need to be inserted into the definition since they will be automatically inserted into generated code. The actual ", "EventType", " and ", "reference", " that will be generated for the method prototype (if not already present) will be obtained from the ", "handles", " event reference. Consequently, any code added to this method is able to use the event reference name directly to examine the event.", "The", " ", "context", " method is used to determine whether the plan is applicable in the current context. It may involve using a number of logical statements and cursors to examine the beliefsets and other data that the agent has access to. Examining this data is analogous to checking the 'state of the world' or the context that the agent is in.", "The default ", "context", " method would look like this in a JACK plan:", "Note the absence of any type declaration for the method and the fact that there is no ", "return", " statement.", "The", " ", "context", " method can be edited simply by double-clicking on it or by right-clicking on the method and selecting ", "Edit Context", " ", "from the menu. This action opens an editing window for the method. The method can then be edited. The default ", "context", " method only contains ", "true;", ".", "Figure 8-4: ", "Editing the plan's context method", "The", " reasoning methods that define a plan must be added to the ", "Reasoning Methods", " folder of the plan concerned.", "A ", "body()", " reasoning method is automatically added when a new plan is created.", "Two other special reasoning methods are ", "pass()", " and ", "fail()", ". These can be added to allow explicit actions to be performed on plan success or failure.", "To", " define a reasoning method for use in a plan, right-click on the ", "Reasoning Methods", " folder and select ", "Add New Reasoning Method", ". This will add a new reasoning method to the ", "Reasoning Methods", " folder and allow a label to be entered for it. In addition, this action opens a text window into which the actual reasoning method should be entered. A JACK reasoning method normally begins with a", " ", "#reasoning method", " modifier. The ", "#reasoning method", " modifier should not be entered when working in the JDE. It is automatically added when the JACK code is generated. However, the method name and any parameters must be entered.", "The label is just a useful way of tagging each reasoning method. Normally the label is identical to the method name but it does not have to be.", "A new plan will have an empty implementation of the ", "body()", " method (with a label of body) that must be edited before the plan will do anything useful. After the body method has been edited, its icon will be rendered in colour rather than black and white to signify that it has been changed from the default. The default body method is simply:", "To ", "edit the label for a reasoning method:", "Figure 8-5: ", "Reasoning Methods", " pop-up menu", "To", " edit a reasoning method, right-click on the label and select the ", "Edit", " option. This opens a text window where the method can be edited.", "To", " remove a reasoning method from a plan, right-click on the reference and select the ", "Remove", " option. This will remove the reasoning method from the ", "Reasoning Methods", " folder", " and thus from the plan.", "To", " add an enclosing interface reference, drag an agent, team, or capability type definition, or a Java file (representing an interface) to the ", "Enclosing Interfaces", " folder", " of the plan.", "When a new enclosing interface reference is created in this manner, a default reference name will be assigned and automatically selected for editing. To change the name, type in a new name and press ", "ENTER", " when done. The reference name can be used to refer to the enclosing agent, team, capability or interface inside any plan reasoning method.", "As", " with other references, the original object can be opened and edited by right-clicking on the reference and selecting the ", "Edit", " option.", "To", " remove an enclosing interface reference from a plan, right-click on the reference and select the ", "Remove", " option. This will remove the reference from the plan, leaving the reference object untouched.", "Right-clicking", " on the ", "Event Types", " folder results in the appearance of the Event types options menu.", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on an event type definition results in the appearance of the Event types definition options menu.", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " ", "Extends", " and ", "Documentation", " fields of an event type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Event type definitions may contain Java code", ". The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " JDE browser supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter. Adding a reference is achieved using drag-and-drop; the permissible operations are summarised in the next section:", "To", " add a new field to an event:", "Note that the label that appears beside the event field is of the form ", "type:field-name", ".", "An event field can also be added by right-clicking on an existing ", "Event", " field and selecting ", "Add new field", ".", "To", " change the name of an event field, right-click on the event field icon", " and select", " ", "Edit name", ". Type in the new event field name and press ", "ENTER", ".", "Pressing the ", "ESCAPE", " key at any point during this editing operation will abort the operation and cause the name to revert to its previous state.", "To", " change the event field type, click on the icon adjacent to the event field icon", " to expand the tree below the event field. Right-clicking on the type attribute elicits a pop-up menu, at which point the user can either select the type they would like for the event field, or select ", "Edit Value", " to specify their own.", "Figure 8-6: ", "Event field type menu", "To", " remove an event field, right-click on the event field icon and select the ", "Remove", " option.", "To", " add a new posting method, right-click on the ", "Posting Methods", " folder and select ", "Add New Posting Method", ". Alternatively, the user can right-click on an existing posting method and select ", "Add New Posting Method", ". A new posting method will appear in the ", "Posting Methods", " folder denoted by the icon illustrated below.", "Figure 8-7: ", "Posting method icon", "If an external text editor has not been specified in the JDE preferences, a Code Editor window", " will appear into which the text of the", " posting method can be entered. When the text of the posting method has been entered, click the ", "Done", " button", ", and then type the posting method's name into the text box that is adjacent to the posting method icon. If no name is entered, the JDE will name the posting method with the first few characters of the text that was typed into the Code Editor window.", "To", " change the name of a posting method:", "To", " edit a posting method, right-click on the posting method's icon and select ", "Edit Object", ". This will open an editor window containing the existing code for the posting method.", "To", " remove a posting method from an event, right-click on the posting method and select the ", "Remove", " option.", "JACK", " allows a set of conditions to be specified (which can refer to any belief data and any fields of the event) that will cause the event to be automatically posted when any of the conditions becomes true. The conditions are essentially normal JACK logical expressions, i.e. they are composed of booleans and/or cursors.", "In JACK they are specified as follows:", "and", "To", " add an autoposting condition to an event, right-click on the ", "AutoPosting Conditions", " folder and select the ", "Add New Condition", " menu item. A new autoposting condition will appear in the ", "Posting Methods", " folder", " denoted by the icon illustrated below.", "Figure 8-8: ", "Autoposting condition icon", "If an external text editor has not been specified in the JDE preferences, a Code Editor window into which the text of the autoposting condition can be entered will appear. When the text of the autoposting condition has been entered, click on the ", "Done", " button ", "and then type the condition's name into the text box that is adjacent to its icon. If a name is not entered, the JDE will name the condition with the first few characters of the text that were typed into the Code Editor", " window.", "To", " change the name of an autoposting condition", ":", "To ", "edit the autoposting condition, right-click on the autoposting condition icon and select ", "Edit Object", ". This will open a Code Editor window containing the existing code for the autoposting condition.", "To", " remove an autoposting condition from an event, right-click on the autoposting condition and select the ", "Remove", " option.", "Right-clicking", " on the ", "Named Data", " folder results in the appearance of the Named data options menu.", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "When the user is creating a data naming element, the pop-up window requests a type, rather than a package name.", "Right-clicking on a", " data naming element results in the appearance of the Data naming element menu. The operations embodied in the menu choices are common to all naming elements and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "When the user is editing the data naming element's details the pop-up window displays a type for modification (when the user edits a type definition, a package name is displayed for modification).", "The ", "Documentation", " field of a data naming element can be modified via a pop-up menu which is generated by right-clicking on the appropriate field. This operation is described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on the ", "Team Types", " folder results in the appearance of the following menu:", "Figure 8-9: ", "Team types options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a team type definition results in the appearance of the following menu:", "Figure 8-10: ", "Team types definition options menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " ", "Extends", ", ", "Documentation", " and ", "Constructor", " fields of a team type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Team type definitions may contain Java code", ". The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A team type definition can contain references to the following type definitions:", "The JDE browser supports the following operations which are applicable to all of the above references:", "All of the above operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " JDE browser supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A team type definition", " may also contain references to role type definitions", " via ", "role naming elements (for ", "#requires", " relationships).", "The JDE browser supports the following operations on role naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on the ", "TeamPlan Types", " folder results in the appearance of the following menu:", "Figure 8-11: ", "Teamplan types options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a teamplan type definition results in the appearance of the following menu:", "Figure 8-12: ", "Teamplan types definition options menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " ", "Extends", " and ", "Documentation", " fields of a teamplan type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field.", "These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Teamplan type definitions may contain Java code", ". The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the the ", "General functions", " section of the ", "JDE browser", " chapter.", "A teamplan type definition", " can contain references to event type definitions ", "and role type definitions", ". (It can also contain references to its enclosing capabilities or team \u2013 this is discussed in a later section).", "When a teamplan is defined in the JDE, a default ", "establish()", " method is generated for the teamplan. This calls ", "defaultEstablish()", " which fills the required roles at random, if possible.", "The following operations on event type and role type definition references contained in a teamplan type definition are supported by the JDE browser:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter. In addition, support is provided for defining the applicability type of a role reference.", "To define the applicability of a role usage (", "applicable for", " or ", "applicable from", "), click on the icon beside the role reference to expand the tree below (or alternatively, double-click on the reference). Right-clicking on the ", "Attribute", " field will result in a pop-up menu of choices for the applicability type of the role reference. Select the required applicability type.", "Note that since a teamplan can only ever handle one event, the semantics associated with the dropping of an event on the handles container is different to that associated with other containers. In particular, if the handles event reference already has an event associated with it, dropping another event on the event reference will cause the old event to be replaced with the new event. Also note that to explicitly remove a handles event reference, the menu selection is reset (there is no remove selection as with other references). These comments also apply to the dropping of a role on the ", "applicable for", " container.", "The JDE browser ", "supports the following operations on naming element references contained in a teamplan type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter. In addition, support is provided for:", "To edit the specification for the role usage declaration, right-click on the reference and select ", "Edit Specification", " from the pop-up menu.", "To define the type of role usage (uses or requires):", "Operations", " on teamplan selection and reasoning methods are the same as those for plan types", ". The only difference is that teamplans may also include an ", "establish()", " reasoning method that defines how the task team is to be established.", "Teamplan", " enclosing interfaces are the same as for plans.", "Right-clicking", " on the ", "Role Types", " folder results in the appearance of the following menu:", "Figure 8-13: ", "Role types options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a role type definition results in the appearance of the following menu:", "Figure 8-14: ", "Role types definition menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " ", "Extends", " and ", "Documentation", " fields of a role type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Role type definitions may contain Java code", ". The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A role type definition ", "can contain references to event type definitions.", "The JDE browser supports the following operations on event type definition references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " JDE browser supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The JACK Compiler", " generates two classes from a role definition. The first class is the ", "RoleType", ". The second generated class is a specialised container for instances of the ", "RoleType", " called ", "RoleTypeContainer", ". This latter class is used in teams and teamplans to group the performers of a role. The generated ", "RoleTypeContainer", " class extends a base class named ", "RoleContainer", ". This base class provides a number of useful methods for inspecting the container and accessing the role performers. Additional methods and members that are to be added to the derived container class are defined within the role type definition and can be added to the role type definition using the JDE browser. The process is described below.", "To", " add", " a new member to a role type definition:", "Figure 8-15: ", "New role type container member", "Right-clicking on the type attribute results in the ", "Edit Value", " menu", " being displayed.", "To change the type select the appropriate choice from this menu. The ", "Add New Member", " option", " is also available from the menu that is obtained by right-clicking on an existing member.", "Figure 8-16: ", "Role type ", "Edit Value", " menu", "To edit", " the name of an existing member, right-click on the member and select the ", "Edit Name", " option from the resulting menu.", "To remove", " a member, right-click on the member and select the ", "Remove", " option from the resulting menu.", "To", " add a new container method, right-click on the ", "Container Methods", " folder and select ", "Add New Method", " from the resulting menu. This will result in the creation of an editor window (for entering the method) and an edit box in the ", "Container Methods", " folder (for specifying a label for the method). Note that the method label is distinct from the method name. The label can be (and is normally) set by the user to the method name, but it can also be set to any other string.", "To", " edit the label of an existing method, right-click on the method label and select the ", "Edit Name", " option from the resulting menu.", "To", " edit an existing method:", "To", " remove a method, right-click on the method label and select the ", "Remove", " option from the ensuing menu.", "Right-clicking", " on the ", "Named Roles", " folder results in the appearance of the following menu:", "Figure 8-17: ", "Named roles options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "When the user is creating a role naming element, the pop-up window requests a role type (when the user creates a type definition, a package name is requested).", "Right-clicking", " on a role naming element results in the appearance of the following menu:", "Figure 8-18: ", "Role naming element options menu", "The operations embodied in the menu choices are common to all naming elements and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "When the user is editing the role naming element's details, the pop-up window requests a type for modification, rather than a package name.", "The", " documentation field of a role naming element can be modified via a pop-up menu which is generated by right-clicking on the", " ", "Documentation", " field. This operation is described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on the ", "BeliefSet Types", " folder results in the appearance of the following menu:", "Figure 9-1: ", "Beliefset types options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking on a beliefset type", " definition results in the appearance of the following menu:", "Figure 9-2: ", "Beliefset types definition menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "Extends", " and ", "Documentation", " fields", " of a beliefset type definition", " can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "In Teams mode, a beliefset type will contain a ", "Propagation", " field. To edit the ", "Propagation", " field", " of a beliefset type", ":", "Beliefset type definitions", " may contain Java code. The JDE browser", " supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A beliefset type definition can contain references to event type definitions. The JDE browser supports the following operations on event type definitions contained in a beliefset type definition:", "The operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "To", " add a new field to a beliefset type definition, right-click on the ", "Fields", " folder and select ", "Add New Field", ". A ", "Beliefset", " field will appear in the folder.", "Figure 9-3: ", "Beliefset field icon", "Figure 9-4: ", "Adding a new field to a beliefset", "The label that appears beside the beliefset field is of the form ", "key type: field-name", ". The ", "key", " portion is present if the field is a key field.", "Figure 9-5: ", "Beliefset field labels", "A beliefset field can also be added by right-clicking on an existing beliefset field and selecting ", "Add New Field", ".", "Figure 9-6: ", "Beliefset field label pop-up menu", "To change", " the name of a beliefset field:", "To change", " the beliefset field type, expand the tree below the beliefset field. Right-clicking on the type attribute pops up a menu, at which point the user can either select a type for the beliefset field", ", or select ", "Edit Value", " to specify their own unique value.", "Figure 9-7: ", "Beliefset field type menu", "To change", " the beliefset field ", "Is Key", " value,expand the tree below the beliefset field. Right-clicking on the ", "Is Key", " attribute pops up a menu, and the user can then select either ", "True", " or ", "False", ".", "Figure 9-8: ", "Beliefset field Is Key menu", "To remove", " a beliefset field, right-click on the Beliefset Field icon and select the ", "Remove", " option.", "To add", " a new simple query", " to a beliefset: ", "Figure 9-9: ", "Simple Query icon", "Figure 9-10: ", "Adding a new simple query to a beliefset", "The label that appears beside the simple query is of the form ", "indexed query_name()", ", where query_name is the name that was entered. The parentheses will be filled out when the output fields", " for the query are entered.", "Figure 9-11: ", "New simple query", "A simple query", " can also be added by right-clicking on an existing simple query and selecting ", "Add New Query", ".", "Figure 9-12: ", "Simple Query label pop-up menu", "To change", " the name of a simple query:", "To", " remove a simple query, right-click on the query and select the ", "Remove", " option.", "To change the query type, expand the tree below the simple query. Right-clicking on the ", "Query Type", " attribute pops up the menu, at which point the user can select either ", "indexed", " or ", "linear", ". Generally, you should use indexed query methods because they provide faster access.", "Figure 9-13: ", "Query type pop-up menu", "To ", "define what is returned as the result of a query you must define the output fields", " for the query. To do this, simply drag fields from the ", "Fields", " folder of the beliefset and drop them on the ", "Output Fields", " target folder of the query.", "To ", "remove an output field, right-click on an output field and select the ", "Remove", " option.", "Figure 9-14: ", "Removing an output field", "To add", " a new complex", " or function query", " to a beliefset:", "Figure 9-15: ", "Complex Query icon", "Figure 9-16: ", "Adding a new Complex Query to a beliefset", "The label that appears beside the complex query", " is of the form ", "complex query_name", ", where query_name is the name that was entered.", "Figure 9-17: ", "New Complex Query", "A complex query can also be added by right-clicking on an existing complex query and selecting ", "Add New Complex Query", ".", "Figure 9-18: ", "Complex Query label pop-up menu", "To", " change the name of a complex query:", "To", " remove a complex query, right-click on the query and select the ", "Remove", " option.", "To", " change the query type, expand the tree below the complex query. Right-clicking on the ", "Query Type", " attribute pops up the menu, at which point the user can select either ", "function", " or ", "complex", ".", "Figure 9-19: ", "Complex Query Type", " pop-up menu", "Adding", " a complex query definition requires adding code using the Code Editor window", " that appears when the query is double-clicked or the ", "Edit", " option is selected from the pop-up menu. The code entered as the definition of the complex query is copied directly into the generated code. This includes the method name, its parameters and any return value.", "Right-clicking", " on the ", "View Types", " folder results in the appearance of the following menu:", "Figure 9-20: ", "View types options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a view type definition results in the appearance of the following menu:", "Figure 9-21: ", "View types definition menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "Extends", " and ", "Documentation", " fields", " ", "of a view type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field. These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "View type definitions", " may contain Java code", ". The JDE browser", " supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "A view type definition ", "can contain references to:", "via data naming elements.", "The JDE browser", " supports the following operations on data naming element references:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "To add a new complex or function query to a View type definition:", "Figure 9-22: ", "Add New Complex Query", " to a view", "The label ", "Complex", " appears beside the query.", "A complex query", " can also be added by right-clicking on an existing complex query and selecting ", "Add New Complex Query", ".", "Figure 9-23: ", "Complex query label pop-up menu", "To change", " the name of a complex query:", "To remove", " a complex query, right-click on the query and select ", "Remove", ".", "To change", " the query type:", "Figure 9-24: ", "Complex query type pop-up menu", "Adding", " a complex query", " definition requires adding code using the Code Editor window ", "that appears when the query is double-clicked or ", "Edit", " is selected from the pop-up menu. The code entered as the definition of the query is copied directly into the generated code. This includes the method name, its parameters and any return value.", "Figure 9-25: ", "Complex query definition menu", "Figure 9-26: ", "Teamdata types options menu", "Right-clicking", " on the ", "TeamData Types", " folder results in the appearance of the menu above.", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right-clicking", " on a teamdata type definition results in the appearance of the following menu:", "Figure 9-27: ", "Teamdata types definition menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The", " ", "Extends", ", ", "Documentation", ", ", "Connection", " and ", "Synthesis", " fields of a teamdata type definition can be modified via pop-up menus which are generated by right-clicking on the appropriate field.", "These operations are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Teamdata type", " definitions may contain Java code. The JDE browser supports the following operations on Java code within a type definition:", "These operations are described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "External Classes", " folder gives the user the ability to import classes defined outside the project.", "Right-clicking", " on the ", "External Classes", " folder results in the appearance of the following menu:", "Figure 9-28: ", "External class options menu", "The operations embodied in the menu choices are common to all folders and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "Right", " clicking on an external class entry results in the appearance of the following menu:", "Figure 9-29: ", "External class entry options menu", "The operations embodied in the menu choices are common to all type definitions and are described in generic terms in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The ", "Documentation", " field of the external class definition can be modified via a pop up menu which is generated by right-clicking on the ", "Documentation", " field", ". This operation is described in the ", "General functions", " section of the ", "JDE browser", " chapter.", "The package", " of the external class can be specified in the Java folder. This is achieved by opening the folder, right-clicking on the ", "Package", " attribute and editing the value. Note that for external classes the package name should be prefixed with a hyphen.", "The details of a project appear", " as the topmost item in the project window", ".", "Figure 10-1: ", "Project window", "The ", "Project Name", " corresponds to the project file for the project. For example, if the name of a project is ", "example", " the project file will be ", "example.prj", ". To edit the name, right-click on that field, select ", "Edit Name", " and enter the new name.", "Figure 10-2: ", "Editing the Project Name", "To edit the project documentation, right-click on the ", "Documentation", " field and type the documentation into the Code Editor window that appears. The label for this field can be changed by right-clicking on the field, selecting ", "Edit Name", ", and typing in a new label. The field then appears as the ", "Doc:", " option. If a space before the label is entered, the ", "Doc:", " prefix and the space will be omitted from the label.", "Figure 10-3: ", "Project ", "Documentation", " field", "The ", "Root Package", " is the top-level Java package that all project components belong to. If the ", "Root Package", " of the project is edited, the JDE will warn that the package name must match the directory structure. If it does not, the application may fail to compile. Any Java files affected by this change will have to have their package statement edited manually, with either the Code Editor or an external text editor.", "Figure 10-4: ", "Editing the ", "Root Package", "G-Code is the graphical file format used by the JDE and is stored in the ", "Save-folder", ". Right-click on the field to edit it, select ", "Edit Value", " and enter the new value into the text box. Because the G-Code will be moved as a result of this change, the JDE pops up a confirmation dialog box.", "Figure 10-5: ", "Editing the ", "Save-folder", "This is where the JDE will generate the JACK files representing the components of the project. Right-click on this field and select ", "Edit Value", " to edit it.", "Figure 10-6: ", "Editing the ", "Generated JACK Sub-folder", " field", "This is where the JACK compiler stores the Java files generated while compiling the JACK files. Right-click on this field and select ", "Edit Value", " to edit it.", "Figure 10-7: ", "Editing the ", "Generated Java Sub-folder", " field", "This is where the Java compiler stores the class files generated from the Java files. Right-click on this field and select ", "Edit Value", " to edit it.", "Figure 10-8: ", "Editing the ", "Generated Class Sub-folder", " field", "The JDE provides numerous keyboard shortcuts for the user. These are categorised (according to location) and listed below in the following tables.", "Table A-1:", " Macintosh shortcuts on the ", "JACK Developer", " menu", "Table A-2:", " Shortcuts located on the ", "File", " menu", "Table A-3:", " Shortcuts located in the ", "Edit", " menu", "Table A-4:", " Shortcuts located on the ", "Entity", " menu", "Table A-5:", " Shortcuts located on the ", "Trace", " menu", "Table A-6:", " Shortcuts located in the ", "Tools", " menu", "Table A-7:", " Macintosh shortcuts on the ", "JACK Developer", " menu", "Table A-8:", " Keyboard shortcuts sorted by function", "JACK files can be generated from the command line without having to start the JDE. The command line is as follows:", "The command line options are described in the following table:", "Table B-1:", " Command line options", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.\n", "\nLink to", "Non-frame version.", "\n\n\n", "Copyright \u00a9  2002-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "The", " Graphical Plan Editor (GPE) is designed for graphically viewing and editing JACK Intelligent Agents\u00ae  (JACK) plans. The GPE is integrated with the ", "Development Environment", " (JDE). Plans edited with the GPE may be compiled with the JACK Compiler Utility and traced with the JACK Plan Tracing Tool.", "The GPE allows users to view and edit all the details of a plan in separate panels. The panels of the GPE can be displayed or hidden, depending on what a user needs to view while editing each plan. The window that contains these panels is called the ", "Graphical Plan Editor window", ".", "The GPE emphasizes the use of documentation in plans. Plan documentation assists users when creating and understanding plans. Separate documentation sections are included in the GPE for each relevant detail. Plan documentation, resources, variables, conditions and graphs may be edited in the GPE. The reasoning methods of a plan can be represented graphically in the GPE as directed graphs \u2013 the Plan Graph Editor is provided for this purpose. However, textual reasoning methods as well as graphical reasoning methods are allowed in plans developed using the JDE. Experience has shown that plans created with the GPE are easier to present to, and are more easily understood by, non-programmers and subject-matter experts because of their graphical nature.", "This document describes the GPE and the Plan Graph Editor. These descriptions are applicable to both plans and teamplans.", "When a plan is edited using the GPE, the title bar will display ", "Plan:", " followed by the name of the plan that is currently being edited. When a plan reasoning method is opened using the Plan Graph Editor, the title bar will display ", "Graphs:", " followed by the name of the plan.", "When a teamplan is edited using the GPE, the title bar of the GPE will display ", "Team Plan:", " followed by the name of the teamplan that is currently being edited. When a teamplan reasoning method is opened using the Plan Graph Editor, the title bar of the Plan Graph window will display ", "Team Graphs:", " followed by the name of the plan.", "Note that a teamplan cannot be opened with the GPE in Agent Mode, as teamplans are not visible within the JDE browser unless Teams Mode is active. Teams Mode can be toggled on or off by clicking the ", "Teams Mode", " option in the ", "View", " menu of the JDE.", "The instructions in this document are written with the expectation that the reader will be a PC user, but they are generally applicable to both Macintosh and Unix users. However, in some cases the instructions will be slightly different for Macintosh users. ", " ", "Macintosh users should note the following:", "Unix users should note:", "The screenshots used in the document were generated from a Macintosh; this was for readability purposes only.", "This manual provides instructions for using the GPE to edit components of Graphical Plans and Graphical Reasoning Methods. It begins with a brief description of Graphical Plans and their features. Creating and opening graphical plans within the JDE is also described.", "Instructions for editing graphical reasoning methods are outlined and include details of the types, categories and editors of nodes required for defining graphical plan logic. Management of Graphical Plans, including printing and exporting is also covered. The manual concludes with a description of the graphical plan and font preferences that affect the GPE.", "Graphical plans have the same components as regular JACK plans with the addition of ", "graphical reasoning methods", ". Graphical reasoning methods allow the user to construct the logic of a plan graphically. Reasoning method statements are represented with nodes, which are created from the node types provided in the Plan Editor Palette. The nodes are connected with links to designate control flow.", "Graphical", " plans have ", "body", ", ", "pass", " and ", "fail", " reasoning methods by default. Plan ", "execution starts and finishes in the ", "body", " method. ", "Pass", " and ", "fail", " methods are used if any actions are required after plan success or failure. Other graphical reasoning methods may be added, and they may be renamed to replace default graphical reasoning methods.", "A new plan can be created in the JDE from either the ", "Plan Types", " folder or a design within the current project. Refer to the ", "Design Tool Manual", " for more information on designs. Once a plan has been created, a GPE window can be opened for the plan.", "The GPE is used to edit plans that have already been created from within the JDE. A separate GPE window is shown for each plan that is edited. Likewise, the Plan Graph Editor is used to edit graphical reasoning methods that have already been created for a plan from within the GPE. The Plan Graph Editor window provides access to all the graphical reasoning methods of the associated plan.", "To open", " the GPE, follow the steps below.", "Figure 4-1: ", "An open Graphical Plan Editor window", "The Plan Graph Editor", " can either be opened from the GPE or directly from the Reasoning Methods folder of the JDE. In the former case, open the GPE according to the instructions above. Then select/create the reasoning method to be edited from the ", "Graphs List", " and right-click the ", "Edit Graph", " button.", "To open the Plan Graph Editor directly from the JDE:", "In either case a window like the following will be displayed. In the example below, the ", "Plan Graph", " canvas is empty, as we are dealing with a newly created reasoning method.", "Figure 4-2: ", "Plan Graph Editor window ", "The documentation", ", resources and conditions (excluding conditions documentation) of a plan can be edited in both the JDE and the GPE. When one of these components is edited in the JDE or GPE, it is automatically updated in the other window. For example, if a new sentence was added to the plan documentation in the GPE, it would also appear in the plan documentation in the JDE browser.", "Once", " a plan has been edited in the GPE, it may still be edited in the JDE. However, not all components of graphically edited plans can be edited in the JDE. For example, the variables and graphical reasoning methods (including documentation, variables and parameters) of plans must be edited in the GPE. Plan conditions may be edited in the JDE, although conditions documentation is not visible.", "If a plan has existing ", "body", ", ", "pass", " or ", "fail", " textual reasoning methods, and is opened in the GPE, a ", "Subgraph/textual method conflict", " will occur. The user can choose to rename an existing textual reasoning method and create a new graphical reasoning method, or leave the original name as is.", "Plans created and/or edited using the GPE cannot be edited with the JDE alone. They require editing with the GPE because they have graphical reasoning methods.", "Graphical plans are edited in GPE windows. A GPE window", " contains buttons for printing and exporting plans as well as the following panels for editing plan attributes:", "When a GPE window first appears, only the ", "Documentation", " and ", "Graphs List", " panels are displayed.", "The toolbar of a GPE window has checkboxes with names corresponding to the above plan attributes which can be used to display or hide the panels. Panels are displayed or hidden by clicking on the checkbox or panel name. The GPE window grows and shrinks according to the panels that are displayed.", "Note that the GPE only maintains a list of the graphical reasoning methods required by the plan. The actual content of these reasoning methods is specified and edited in the Plan Graph Editor.", "The ", "Documentation", " panel", " of the GPE displays plan documentation as editable text. This panel is displayed by default. ", "Documentation", " panel text may be ", "edited in:", "Figure 5-1: ", "Documentation", " panel ", "When a ", "new plan is created, the documentation text section in the ", "Add Plan Type", " dialog window allows plan documentation to be added.", "To add", ", edit", " or delete", " plan documentation:", "The", " ", "Resources", " panel of the GPE displays the resources used by a plan. These resources are the same as those shown under the plan name in the JDE Browser. The ", "Resources", " panel can be used to add, edit and delete plan resources in the same way as the JDE browser. The ", "Resources", " panel is, in effect, a way that the user can see which JACK elements the plan is associated with, without needing to look at the JDE browser.", "Figure 5-2: ", "Resources", " panel", "To display the plan resources, click the ", "Resources", " checkbox.", "To add", " a resource:", "To edit", " a plan resource name:", "To edit", " a plan resource:", "The ", "Variables", " panel of the GPE displays a sortable list of plan variables", ". Variables declared in the ", "Variables", " panel of the GPE window are global to the plan. Each variable has the following fields:", "As well as a list of plan variables, the ", "Variables", " panel also has ", "Delete", " and ", "Add", " buttons for adding", " and deleting", " variables. Variables may be sorted", " by clicking on a field heading. Variables must have a ", "name", " and ", "type", ", but the ", "Value", " and ", "Documentation", " fields are optional. Note that the GPE does not validate variable names, types or values.", "Figure 5-3: ", "Variables", " panel", "To add a variable with plan scope:", "To edit", " the ", "Type", ", ", "Name", ", ", "Value", " or ", "Documentation", " fields of a variable:", "To delete", " a variable:", "Note that variables can only be deleted one at a time.", "To sort", " the list of plan variables by a field, click a field heading using the mouse. The list of variables will be sorted according to that field.", "The ", "Conditions", " panel", " of the GPE displays the conditions for plan execution.", "The following sections are displayed as editable text:", "Figure 5-4: ", "Conditions", " panel", "An ", "Available Variables", " list", " is also displayed. This is a list of alphabetically sorted variable names", " and types", ". These variables may be inserted", " into text areas in the ", "Conditions", " panel by clicking on one of the arrows to the left of the list. The ", "Available Variables", " list in the ", "Conditions", " panel includes plan variables", ", events", ", interfaces", " and belief data", ".", "Once a variable name is inserted into an editable text area, the ", "name will not be automatically updated if changed in the GPE. A variable name is inserted as text, so if the variable changes, the name is updated in the ", "Available Variables", " list, but not in any text areas into which it has been inserted.", "To edit", " a plan condition, first display the ", "Conditions", " panel by selecting the ", "Conditions", " checkbox in the tool bar or by clicking the ", "Conditions", " name. The relevance and context conditions for the plan and their documentation can now be edited. Text in each of the corresponding text boxes can be cut, copied and pasted using the JDE ", "Edit", " menu or keyboard shortcuts.", "The relevance", " condition component is a text box that contains the plan's relevance condition. The relevance condition is a ", "static boolean", " method that is applied to an event instance for the purpose of determining whether or not the plan type is relevant for that event instance. The relevance condition text box should contain the definition of that method or be left empty. Documentation for the relevance condition is added ", "to the relevance documentation text box.", "The context ", "condition component is a text box that contains the plan's context condition. When a plan is relevant for handling an event, the context condition is used to determine the ways, if any, in which a plan type is applicable. The context condition text box should either contain a logical expression or be left empty. Documentation for the context condition is added ", "to the context documentation text box.", "The conditions panel of the GPE has an ", "Available Variables", " list", ". This list contains the names of plan variables", ", events", " and beliefsets", ". If appropriate, variable names from the list can be copied into the context condition and context conditions documentation text box.", "To copy a variable name ", ":", "The ", "Graphs List", " panel of the GPE displays a sortable list of graphical reasoning methods (graphs). This section contains instructions for creating, renaming and deleting graphs.", "Each graphical reasoning method has a ", "Name", " and ", "Documentation", " column. Below the list of graphical reasoning methods are the following buttons:", "Figure 5-5: ", "Graphs List", " panel", "To", " delete a graphical reasoning method:", "Figure 5-6: ", "Confirm Deletion of Graph", " dialog window", "To rename", " a graphical reasoning method:", "Figure 5-7: ", "Rename Subgraph", " dialog window", "To edit", " a graphical reasoning method:", "Alternatively, double-click the method name in the ", "Graphs List", ". The Plan Graph Editor window will open, displaying the selected method.", "See the ", "Editing Graphical Reasoning Methods", " chapter of this manual for instructions for the Plan Graph Editor.", "To create a graphical reasoning method", ":", "Figure 5-8: ", "Create new graphical reasoning method", "To sort", " the ", "Graphs List", ", click the ", "Name", " or the ", "Documentation", " heading of the ", "Graphs List", " in the ", "Graphs List", " panel. The ", "Graphs List", " will be sorted alphabetically according to the selected heading.", "Editing of the graphical reasoning methods (also known as graphs or plan graphs) for a plan is performed in a Plan Graph Editor window. The title bar of the Plan Graph Editor displays the name of the particular plan whose graphical reasoning methods are currently being edited. The name", " of the graphical reasoning method", " that is currently being edited is displayed in a drop-down list next to the ", "Plan Graph:", " option at the top of the Plan Graph Editor window. Clicking on the drop-down list displays a list of all the graphical reasoning methods for the plan. This allows the user to switch between the various graphical reasoning methods", " of a plan without needing to open and close each method separately.", "The Plan Graph Editor window contains a tool bar with a ", "Show Plan", " button and buttons to print and export graphical reasoning methods. The tool bar also provides access to the following panels:", "When the window first appears, only the ", "Plan Graphs", " panel is displayed.", "Figure 6-1: ", "Plan Graph Editor window", "To change the ", "current graphical reasoning method being edited:", "Figure 6-2: ", "Current graphical reasoning method", "This", " panel displays documentation for the current method as editable text. Graphical reasoning method documentation should give a description of the method. For example, documentation can include the actions in the method, names of other reasoning methods called in the method, and what the method does.", "Figure 6-3: ", "Documentation", " panel", "Documentation", " for graphical reasoning methods can only be added and edited in the Plan Graph Editor.", "The contents of the graphical reasoning method documentation may be added", ", edited", " or deleted", " in the ", "Documentation", " panel. Text may be cut, copied and pasted using the JDE ", "Edit", " menu or keyboard shortcuts.", "The ", "Variables", " panel of the Plan Graph Editor displays a sortable list of reasoning method variables", ". Variables declared in the ", "Variables", " panel of the Plan Graph Editor window are local to the reasoning method.", "Figure 6-4: ", "Variables", " panel", "To add", ", edit", ", delete", " or sort", " graphical reasoning method variables first open the ", "Variables", " panel in the Plan Graph Editor by clicking on the ", "Variables", " checkbox or ", "Variables", " name in the tool bar. Then follow the steps relevant to each feature listed below.", "To add", " a graphical reasoning method variable:", "To edit", " the ", "Type", ", ", "Name", ", ", "Value", " and ", "Documentation", " fields of a graphical reasoning method variable:", "To delete", " a graphical reasoning method variable click the ", "Delete", " button.", "To sort", " the list of graphical reasoning method variables by field, click the heading of the field to sort by. The list of graphical reasoning methods variables will be sorted in ascending order according to the field clicked.", "The ", "Parameters", " panel displays parameters", ". Parameters allow calling reasoning methods to pass arguments to the current reasoning method. The features of this panel are similar to the ", "Variables", " panel", " in the Plan Graph Editor window, except that the ", "Parameters", " panel does not have a ", "Value", " column.", "Figure 6-5: ", "Parameters", " panel", "To add", ", edit, delete or sort parameters, first select the ", "Parameters", " checkbox or click the ", "Parameters", " name to display the ", "Parameters", " panel.", "To add", " a parameter to a graphical reasoning method, click the ", "Add", " button. A new parameter with name ", "newVariable", " will be added. The new parameter has no type or documentation. If a parameter is previously selected, the new parameter is added below it.", "To edit", " the ", "Type", ", ", "Name", " and ", "Documentation", " fields of a parameter, click the relevant field. Type in the required changes, and click another field or press ", "ENTER", " to finish editing.", "To delete", " a parameter, select the parameter to be deleted. Click on the ", "Delete", " button, and repeat the process with any further parameters to be deleted, as parameters can only be deleted one at a time.", "To sort", " the list of parameters by a field, click a field heading. The list of parameters will be sorted in ascending order according to the field selected.", "Each Plan Graph Editor window has an exceptions panel. This panel allows the user to type in any ", "catch / finally", " statements as they would appear in Java code. The statements of the entire graph are then enclosed in a ", "try", " statement, with the text in this box handling any exceptions.", "The exceptions panel contains essentially all the exception handling code a user would write in normal textual code, except for the initial ", "try", " block. Note that depending on the type of exception the user is trying to catch, the body of the reasoning method may require code that actually throws that exception.", "Figure 6-6: ", "Exceptions", " panel", "The", " ", "Plan Graph", " panel of the Plan Graph Editor has a tool bar", " and a canvas", " on which the structure of a graphical reasoning method may be drawn. A graphical reasoning method is drawn as a directed graph. The nodes of the graph are created from the node type provided in the Plan Editor Palette. Links are then created between these nodes to indicate control flow.", "Figure 6-7: ", "Plan Graph", " panel", "Nodes", " may be added to a graphical reasoning method diagram in any order. When linking nodes, it is recommended that the flow of a graphical reasoning method be from top to bottom, to aid the viewer or designer of the method. Graphical reasoning methods must begin with one, and only one, ", "Start", " node. It is also recommended that ", "End", " nodes are added to show where the method finishes.", "The font of graph component text can be changed in the ", "Fonts", " preferences of the JDE. See the ", "Font preferences", " section of the ", "Editor preferences", " chapter of this manual for further information.", "Graph components can be edited or removed by right-clicking on the required node or link and selecting the required option. For example, after right-clicking on a node the options are ", "Edit Node...", " and ", "Remove Node", ".", "The Plan Graph Editor tool bar", " contains tools for editing and viewing a graphical reasoning method. To select a tool in the tool bar, choose the desired tool and click on the tool button. Certain tools cannot be selected at the same time: the Selection Mode tool and the Link Mode tool are examples of this. The Plan Graph Editor must be in either one mode or the other: it cannot be in both. Moving the mouse cursor over a particular tool on the tool bar", " elicits tool tips", ", which are floating text boxes providing descriptions of the relevant tool.", "The following tools and buttons are located on the tool bar:", "The ", " ", "Plan Editor Palette", " contains node types", " that can be dragged and dropped onto the Graph canvas", ". It may be opened either with the Open Plan Editor Palette button", " or by clicking on the ", "Plan Editor Palette", " option in the ", "Tools", " menu of the JDE", ".", "The ", "Plan Editor Palette", " for both Agent Mode and Teams Mode is illustrated below. Note that in Teams Mode, the ", "Plan Editor Palette", " has four additional nodes:", "These nodes can only be used in teamplans.", "Figure 6-8: ", "Plan Editor Palette", " in Agent Mode (left) and Teams Mode (right)", "Apart from the ", "Start", ", ", "End", " and ", "Fail", " nodes in the palette, a ", "node editor", " is opened automatically when a node is added to a graphical reasoning method. A node editor can also be opened by double-clicking on a node.", "A node editor", " has a short description of the node type", " and editable text areas for node documentation", " and each node argument", ". The number and types of arguments depend on the type of node being edited. An ", "Available Variables", " list is displayed if there are any plan or graphical reasoning method variables.", "Each node type has a different node editor. The text fields in a node editor change according to the arguments required by the node type. If a node type can represent two or more reasoning statements or if a reasoning statement has optional arguments, the node editor displays a drop-down ", "Node Type:", " options menu. This allows the user to select the required statement and/or combination of arguments.", "Each of the node editors consists of several text boxes into which relevant arguments and documentation etc. can be added and changed. The figure below displays the ", "Begin Parallel", " node editor.", "Figure 6-9: ", "Begin Parallel", " node editor", "The ", "Available Variables", " list ", " is a list of alphabetically sorted variable names", " and types", ". These variables may be inserted", " into text areas in the node editor by clicking on one of the arrows to the left of the list. The ", "Available Variables", " list", " in the node editor includes plan variables", ", events", ", interfaces", ", belief data", ", graphical reasoning method variables", " and parameters", ".", "Once a variable name is inserted into an editable text area, the ", "name will not be automatically updated if changed in the GPE. A variable name is inserted as text, so if the variable changes, the name is updated in the ", "Available Variables", " list, but not in any text areas into which it has been inserted.", "Each", " of the node types in the ", "Plan Editor Palette", " (with the exception of the ", "Note", " node) defines a step in a graphical reasoning method. The ", "Note", " node is used to add documentation to a node or group of nodes. The other node types may contain documentation and JACK / Java code. Some node types represent reasoning method statements.", "A node can reference variables that appear in the ", "Variables", " panel of the GPE window (which have plan scope) or in the ", "Variables", " panel of the reasoning method graph (which have reasoning method scope). If a variable is defined within a node (such as a ", "Code", " node) that variable has node scope and is not visible outside the node.", "The node types that are supported by the Plan Graph Editor and are accessible via the ", "Plan Editor Palette", " are listed below. Note that some nodes represent one or two kinds of reasoning method statements. Also, each node type contains documentation, but the documentation for ", "Start", ", ", "End", " and ", "Fail", " nodes is not displayed in Descriptive mode, and is only accessible by opening the node editor.", "The mapping between reasoning method statements and nodes is straightforward, except for ", "@parallel", " statements. Implementation of an ", "@parallel", " statement in a graphical reasoning method requires a combination of ", "Begin Parallel", ", ", "End Parallel", ", ", "Parallel Task", " nodes together with the nodes required to implement the parallel tasks. As an example, consider the following ", "@parallel", " statement:", "The corresponding subgraph is shown below:", "Figure 6-10: ", "Subgraph in Descriptive mode", "Figure 6-11: ", "Subgraph in Non-descriptive mode", "Nodes can be categorised according to the maximum number of outgoing links (0, 1 or 2). The following three categories are defined for reference purposes:", "Table 6-1: ", "Graphical Plan Editor Nodes", "Each", " node type has a different node editor. The text fields in a node editor change according to the arguments required by the node type. If a node type can represent either of two or more reasoning method statements, the node editor gives a choice between the two statements.", "The ", "Available Variables", " list", " in the node editor", " contains the names of plan variables", ", events", ", beliefsets", ", graphical reasoning method variables", " and parameters", ". Available variable names may be inserted into the documentation and arguments of a node.", "To insert a variable", ":", "Figure 6-12: ", "Node editor", "Within the Plan Graph Editor, one can add, edit, delete and move nodes.", "To", " add a node:", "To edit a node after it has been added to a graphical reasoning method, double-click on the node using the left mouse button. Edit the node details (documentation and any arguments) in the node editor. Click the ", "Apply Changes", " or ", "Cancel", " button to close the node editor.", "To delete", " a node from a graphical reasoning method, click on the node to be deleted while in Selection mode. The node will become highlighted. Now click on the Delete button on the tool bar or press the ", "DELETE", " key on the computer keyboard. Note that when a node is deleted, any associated links are also deleted. This behaviour is different to that of the Design Tool.", "To move", " a node, click the Selection mode tool in the tool bar, and then click the node. The node will become highlighted, and can thenceforth be moved by dragging with the mouse.", "Links", " are represented by single lines between two nodes. Some have an arrow at one end to indicate the direction of flow. Documentation", " may be added to all links in a graphical reasoning method diagram. Any link documentation appears as text on the link in Descriptive mode. Link documentation may be added", ", edited", " and deleted", ". The outgoing links of some node types may also be given a label.", "Depending on the type of the node and the number of outgoing links, the outgoing links for a node are labelled with a link type. The possibilities are as follows:", "All remaining node types which have outgoing links (", "Post/Send", ", ", "Reply", ", ", "Start", ", ", "Note", ", ", "Begin Parallel", " and ", "Parallel Task", ") have no labels associated with the outgoing links.", "An example of the use of both ", "pass/fail", " and ", "yes/no", " links is shown below:", "Figure 6-13: ", "Subgraph ", "pass/fail", " and ", "yes/no", " links", "Two categories of links are supported within the Plan Graph Editor \u2013 floating links and fixed links. Floating links are created by targeting the mouse cursor anywhere on a component. To create a floating link, it is not necessary to be accurate. Targeting  anywhere within the component icon enables a floating link to be formed. The GPE will automatically form the link from an appropriate link point (enlarged point on the perimeter of a component). Floating links can move from link point to link point and, should a component be moved on the canvas, the link between it and its associated component also moves. Fixed links are created by building a link from a link point on one component directly to a link point on another. To create a fixed link, it is necessary to be accurate with the mouse cursor, and create the link directly from link point to link point.", "Links can be added, edited and deleted.", "The link tool", " is used to add a link between two nodes. When the mouse cursor is placed over a node while in Link mode it is highlighted, and attachment points are shown. These attachment points are used to link nodes together.", "Figure 6-14: ", ": A floating link connecting a ", "Start", " node to a ", "Decision", " node", "The attachment point of a link can be changed by dragging a link from one link point to another. This can be done at both ends of a link. Links can also be reattached to another node: either end of the link can be reattached.", "Loop constructs are implemented as cycles within the plan graph:", "Figure 6-15: ", "Subgraph ", "pass/fail", " and ", "yes/no", " links", "Links can", " be edited at any stage during the development process, and documentation can be added to links or edited at any stage. To edit the documentation for a link or to change its link type:", "Figure 6-16: ", "The link editor", "Links ", "can be deleted while in either Selection mode or in Link mode. To delete a link from a graphical reasoning method diagram:", "A graphically edited", " plan is saved when the current project is saved in the JDE. Any unsaved components of a project, including plans, are highlighted in the JDE browser until they are saved. Refer to the ", "Development Environment Manual", " for details.", "Deleting", " a graphically edited plan is completed in the same way as deleting a plan edited in the JDE. Refer to the ", "Development Environment Manual", " for details.", "The JDE automatically generates gcode for graphical plans so compilation for a project containing graphical plans is the same as for a project containing non-graphical plans. Refer to the ", "Development Environment Manual", " for details.", "Graphically edited", " plans may be generated as traceable plans, which allows them to be traced during execution by the graphical Plan Tracing Tool (see the ", "Plan Tracing Tool", " chapter of the ", "JACK Tracing and Logging", " manual for further details). To generate traceable plans, the ", "Generate traceable plans", " option must be selected in the ", "Graphical Plans", " tab of the ", "Preferences", " option in the JDE ", "Tools", " menu.", "Plans", " and their graphical reasoning methods are printed from the ", "Print Plan", " window. To open the ", "Print Plan", " window, click the Print button in the GPE window or Plan Graph Editor window.", "Figure 7-1: ", "Print Plan", " window", "The", " following options are available for printing plans:", "To print", " the details of the current plan, select the ", "Print Plan Details (Separate Page Only)", " option name or checkbox. This option will print the following plan details:", "To print", " graphical reasoning methods, select one or more graphical reasoning method names from the list of methods in the ", "Print Plan", " window.", "To print the details of a graphical reasoning method on a separate page to the diagram, select the ", "Print Graph Details on Separate Pages", " option.", "To print", " the nodes of a graphical reasoning method with documentation, select the ", "Print Graphs in Descriptive Mode", " option.", "The following", " graphical reasoning method details may be selected and printed:", "Graphs may be centred horizonally or vertically and can be expanded to fit the page.", "Click on the ", "Print", " button to print the required diagrams.", "Plan Graphs can be exported", " as an image to a JPG or PNG file. To export a plan graph, click the ", "Export plan graphs", " button on the GPE window or a Plan Graph Editor window. An ", "Export Plan Graphs", " window similar to the figure below will open.", "Figure 7-2: ", "Export Plan Graphs", " window", "Select the required graph, image dimensions and graph details to be exported. Then click the ", "Export to File...", " button. An ", "Export selected to the following file", " dialog will open and the file name and path of the exported image can be specified.", "The", " ", "Preferences", " option in the ", "Tools", " menu of the JDE has a ", "Graphical Plans", " tab with the options listed below. Note that when the options are changed, they are not applied to windows that are already open.", "Figure 8-1: ", "Graphical Plans", " tab in the ", "Preferences", " option of the JDE ", "Tools", " menu", "The", " ", "Preferences", " option in the ", "Tools", " menu of the JDE has a ", "Fonts", " tab with the options listed below. Three options are given in this tab to change the font of nodes, links and text in graphical reasoning methods. Note that when the options are changed and applied, Plan Graph Editor windows that are already open must be closed and then reopened for font changes to take effect.", "Each preference has an ", "Edit", " button, which opens a ", "Font Chooser", " window. The ", "Font Chooser", " window contains a list of fonts available on the system being used, and from this list the ", "Family", ", ", "Typeface", " and ", "Size", " of the font can be chosen.", "Figure 8-2: ", "Fonts", " tab in the ", "Preferences", " option of the JDE ", "Tools", " menu", "The three options relevant to Graphical Plans are:", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\nThis document is designed to be viewed using the frames feature. If you see this message, you are using a non-frame-capable web client.\n", "\nLink to", "Non-frame version.", "\n\n\n", "Copyright \u00a9  1999-2012, Agent Oriented Software Pty. Ltd.", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "JACK Intelligent Agents\u00ae  (JACK)", " is an ", "Agent Oriented", " development environment built on top of and integrated with the Java programming language. It includes all components of the Java development environment as well as offering specific extensions to implement agent behaviour. JACK's relationship to Java is analogous to the relationship between the C++ and C languages. C was developed as a procedural language and subsequently C++ was developed to provide programmers with object-oriented extensions to the existing language. Similarly, JACK has been developed to provide agent-oriented extensions to the Java programming language. JACK source code is first compiled into regular Java code before being executed.", "In the same way that object-oriented programming introduces a number of key concepts that influence the entire logical and physical structure of the resulting software system, so too does agent-oriented programming. In agent-oriented programming, a system is modelled in terms of ", "agents", ". These agents are autonomous reasoning entities capable of making pro-active decisions while reacting to events in their environment.", "Agent oriented programming is an advanced software modelling paradigm that arose from research in distributed artificial intelligence. It addresses the need for software systems to exhibit rational, human-like behaviour in their respective problem domains. Traditional software systems make it difficult to model rational behaviour, and often programs written in these systems experience limitations, especially when attempting to operate in real-time environments.", "Agent oriented programming is highly suited to many application areas, including distributed business systems, command and control, intelligent appliances and simulation. Although still young and under development, it has already shown particular promise in a variety of distributed problem solving tasks such as fleet organisation, air traffic management and air combat simulation. Because it offers such a modular and elegant solution to many of the problems faced in reactive processing, agent-oriented programming is ideally suited to these environments.", "The ", "Agent Oriented", " model follows the same underlying principle as ", "Object Oriented", " programming \u2013 that reliable and scalable development can be enhanced by encapsulating the desired behaviour in modular units which contain all the definitions and structures required for them to operate independently. Agents", " extend the concept of encapsulation to include a representation of behaviour at a higher level than object-oriented approaches.", "The term ", "agent", " is widely used to describe a range of software components, varying in capability from procedural wizards, found in popular desktop applications, to information agents that are used to automate information search and retrieval, and, finally, to intelligent agents capable of reasoning in a well-defined way. The agents used in JACK are ", "intelligent agents", ". They model reasoning behaviour according to the theoretical ", "B", "elief ", "D", "esire ", "I", "ntention", " (BDI", ") model of artificial intelligence.", "Following the BDI", " model, JACK intelligent agents", " are autonomous software components that have explicit goals to achieve or events to handle (desires). To describe how they should achieve these desires, BDI agents are programmed with a set of plans. Each plan describes how to achieve a goal under varying circumstances. Set to work, the agent pursues its given goals (", "desires", "), adopting the appropriate plans (", "intentions", ") according to its current set of data (", "beliefs", ") about the state of the world. This combination of desires and beliefs initiating context-sensitive intended behaviour is part of what characterises a BDI agent", ".", "A JACK agent", " is a software component that can exhibit reasoning behaviour under both pro-active (goal directed) and reactive (event driven) stimuli. Each agent has:", "When an agent is instantiated in a system, it will wait until it is given a goal to achieve or experiences an event that it must respond to. When such a goal or event arises, it determines what course of action it will take. If the agent already believes that the goal or event has been handled (as may happen when it is asked to do something that it believes has already been achieved), it does nothing. Otherwise, it looks through its plans to find those that are relevant to the request and applicable to the situation. If it has any problems executing this plan, it looks for others that might apply and keeps cycling through its alternatives until it succeeds or all alternatives are exhausted.", "Thus, an agent can be thought of as analogous to a person with access to a Procedures Manual. The Procedures Manual (set of plans) describes the steps that the agent should take when a certain event arises or when it wants to achieve a certain outcome. At first glance, this may seem like ordinary Expert System behaviour \u2013 with all the limitations that this implies. However, the crucial difference in agent-oriented systems is that the agent is able to be programmed to execute these plans just as a rational person would. In particular, it is able to exhibit the following properties associated with rational behaviour:", "The capability of intelligent agents", " to autonomously perform simple tasks has aroused much interest. The key characteristics that make them attractive are their:", "JACK agents", " are highly suited to the development of time and mission-critical systems, as the BDI", " approach provides for the verification and validation of the model. The agent's goals may include keeping human users informed of what the agent is trying to achieve, what its current intentions are, and what progress it has been able to make. Giving BDI agents pre-compiled plans is a method of ensuring predictable behaviour under critical operational conditions, and of ensuring performance.", "The JACK Agent Language is the actual programming language used to describe an agent-oriented software system. The JACK Agent Language is a super-set of Java \u2013 encompassing the Java syntax while extending it with constructs to represent agent-oriented features.", "Each of the Java extensions that are included in JACK, along with their expected usage and semantic behaviour, are described in detail in the following chapters.", "The JACK Agent Compiler pre-processes JACK Agent Language source files and converts them into pure Java. This Java source code can then be compiled into Java virtual machine code to run on the target system.", "The JACK Agent Kernel is the runtime engine for programs written in the JACK Agent Language. It provides a set of classes that give JACK Agent Language programs their agent-oriented functionality. Most of these classes run behind the scenes and implement the underlying infrastructure and functionality that agents require, while others are used explicitly in JACK Agent Language programs, inherited from and supplemented with callbacks as required to provide agents with their own unique functionality.", "An integrated development environment known as the JACK Development Environment ", " is available for the development of JACK applications. Use of the JACK development environment is described in a separate manual. Alternatively, JACK applications can be developed from the command line using an editor of choice and explicitly invoking the JACK Agent compiler.", "If the latter choice is used, the environment will need to be set up. The following section explains how this is done for the more common operating environments. ", "The instructions that follow assume that all commands are invoked from a command line. Thus, under Windows or NT, a DOS window will need to be created.", "Before a JACK application can be compiled and run, ensure that the ", "PATH", " and ", "CLASSPATH", " variables are set correctly. ", "PATH", " needs to be set so that ", "java", " and ", "javac", " are accessible. ", "CLASSPATH", " needs to be set so that ", "java", " and ", "javac", " can access the JACK class files and the classes that are created.", "The actual settings for ", "PATH", " and ", "CLASSPATH", " will depend upon where the java executables and JACK classes have been installed. It is assumed that:", "This can be achieved either using the JACK development environment, or an editor of choice. When developing a JACK application, source code will be created for some or all of the following entities:", "plus a Java class that contains the application ", "main()", " function that is the entry point for the Java virtual machine and any other Java file required by this application.", "The files that are created for these entities must have the same base name as the entity defined in the file. They may have an extension designating the type of JACK entity contained, or simply a ", ".jack", " extension.", "Table 1-1: ", "JACK file extensions", "Assuming that all the source files are in your current directory, the application can be compiled by invoking ", "JackBuild", ":", "This runs the ", "JackBuild", " utility which in this invocation compiles all of the JACK source files in the current directory into Java source. The Java compiler is then automatically invoked on all Java source files in the current directory. ", "JackBuild", " recognises JACK files by their file name extensions as listed in the previous section.", "Without arguments, the ", "JackBuild", " utility assumes that all files in the directory belong to the application. If the application is organised into subdirectories, it can be compiled by invoking ", "JackBuild", " from the parent directory as follows:", "The ", "-r", " option recursively enters subdirectories to compile code.", "Refer to ", "Appendix A", " for more information about ", "JackBuild", ".", "If one assumes that the ", "main()", " method was in a file called ", "Test.java", ", the compilation process will have produced a file called ", "Test.class", ". The application can then be run from the directory containing ", "Test.class", " by typing", "The programmer can specify command line arguments for use within an application. Note that there are some command line arguments which are processed internally by JACK. In particular, a DCI network from the command line can be set up (this is discussed further in the chapter on ", "Inter-agent Communication", "). If such arguments are present, the method ", "aos.jack.Kernel.init()", " must be used to process these arguments ", "before", " any user specified command line arguments are processed. ", "init()", " extracts and processes command line arguments intended for JACK, then returns a modified argument list containing the remaining user defined arguments. This list can then be accessed in the normal way, as shown in the example below:", "All the standard Java command options are available. Some JACK functionality such as the interaction diagram and debugging is configurable via the system properties file. The ", "-D", " option can be used in these circumstances to set properties. For more details on the interaction diagram and debugging refer to the ", "Tracing and Logging Manual", ".", "There are a number of tools available to assist the developer during application development. These range from graphical tracing tools to logging tools which provide a detailed trace of system execution. These tracing and logging tools are described in the ", "Tracing and Logging Manual", ".", "The JACK Agent Language is built on top of Java. Like C++, the JACK Agent Language does more than extend the functionality of Java \u2013 it also provides a framework to support an entirely new programming paradigm. The JACK Agent Language is an ", "Agent Oriented", " programming language and is used for implementing Agent Oriented software systems.", "The JACK Agent Language extends Java to support Agent Oriented programming:", "All the language extensions are implemented as Java plug-ins. This makes the language as extensible and flexible as possible. Flexibility is important in the JACK Agent Language because it facilitates ongoing research into agent-oriented programming. Developers may, for example, want to investigate how different beliefset implementations affect agent performance. Because the beliefset component is supplied as a plug-in, this can be altered with minimal changes to the JACK development environment. All that is required is to replace the beliefset implementation in the kernel package.", "Each of the JACK Agent Language extensions is strictly typed. This minimises implicit type casting and the opportunity for programmer error. Strict typing also allows for more efficient program compilation by the JACK Agent Compiler.", "The JACK Agent Language introduces five main class-level constructs. These constructs are:", "For a detailed description of each of these extensions, including the specific interfaces and methods provided with them, refer to the appropriate chapters in this manual.", "JACK Agent Language provides a number of variations and extensions to the standard Java syntax. These extensions exist purely to support the syntactic and semantic differences between object-oriented and agent-oriented programming.", "An example piece of code written in the JACK Agent Language to implement an agent plan is given below. The syntactic elements that are unique to JACK Agent Language have been highlighted in bold. All other elements follow normal Java syntax.", "In this example, the plan being defined inherits its core functionality from the JACK Agent Language class: ", "Plan", ". It then identifies how the plan will be used through a number of JACK Agent Language ", "plan declarations", ". JACK Agent Language declarations are each preceded with a ", "#", " symbol to distinguish them from Java syntax elements, for example ", "#handles event", " and ", "#uses agent implementing", ".", "The ", "#handles event", " declaration identifies the goal or event to which this plan will respond. The ", "#uses agent implementing", " declaration constrains the agent(s) that can use this plan. Only those agents that present the specified interface (", "RobotInterface", ") can include this plan.", "The block of code in this example contains only regular Java code. The JACK Agent Language however provides its own statements that can be used when required. These statements are known as ", "reasoning method statements", ", and are identified by a preceding @ character. Reasoning methods specify operations that are only meaningful in agent-oriented programming, such as posting an event or waiting until the agent acquires a particular belief. They are called reasoning method statements because you can only use them in a reasoning method belonging to a plan. These reasoning methods describe the reasoning and behaviour that an agent undertakes when it executes an instance of that plan.", "Hence, JACK Agent Language extends Java syntax at three levels:", "For more information on the JACK Agent Language syntax extensions to Java, see the following chapters.", "Because agent-oriented programming follows a different modelling paradigm to object-oriented programming, there are significant differences in how programs written in each language behave at runtime.", "The JACK Agent Language extends the Java execution engine in the following ways:", "A detailed description on the semantic consequences of each new JACK Agent Language construct can be found in the appropriate chapters of this manual (", "Agents", ", ", "Capabilities", ", ", "Events", ", ", "Plans", ", ", "Beliefset Relations", " and ", "Views", ").", "The JACK Agent Language is closely related to Java and extends the regular Java syntax. It allows the programmers to develop the components that are necessary to define BDI agents and their behaviour. These functional units are:", "Each of the events, plans and beliefsets used are implemented as Java classes. They inherit certain fundamental properties from a base class and extend these base classes to meet their own specific needs. The base classes are defined within the kernel and form the 'glue' that holds a JACK agent-oriented program together. However, the JACK Agent Language is more than just a specific organisation of Java objects and inheritance structures \u2013 it provides its own extended syntax, which has no analogous representation in Java.", "JACK Agent Language constructs can be categorised as follows:", "In addition, each of the JACK Agent Language classes supplies a number of normal Java members and methods that can be made use of in JACK programs.", "The constructs available in each of these categories are listed in the following sub-sections.", "These classes define functional units within JACK. The functional units are implemented as Java classes, with their agent-oriented properties embedded within the class as private methods. They also provide some base members and methods that JACK Agent Language programmers can use. Each JACK Agent Language type and the base members and methods it provides are listed below:", "Note that a ", "View", " does not have a base class.", "JACK Agent Language ", "#", "-declarations", " define agent-oriented properties of a JACK Agent Language type, or relationships and dependencies that exist between JACK Agent Language types. They are used to specify relationships between classes in a JACK program. For example, JACK Agent Language declarations specify which plans an agent uses and which event a plan handles.", "The range of ", "#", "-declarations", " available in JACK Agent Language are listed below:", "#chooses for event", " \u2013 is used in ", "plan definitions", " to identify a plan that allows the agent to reason about which applicable plan instance it will execute for a given event occurrence. This is in contrast to normal plans, which describe how the agent will respond to a given event instance when that plan is selected. Because it provides the agent with the ability to reason about how it will respond to (reason about) a given event, plans that contain a ", "#chooses for event", " declaration are known as ", "meta-level reasoning plans", ".", "#complex query", " ", "\u2013 is used in ", "view and beliefset definitions", " to define a complex query.", "#exports data", " \u2013 is used in ", "capability definitions", " to declare that a user-defined data structure or a JACK beliefset is exported from the capability so that it is accessible from its parent capability. The export statement can also be used to make a user-defined data structure or JACK beliefset available at the agent level, and hence accessible from other capabilities in the agent.", "#function query", " \u2013 is used in ", "view and beliefset definitions", " to define a function query.", "#handles event", " \u2013 is used in ", "agent definitions", " and ", "plan definitions", ". In both cases, it identifies an event that an agent or plan handles. Event handling is declared in the agent that uses a plan and the plan itself. This allows JACK to perform type checking and ensure that the agent has at least one plan to handle every event that it claims to handle, and conversely that an agent doesn't have access to a plan that is beyond its stated event-handling responsibilities.", "#handles external event", " \u2013 is used in ", "capability definitions", " to declare that there are plans within the capability that handle events of a given type.", "#has capability", " \u2013 is used in ", "agent definitions", " and ", "capability definitions", ". In an ", "agent definition", ", it gives the agent access to all of the functional components enclosed by the capability. In a ", "capability definition", ", it declares the use of an inner capability.", "#imports data", " \u2013 is used in ", "capability definitions", " to declare a user-defined data structure or JACK beliefset that is to be used within the capability, but is brought in from the enclosing capability or agent.", "#indexed query", " / ", "#linear query", " ", "\u2013 are both used in ", "beliefset definitions", " to specify how a relation can be queried. This declaration indicates which parameters it expects to be supplied in the query and which parameters it will need to return (through binding logical members) when the query succeeds.", "#key field", " / ", "#value field", " ", "\u2013 are both used in ", "beliefset definitions", " to specify the fields that belong to a relation. ", "Key fields", " identify an object that the relation describes, while ", "value fields", " identify attributes of that object.", "#posted as", " \u2013 is used in an ", "event definition", " to define a posting method for that event. An event's posting methods are used to construct instances of the event when the event needs to be posted. Multiple posting methods allow the event to be posted in different ways (even having different parameters) in different circumstances.", "#posts event", " \u2013 is used in ", "agent definitions", ", ", "capability definitions", " and ", "plan definitions", " to identify events that agent or plan is capable of posting. Neither an agent nor a plan can create an instance of an event unless they declare that they can post (", "#posts event", ") or send (", "#sends event", ") it. Whether an event is posted or sent depends on its type.", "#posts external event", " \u2013 is used in ", "capability definitions", " to declare that there are plans (or Java code) within this capability that post events of a given type.", "#posted when", " \u2013 is added to an event definition to specify the condition which must arise for the event to be posted automatically.", "#private data", " / ", "#agent data", " / ", "#global data", " ", "\u2013 are used in ", "agent definitions", " and ", "capability definitions", " to identify a user-defined data structure or JACK beliefset that the agent can use to store information. A ", "private data", " instance is unique to each agent, and hence can be read or modified by that agent and that agent only. An ", "agent data", " instance is available to all agents of a given agent type (i.e. instances of the same Agent class). A ", "global data", " instance is available to all agents in a given process. Agents should only modify the data that appears in their private user-defined data structures or in their private JACK beliefsets.", "#propagates changes", " ", "\u2013 marks that a beliefset may be a source beliefset in a team belief connection, and it provides an implementation of the connection dynamics, so that changes to the beliefset are propagated correctly. Belief propagation is only available when using JACK Teams. Refer to the ", "Teams", " manual for more details.", "#reasoning method", " ", "\u2013 is used in ", "plan definitions", " to define methods that an agent may execute when it runs this plan. Reasoning methods are different from normal Java methods in that they execute as finite state machines, and may succeed or fail, depending on whether the agent can complete each statement that they contain. The top-level reasoning method is called ", "body", "()", ". This is the only reasoning method that must be present in all plans and is ", "not", " preceded by an ", "#", " symbol. The ", "body", "()", " method can call other reasoning methods if they have been included amongst the plan's ", "#reasoning method", " declarations. It can also initiate the execution of other tasks and subtasks by executing JACK Agent Language statements that post new events. Examples of such statements are: ", "@subtask", ", ", "@maintain", " and ", "@achieve", ".", "#reasoning method", " ", "pass", " / ", "fail", " ", "\u2013 is used in ", "plan definitions", " to identify processing that should occur after an instance of the plan has either succeeded or failed. When either of these methods is present in a plan, that plan's execution does not end when the plan has succeeded or failed. First, the relevant ", "pass", "()", " or ", "fail", "()", " method is executed.", "#sends event", " ", "\u2013 is used in ", "agent definitions", " and ", "plan definitions", " to identify message events that the agent or plan is capable of sending to other agents. Neither an agent nor a plan can send a message event to another agent unless it include a corresponding ", "#sends event", " declaration for that class of message event.", "#set behavior", " ", "\u2013 is used in BDI event definitions to declare how an agent processes an instance of this event when it arises. Options that can be configured include whether the agent will re-try the event if an attempted plan fails and whether or not the agent can reason about which plan it executes in response to the event.", "#set transport", " ", "\u2013 is used to signal which transport format is to be used for message events.", "#uses agent implementing", " ", "\u2013 is used in ", "plan definitions", " to declare that any agent using these plans must implement the required interface. Interfaces allow multiple agents to use a given plan.", "#uses data", " / ", "#reads data", " / ", "#modifies data", " ", "\u2013 are used in ", "plan definitions", " to identify user-defined data structures and JACK beliefsets that the plan can access. If the plan reads a data instance it should only perform queries on it. If the plan modifies a data instance, it can read and modify the data. Similarly, if the plan uses a data instance, it can read and modify the data.", "#uses data", " ", "\u2013 is used in ", "view definitions", " to declare that a view requires data of a specified type. It can also be added to ", "event", " and ", "plan definitions", " to provide access to a belief structure.", "#uses interface", " ", "\u2013 is used in plans to declare that one of the enclosing capabilities (or the enclosing agent) implements the required interface. Note that this declaration supersedes ", "#uses agent implementing", " for most purposes.", "#uses plan", " ", "\u2013 is used in ", "agent", " and ", "capability definitions", " to specify that an agent or capability includes this plan in its set of available plans. This is a containment relationship.", "#uses taskManager", " ", "\u2013 is used in ", "agent definitions", " to specify how an agent shares its processing capacity between active tasks. JACK provides a simple task manager, which persists with the current task until completion, and a round robin task manager which allows each task to execute a specified number of plan steps before switching to another waiting task.", "Reasoning statements are JACK Agent Language specific statements that can only appear in ", "reasoning methods", ". They describe actions that the agent can perform to execute behaviour. Steps such as posting events, sending messages to other agents or waiting until a particular condition is true are expressed using reasoning method statements.", "Each reasoning method statement is listed below.", "@action", " ", "\u2013 is a reasoning statement that can be used if there is a need to include a lengthy computation within a plan.", "@achieve", " ", "\u2013 tells the agent to make a certain condition true. If the condition is already true, the agent does nothing, but if not a ", "BDIGoalEvent", " will be posted. Typically, this event will initiate the execution of a plan to make the condition hold. The current plan is suspended while this plan is being executed, and the ", "@achieve", " statement succeeds or fails based on whether the plan that is executed succeeds or fails.", "@determine", " ", "\u2013 tells the agent to find a binding for a logical condition that causes a ", "BDIGoalEvent", " to succeed. Typically, the logical condition will contain one or more beliefset queries. For each binding that these queries return, the agent posts a ", "BDIGoalEvent", ". As soon as one of these ", "BDIGoalEvent", "s succeeds, the ", "@determine", " statement succeeds. If all bindings are tried and fail, the ", "@determine", " statement fails.", "@insist", " ", "\u2013 tells the agent to ensure that a certain condition holds true. Like the ", "@achieve", " statement, the agent will do nothing if the condition is already true and will post a ", "BDIGoalEvent", " otherwise, but when the ", "BDIGoalEvent", " has been handled, the agent re-tests the condition to ensure that it holds. If the condition holds, the ", "@insist", " statement succeeds, but if not the ", "BDIGoalEvent", " is posted again. The agent will keep testing the condition and posting the ", "BDIGoalEvent", " until the specified condition is satisfied or the event processing fails.", "@maintain", " ", "\u2013 is used in a reasoning method to specify that a ", "subtask", " be performed. However, while the agent is performing the subtask, it must ensure that a particular logical condition is never violated. If the logical condition is found to be false between plan steps, the subtask will fail immediately. Other than specifying a maintenance condition, the ", "@maintain", " statement operates in exactly the same way as the ", "@subtask", " statement (see below for details).", "@parallel", " \u2013 allows concurrent sub-tasking of a set of statements within reasoning methods. The ", "@parallel", " statement suspends execution of the calling plan while all enclosed statements are executed in parallel.", "@post", " ", "\u2013 posts an ", "Event", " or ", "BDIFactEvent", " within an agent. This initiates another task execution within the agent. The event is posted using one of its posting methods and is handled asynchronously by the current task execution thread.", "@reply", " ", "\u2013 sends a message event (", "MessageEvent", " or ", "BDIMessageEvent", ") in response to another message event that the agent has received. It is only available in plans that are executed within a task initiated by the arrival of a message event. If the task execution was initiated by any other kind of event, the ", "@reply", " statement will fail.", "@send", " ", "\u2013 sends a message event to another agent. Unlike the ", "@post", " method which posts an event internally, an event is sent to another agent (potentially running in another process). The receiving agent then has the option of replying to the message. The sender has a mechanism for checking that a reply has been sent, and has methods for handling replies when they arrive.", "@sleep", " ", "\u2013 suspends execution of the task for a given period of time.", "@subtask", " ", "\u2013 posts an ", "Event", " or ", "BDIFactEvent", " ", ", but instead of handling the event asynchronously in a separate task, the agent handles it synchronously as part of the same task.", "@test", " ", "\u2013 tests a condition. If the condition is true, it returns ", "true", ". If the condition is false, it returns ", "false", ". If the condition is unknown, it posts a ", "BDIGoalEvent", " to find out whether it is true or false.", "@wait_for", " ", "\u2013 identifies a condition that the agent should wait for. The plan cannot proceed until this condition is true. The task is suspended, and waits until some other task performs an action that makes the condition true. To prevent the agent from waiting indefinitely, a timeout condition can also be specified.", "Each JACK Agent Language class offers a number of public members and methods that can be called in the user's programs. These base members and methods are listed below:", "Timer", " ", "timer", " ", "\u2013 a public agent member that keeps the timer for this agent. This timer is used by the plan methods ", "elapsed", "()", " and ", "after", "()", ", and by the ", "@sleep", " reasoning method statement.", "finish", "()", " ", " ", "\u2013 terminates the current agent instance. This is distinct from, and should not be confused with, the standard Java ", "finalize", "()", " ", " callback (used by the garbage collector to allow objects to take a final action before termination).", "String", " ", "name", "()", " ", "\u2013 returns the full name of a given agent instance. An agent's full name", " takes the following form: ", "local_name", "@", "portal_name", ", where:", "void postEvent", "()", " ", "\u2013 posts an event. The event is handled ", "asynchronously", " by a separate task in the agent. This method behaves in the same way as the ", "@post", " reasoning method statement. The ", "postEvent", "()", " method allows Java code other than reasoning methods to initiate task execution within an agent by posting an event.", "boolean postEventAndWait", "()", " ", "\u2013 also posts an event. The event must belong to an event class that the agent has declared it can post (i.e. by identifying this class in one of its ", "#posts event", " declarations). However, instead of posting the event asynchronously, the event is posted ", "synchronously", " (as though it has been posted by a ", "@subtask", " statement, for example), to be handled as a 'subtask' of the calling thread. The current execution thread stops what it is doing while the event is handled and waits for the event to either succeed or fail.", "An attempt to call ", "postEventAndWait", "()", " from a JACK thread (i.e. through a call chain originating in a plan) will be caught by the JACK kernel", ", which will issue a warning message. ", "PostEventAndWait", " provides a means to post events synchronously from outside reasoning method execution (i.e. from a Java thread).", "void", " ", "reply", "(", "MessageEvent", " ", "query", ", ", "MessageEvent", " ", "reply", ")", " ", "\u2013 replies to a message event that an agent has received from another agent. It takes two message events as arguments:", "An agent can reply to any message event that it receives. This method behaves identically to the ", "@reply", " statement in the JACK Agent Language. Like ", "send", "()", " and ", "postEvent", "()", " ", ", this method allows code outside plans to engage in inter-agent communication and to initiate task execution within an agent.", "void", " ", "send", "(String ", "to", ",", " ", "MessageEvent", " ", "message", ")", " ", "\u2013 sends a message event to another agent. It takes a message event and the (full) name of the agent to which it should be sent. Partial names resolve to the same portal as the sender.", "String", " ", "from", " ", "\u2013 appears in message events only, and enables identification of the agent that sent the message carried by this message event.", "String", " ", "message", " ", "\u2013 appears in message events only (", "MessageEvent", "s", " and ", "BDIMessageEvent", "s", "), and contains a message that will be passed to the application's Agent Interaction Diagram", ", so that each instance of this event can be identified when it appears in the diagram. The Agent Interaction Diagram in discussed in the ", "Tracing and Logging", " Manual.", "String", " ", "mode", " ", "\u2013 appears in ", "BDIGoalEvent", "s", " only and identifies the type of JACK Agent Language statement that posted the instance of this goal event (", "@achieve", ", ", "@insist", ", ", "@test", " or ", "@determine", ").", "Cursor replied", "()", "\u2013 appears in ", "MessageEvent", "s", " only, and enables the user to determine whether the agent has received at least one reply to a given message event instance. It returns a triggered cursor, which will test whether the given message event's reply queue is empty. Because the cursor is triggered, it can be used in a ", "@wait_for", " statement to wait for message event replies to arrive.", "MessageEvent getReply", "()", " ", "\u2013 appears in message events only and allows the user to obtain a reference to each message event that has been returned to the agent as a reply to a given message event instance. To be a reply, a message event must have been sent by the destination agent for the original message, using the ", "reply", "()", " method, from within the task that the destination agent was using to handle the original message event.", "Agent agent", " ", "\u2013 identifies the agent that this plan belongs to. Whenever an instance of a plan is created, this member is assigned a reference to the agent that created the plan instance.", "PlanInstanceInfo getInstanceInfo", "()", " ", " ", "\u2013 a callback that has been supplied so that agents can perform ", "meta-level reasoning", " about plan instances. It provides a base class for recording information about plan instances. This base class can be extended and accessed in plans that perform meta-level reasoning. For example, one application may extend the ", "PlanInstanceInfo", " class so that it assigns a ", "precedence", " rating to each plan instance. This precedence rating may simply be a constant, or it may be calculated in some way. The agent can choose between its available plan instances on the basis of this precedence rating, taking the highest precedence plan it has available as its first choice.", "static boolean", " ", "relevant", "()", " ", "\u2013 used to determine if a plan is relevant to the actual event. When the agent is looking for a plan to execute in response to an event, it executes the plan's ", "relevant", "()", " method to determine whether the given plan is relevant. A plan is relevant if, and only if, it handles the given event and the event's parameters match the pattern specified in the plan's ", "relevant", "()", " method. Since events are polymorphic, this can be used to weed out those plans that can handle this event type, but not this particular instance of the event type. Unless the event's parameters satisfy the ", "relevant", "()", " method, the agent will deem the plan not relevant to this event.", "context", "()", " ", "\u2013 used to determine if the plan should be executed in the current context. The context specifies a logical condition that must be satisfied if the plan is to be applicable for handling a given event in the current situation. Context often refers to values in an agents knowledge base, which are its beliefs about the state of the world. When the agent needs to handle an event, it looks for a ", "plan instance", " that is applicable to this event. A plan instance is applicable if it satisfies the plan's context. Typically, the ", "context", "()", " method will include logical members in beliefset queries. When an applicable instance of the plan is found, it indicates that the query found a tuple and bound the logical member(s) to its value(s). If there is more than one way to satisfy a ", "context", "()", " method's logical expression, there will be multiple instances of the plan that are applicable. One applicable instance will be generated for each set of bindings that satisfy the ", "context", "()", " condition.", "body", "()", " ", "\u2013 the plan's main or 'top-level' reasoning method. It describes what it is that the agent actually does when it executes an instance of this plan.", "add", "()", " ", "\u2013 adds new tuples to an agent's private beliefset, or modifies its existing tuples by supplying updated information.", "remove", "()", " ", "\u2013 removes tuples from an agent's beliefset.", "public int", " ", "nFacts", "()", " ", "\u2013 returns the number of facts (tuples) that are currently held in a given beliefset. For ", "Open World", " relations, this is the sum of both positive (true) and negative (false) beliefs, while for ", "Closed World", " relations this is only the number of positive (true) beliefs.", "void postEvent(Event ", "e", ")", " ", "\u2013 the ", "postEvent", "()", " method is used to post events within capability code. This method is actually just a convenience method that refers to ", "getAgent", "().", "postEvent", "()", ".", "Agent getAgent()", " ", "\u2013 this method is called on a capability instance to return the containing agent.", "void autorun()", " ", "\u2013 this method can be overridden in order to provide some initialisation when the capability is actually brought into being.", "The Agent class", " embodies all the functionality associated with a JACK intelligent agent. To define agents", ", extend this class, adding members and methods that are applicable to the agents current application domain.", "Agent definitions take the form shown below:", "Each component of this definition is explained in the following table:", "Table 3-1: ", "Components of an Agent definition", "The optional ", "implements Interface", " component in an agent definition is important when it comes to writing portable JACK Agent Language programs that allow for code re-use. Interfaces provide a common ground between agents that allows them to share plans.", "When an agent executes a plan, this plan will often call ordinary Java methods. It is important to remember that when this occurs these methods must be included in the agent definition, not the plan definition. Therefore, any agent that uses this plan must include the defined methods or the plan will not be able to run properly.", "This means that the JACK Agent Language places restrictions on which agents can use what plans. So that this restriction can be observed in a modular way, the JACK Agent Language allows these dependencies to be packaged up into a Java ", "Interface", ". Any agent that wishes to include this plan must declare that it ", "implements this interface", ". If an Agent class implements the interface, it provides all the methods necessary to run the plan.", "An agent should fully describe the functionality it implements via JACK Agent Language definitions. In general, this definition needs to include the following conceptual statements:", "These definitions are handled by statements that occur at the field or member level of an agent definition. While there is no restriction on where they appear in Jack code, by convention these definitions appear before the definitions of any regular Java data members and methods that the agent may contain.", "An example agent template showing ", "some", " of the declarations that can appear in an agent appears below:", "Each JACK Agent Language agent declaration is described in more detail in the following sub-sections.", "This statement identifies the ", "events", " that the agent will attempt to respond to if they arise. By handling the event, the agent claims to have at least one plan available that it can execute when this event arises. These plans may not be relevant to all forms of the event or applicable in all circumstances, but the agent must know how to handle the event in at least some situations.", "Because it is really claiming that the agent's plans can handle the event, the ", "#handles event", " agent definition statement is analogous to a function prototype. It is an explicit statement with which the runtime can check for completeness rather than functional necessity. However, defining the events that an agent handles up front allows agents to be prototyped and helps ensure that sound design practices are followed.", "Including the ", "#handles event", " definition is also important to ensure that task processing takes place in the agent when the event occurs. If an agent receives an event that it does not handle, a runtime warning is generated and the event is not processed. By claiming to handle the event, the agent looks through its plans to find one that has a matching ", "#handles event", " statement. A suitable plan might not be found, but at least the agent looks to make sure. Claiming to handle an event is like an employee claiming that a situation falls under their responsibility: they take notice when it occurs and try to do something about it. Whether they succeed or not is another matter.", "When an agent definition includes a statement of the following form:", "The agent claims that when an event of ", "EventType", " occurs, it has a plan to handle it. This plan should be declared with the ", "#uses plan", " declaration. How this event is processed depends on whether it is a BDI event or a normal event. ", "Behaviour Attribute", " settings can also influence how events are handled and particularly what happens on plan failure.", "Refer to the ", "Events", " chapter for more details on how different event types are handled and how this behaviour can be customised.", "This statement describes an ", "event", " that the agent can post. Posting an event means that an agent creates an instance of the event and posts it internally (i.e. sends the event to itself).", "The ", "#posts event", " declaration identifies those events that the agent posts ", "explicitly", ", not those that arise from actions of other agents or indirectly from the agent's own actions or changes in internal state. Therefore, it is usually used to declare that the agent posts events of the types ", "Event", ", ", "BDIFactEvent", " and ", "BDIGoalEvent", ". For more information on these event classes, refer to the ", "Events", " chapter.", "When an agent claims that it posts an event, this event will only arise if it is explicitly generated in one of the agent's methods.", "An agent definition contains a statement of this form to indicate that the agent has reasoning methods or code that explicitly causes an event of this type to arise.", "Each term in the previous definition is described in the following table:", "Table 3-2: ", "Terms in a ", "#posts event", " declaration", "When an agent posts an event, it does so by calling the method ", "postEvent", "()", " as shown below:", "The event being posted must be constructed using one of the event's posting methods. This is described in the section on posting / sending events in the ", "Events", " chapter.", "Events posted in this way are handled ", "internally", " by the agent. No other agent is affected by the posting process. Hence, they are like 'thoughts' or 'ideas' that the agent has. The agent essentially tells itself that this event has occurred and needs to be dealt with.", "Agents can also send external events to be handled by other agents. These events are called ", "message events", " and are described in the ", "Events", " chapter.", "This declares that the agent is able to send a message event to another agent. Message events are events that extend either of the following event classes:", "For more information on these event classes, refer to the ", "Events", " chapter.", "This declaration identifies events that the agent sends ", "externally", ". It is analogous to the ", "#posts event", " statement in all respects other than the fact that the event arises in a different agent to the one that sends it.", "When an agent includes a declaration of this type, it indicates that the agent has reasoning methods or code that can send an event of ", "EventType", " to other agents. The following table describes each term in this definition:", "Table 3-3: ", "Terms in a ", "#sends event", " declaration", "When a method belonging to an agent definition needs to send a message event to another agent, it does so by executing the following statement:", "send", "()", " is a base method provided by the Agent class. It is almost identical to the ", "postEvent", "()", " method except that it takes the name of the target agent", " as the first argument. This is the full name that the agent is known by on the JACK runtime network. The event being posted must be constructed using one of the event's posting methods. This is described in the section on posting/sending events in the ", "Events", " chapter.", "To obtain the name of an agent, use the Agent base method ", "name", "()", ". This method returns the agent's name as a ", "String", ". Note that the name returned is the full name of the agent which takes the form ", "agent", "@", "portal", " ", ". If a portal name is not supplied, the ", "send", "()", " method appends an ", "@", " symbol, followed by the portal name of the sending agent. This can cause some ambiguity if there is more than one process in the current application, so it is advisable to always supply the full name of an agent.", "This statement identifies the ", "plans", " that an agent can execute to handle events. An agent can only execute instances of a plan if it declares that it uses this plan with a ", "#uses plan", " declaration. If a plan is defined, but no agent uses it, that plan will never be executed.", "When an agent definition includes a ", "#uses plan", " declaration, all instances of this agent that are created have access to the given plan. This plan is said to form part of that agent's ", "plan set", ".", "If an agent claims to handle an event, the agent should use a plan that also handles that event. If this is not the case, a warning will be generated when you start up the application. The warning is issued because if an agent has no plan to handle a given event, it cannot strictly claim that it is capable of handling that event.", "The capability concept brings structure to the functional elements of agents. The user declares an agent to have selected capabilities by using the ", "#has capability", " declaration statement. Each declaration then requires both a capability type name and a reference name that identifies the particular instance of the capability.", "If, for instance, ", "Painting", " is a ", "Capability", " type, an agent might include the following declaration:", "The declaration makes the agent capable of whatever the ", "Painting", " capability brings, that is, the agent is given access to all of the functional components enclosed by the capability. The reference name ", "painting", " allows agent code to refer into the capability instance. An agent may have more than one instance of the one capability type.", "In JACK, beliefs are modelled as beliefset relations which take the following form:", "That is, each relation is identified by a name and contains any number of fields. Some of these fields are ", "key fields", ", uniquely identifying the ", "kind of object", " that this relation describes, and others are ", "value fields", ", identifying the ", "attributes of this object", " that need to be recorded.", "Each object described by a beliefset relation is represented as a ", "tuple", ". A tuple is an instance of the relation where the fields represent the key fields and value fields of a particular object. For example, one may choose to model a bank account with the following beliefset relation:", "A particular bank account would then be described as a tuple, such as", "JACK beliefset ", " declarations within an agent take the following general form;", "which declares that a beliefset of type ", "BeliefType", " is to be contained within the agent. Each declaration is described below.", "When an agent definition includes a statement of this form, it declares a named data that is private to the agent. Agents of this class have ", "private", " access to the beliefset relation", " ", "belief_name", " (or to a user-defined data structure as described in the next section). Private access means that the agent has its own copy of the relation, which it can read and modify independent of all other agents, even those of the same agent class.", "Each parameter in the previous definition is described in the following table:", "Table 3-4: ", "Terms in a ", "#private", " JACK beliefset declaration", "When a beliefset relation ", "is private, all the relation's tuples are unique to that agent. If the agent adds or removes tuple information, this is only reflected in its own belief state. Any other agent with access to a relation of the same name will not have its own set of tuples affected. Hence, any changes made to an agent's private relations have no effect on the belief state of other agents.", "Private relations are the only beliefset relations where the agent can add, modify or remove tuples: agent and global relations are read-only. It should be noted that:", "Refer to the ", "Beliefset Relations", " chapter for further details.", "When an agent definition includes a statement of this form, it declares a named data that is shared among all agents of this type in the same process. Agents of this class have ", "agent", " access to the beliefset relation", " ", "belief_name", " (or to a user-defined data structure as described in the next section). Although it is not enforced, ", "agent", " access means that the agent should have shared read-only access to the relation with other agents of the same class.", "Each term from the previous definition is described in the following table:", "Table 3-5: ", "Terms in a ", "#agent", " beliefset declaration", "As access to agent beliefsets is intended to be read-only, the beliefset should be populated by reading data from a file as part of the beliefset constructor. Details on how this can be achieved appear in the ", "BeliefSet Construction", " section.", "The first instance of an agent class that uses an agent beliefset causes the beliefset to be constructed. Each subsequent instance of that agent class is simply allowed access to the beliefset.", "An agent can ", "query", " an agent beliefset using the relation's ", "query method", ".", "Refer to the ", "Beliefset Relations", " chapter for further details.", "When an agent definition includes a statement of this form, it declares a named data that is shared among all the agents in the same process. This means that all the agents in the process have ", "global", " access to the beliefset relation", " ", "belief_name", " (or to a user defined data structure as described in the next section). Although it is not enforced, global access means that the agent should have shared read-only access to the relation with all other agents in the same process.", "Each term in the previous definition is explained in the following table:", "Table 3-6: ", "Terms in a ", "#global", " beliefset declaration", "As access to a global beliefset is intended to be read-only, the beliefset should be  populated by reading data from a file as part of the beliefset constructor.", "The first instance of an agent class that uses a global beliefset causes the beliefset to be constructed. Each subsequent instance of an agent class that uses the same global beliefset is simply allowed access to the beliefset.", "An agent can ", "query", " a global beliefset using the relation's query methods.", "Refer to the ", "Beliefset Relations", " chapter for further details.", "Agent beliefs or normal Java objects can be stored in JACK beliefset relations or in user-defined data structures as agent data members. User-defined data structure members are declared in the agent in an analogous way to JACK beliefset relations", " by using the ", "#private data", ", ", "#agent data", " or ", "#global data", " statements as described below. The agent's plans gain access to the user-defined data object using the ", "#uses data", " declaration described in the chapter on plans, and like JACK beliefsets, user-defined data structures can be exported, imported or declared private to capabilities as discussed in the ", "Capabilities", " chapter.", "In addition, a plan can gain access to its enclosing agent as a Java object, (and thus to the agent's data members) by using the ", "#uses interface", " or the ", "#uses agent implementing", " statements described in the ", "Plans", " chapter.", "JACK declarations for user-defined data structures within an agent take the following general form:", "which declares that a Java object of type ", "DataType", " is to be contained within the agent. Each declaration is described below:", "When an agent definition includes a statement of this form, it declares a named data that is private to the agent. Agents of this class have private access to ", "data_name", ".", "Private access means that the agent has its own copy of the data object, which it can read and modify independently of all other agents, even those of the same agent class.", "Each item in the previous definition is described in the following table:", "Table 3-7: ", "Terms in a ", "#private", " user-defined data structure declaration", "When an agent definition includes a statement of this form, it declares a named data that is shared among all agents of this type in the same process. Agents of this class have ", "agent", " access to the Java object ", "data_name", " of type ", "DataType", ". Although it is not enforced, ", "agent", " access means that the agent should have shared, read-only access to the data object (", "data_name", ") with other agents of the same class.", "Each item in the previous definition is described in the following table:", "Table 3-8: ", "Terms in a ", "#agent", " user-defined data structure declaration", "As access to the object is intended to be read-only, the data object should be initialised when it is constructed. The first instance of an agent class that uses the object will cause the object to be constructed. Each subsequent instance of that agent class is then allowed to access the object.", "When an agent definition includes a statement of this form, it declares a named data that is shared among all agents in the process. Although it is not enforced, ", "global", " access means that the agent has shared read-only access to the data object ", "data_name", " with all other agents in the same process.", "Each term in the previous definition is described in the following table:", "Table 3-9: ", "Terms in a ", "#global", " user-defined data structure declaration", "As access to global data is intended to be read-only, the object should be initialised when it is constructed. The first instance of an agent class that uses the global data object causes the data object to be constructed. Each subsequent instance of an agent class that uses the same global object is allowed to access the data object.", "Task managers", " govern how an agent handles concurrent execution when they have committed to more than one task execution.", "By default, JACK uses the ", "SimpleTaskManager", ". The ", "SimpleTaskManager", " tells the agent to persist with its currently active task until one of the following situations occurs:", "Regardless of the number of tasks that are outstanding, the agent will continue with a single task until one of the above conditions occurs.", "As soon as one of the above conditions occurs, the task is removed from the task queue and the agent moves on to the next applicable task. If the task is completed, it is removed completely from the task queue. If the task encountered a ", "@wait_for", " or ", "@sleep", ", the task is returned to the end of the task queue only when the statement is completed.", "If a plan step of the active task takes a long time to complete, or an infinite-loop arises, the agent will not switch to another task.", "In most applications, the ", "SimpleTaskManager", " is sufficient. However, if the agent has tasks involving intensive processing that may need to be preempted by shorter, more urgent tasks, the task manager described below may be preferable.", "This statement declares that the \"round robin\" task manager", " is to be used in place of the ", "SimpleTaskManager", ". This task manager offers a more \"balanced\" approach to managing the tasks that are currently active within an agent. Instead of persisting with the currently active task until it either pauses or is complete, the agent rotates its efforts between all tasks that are currently active.", "Each active task is kept in a ", "round robin queue", " and is allocated a number of plan steps that it can run. A plan step is meant to represent an atomic action within a plan. In some cases, this corresponds to a single statement (such as the ", "@send", " statement). However, many JACK Agent Language statements actually involve more than one plan step (such as the ", "@wait_for", ", where multiple plan steps are used to test each condition). When a plan statement covers more than one plan step, this statement can be suspended after any given plan step. When the round robin task manager lets the task run again, the statement is able to resume where it left off.", "If a plan calls a normal Java method, that entire method executes as a single plan step. This is because the round robin task manager does not know at which point it can suspend the task while it is executing non-reasoning method code.", "The number of plan steps allocated to each task is governed by the ", "steps", " argument (an ", "unsigned long", ") supplied to the ", "#uses taskManager", " declaration. When specifying the number of plan steps, take care to choose a value that is appropriate to the application domain. Choosing a small value minimises the chances of a single task locking out all others, maximising the agent's responsiveness to new events. However, the smaller a value, the more of an agent's processing time is devoted to context switching, reducing the agent's overall efficiency. A good value for the number of plan steps is somewhere in the hundreds (100-200), depending on the response and throughput characteristics required.", "If the task terminates or pauses (by reaching a ", "@sleep", " or ", "@wait_for", " statement) before its number of plan steps has been reached, the agent behaves as it would with the ", "SimpleTaskManager", ". However, if it reaches its requisite number of plan steps before this happens, the active task is moved to the end of the task queue, and the task at the head of the queue is activated. Therefore, all active tasks are given an opportunity to run, and the danger of one CPU-intensive, long-running task hampering the agent's overall performance is reduced.", "Once the required set of ", "#", "-declarations", " has been added to an agent's definition, the ", "event", ", ", "plan", " and ", "beliefset", " components that the agent requires will need to be identified. Each of these components contains its own data members and methods. The remaining step in completing the agent definition is to specify the agent's data members and methods.", "An agent's data members and methods are defined using normal Java. After all, agents are fundamentally implemented as Java classes, so the full Java functionality is available. The user may want to define data structures for the agent to use that are different from the beliefset construct provided, and you may want to include methods to post events when certain situations arise. You will certainly want to define constructors and destructors so that individual agents can be created and destroyed. Note that at least one constructor for the agent must be defined.", "When defining an agent's methods, the user may wish to use some of the base methods that the Agent class provides. Since all agents extend the ", "Agent", " class, these methods are always available. Typically, they implement useful low level functionality such as:", "Agents also have a data member that allows you to specify the ", "Timer", " (clock) that the agent uses to measure the passage of time.", "Furthermore, if any of the agent's plans require it to implement a particular interface, all the methods specified by this interface must be included among the agent's methods and be fully implemented.", "To construct an agent, follow the convention for constructors used in Java. An example of agent construction is shown below:", "To terminate an agent, use the ", "Agent", " base method ", "finish", "()", ". When this method is executed, all event processing within the agent terminates immediately and the agent is removed from the JACK runtime network. Actual removal of the agent and the freeing of its allocated memory is left to the Java garbage collector.", "The ", "postEvent", "()", " method is used by the agent to post a new event. It can be used to post all types of events.", "The prototype for this method is shown below:", "where ", "event_name", " is the name of the event to be posted. Note that to use this method:", "An agent executes a separate task to handle posted events. Hence, the ", "postEvent", "()", " method does not return a result, even if the agent cannot handle the event (e.g. if none of its plans are relevant or applicable).", "The event is handled ", "asynchronously", " by the agent. Note that this is also true if the event posted is a goal event. Normally goal events are handled synchronously in separate subtasks but when posted using this method, they are treated and handled asynchronously as normal events.", "Message events should not be posted in this way. If they are, they will appear as internal events and the ", "from", " member will be set to null.", "This base method is similar to the ", "postEvent", "()", " method, except that instead of posting the event asynchronously, it is posted ", "synchronously", ". The agent still executes the event as a separate task, but the calling method must wait until this task has been completed before continuing. The prototype for this method is shown below:", "The method returns a boolean result depending on whether the ", "task", " that the agent performs to handle the event succeeds (true) or fails (false).", "This method is used to send messages (", "MessageEvent", "s", " or ", "BDIMessageEvent", "s", " to other agents. The prototype for this method is given below:", "It takes two arguments:", "The agent name", " can either be in short (", "agent", ") or full (", "agent", "@", "portal", " ", ") form. The short name is simply the name that was specified in the constructor of the agent. If a short agent name is passed, the message event will only reach the agent if it is running within the same process as the agent that sends the message. If a fully-qualified name is passed, on the other hand, the message will reach the destination agent if it is running anywhere on the same DCI network.", "This method is used to send messages (", "MessageEvent", "s", " or ", "BDIMessageEvent", "s", ") back to an agent from which a previous message originated.", "If the agent has received a message and performed a task in response to this message, one of the steps in the plan that responds to this message may be to send another message back to the originating agent in the form of a reply. This may be to confirm that the task has been completed.", "The prototype for this method is given below:", "Unlike the ", "send", "()", " method, the ", "reply", "()", " method does not require specification of the destination agent as an explicit input argument. This is because the agent already knows which agent sent the original message. The sender's address is specified in the original message event's ", "from", " member.", "This method is used to retrieve the agent's full name", ", which includes its process portal name. It returns the name as a ", "String", ".", "The name returned consists of two components:", "For example, suppose an agent called ", "kermit", " is running in a process which has been assigned a portal name ", "sesameStreet", ". The name returned by this method would be ", "kermit@sesameStreet", ".", "This data member specifies which timer (clock ", " the agent will use to measure the passage of time. JACK includes a number of different ", "Timer", " classes to give programmers more control over how agents respond to the passage of time in a program.", "The definition of this member is given below:", "The ", "Timer", " class is JACK specific. Timers can be categorised as: the real-time clock (measuring the passage of time as would a normal system clock); dilated clocks", " (enabling the agent to manipulate time with effect, such as fast forward, slow motion and pause); and simulation clocks", " (enabling manual ticking and even greater control than that offered by dilated clocks).", "The ", "capability", " concept is a means of structuring reasoning elements of agents into clusters that implement selected reasoning capabilities. This technique simplifies agent system design, allows code reuse, and encapsulation of agent functionality.", "Capabilities represent functional aspects of an agent that can be plugged in as required. This ", "capability as component", " approach allows an agent system architect to build up a library of capabilities over time. These components can then be used to add selected functionality to an agent.", "Additionally, capabilities can be structured so that a number of sub-capabilities can be combined to provide complex functionality in a parent capability. This capability can in turn be added to an agent to give it the desired functionality.", "Capabilities are built in a similar fashion to simple agents \u2013 constructing them is merely a matter of declaring the JACK Agent Language elements required. Events, beliefsets, plans, Java code and other capabilities can all be combined to make a capability.", "In this section, the capability concept is described, and capability declarations are explained. Each of the specific ", "#", "-declarations, members and methods pertaining to capabilities is listed in following sub-sections.", "A capability is defined similarly to other type-level concepts as a code block by the keyword ", "capability", ". A capability definition takes the form shown below:", "Each component of this definition is explained in the following table:", "Table 4-1: ", "Components of a Capability definition", "In the body of each capability, events, beliefsets, plans and other capabilities that pertain to the functionality provided by the given capability are declared. Java entities (i.e. methods and members) may be declared in capabilities as in a class. Each capability is instantiated with each agent that contains the corresponding ", "#has capability", " declaration.", "The JACK ", "#", "-declaration", " statements used for agents are all available for use in capabilities, except those that refer to task managers. In addition, there are new declarations that allow specifying events and beliefsets as shared with an enclosing capability.", "The optional ", "implements Interface", " component in a capability definition is important when it comes to writing portable JACK programs that allow for code re-use. Interfaces provide a mechanism for agents and capabilities to share plans.", "When an agent executes a plan, this plan will often call ordinary Java methods. It is important to remember that when this occurs, these methods must be available to the plan through having been declared in the agent or one of the capabilities that it uses. Therefore, any capability that uses this plan must include the defined methods, or the plan will not be able to run properly.", "The JACK Agent Language allows you to package up these dependencies into a Java ", "Interface", ". Any capability that wishes to include this plan must declare that it ", "implements this interface", ". If a capability implements the interface", ", it provides all the methods necessary to run the plan.", "A capability should fully describe the functionality it implements via JACK Agent Language declarations. In general, a capability definition will require declarations for the following:", "These declarations are provided by statements that occur at the field or member level of a capability definition. By convention, these statements should appear before the definitions of any regular Java data members and methods that the capability may contain.", "An example capability template showing ", "some", " of the declarations that can appear in a capability appears below:", "Each JACK Agent Language capability declaration is described in more detail in the following sub-sections.", "As for agents, the ", "#handles event", " statement declares that there are plans ", "within this capability", " that handle events of the given type. The declaration also implies that these events are ", "local", " to the capability and its sub-capabilities, which means that the connection between posting and handling does not cross the boundary between this capability and its enclosing capability. In other words, events of type ", "EventType", " that are posted externally to this capability are not handled within this capability, and the events of type ", "EventType", " that are posted within the capability are not visible for the enclosing capability. However, the declaration does not make the event type 'invisible' for inner capabilities; rather, this is decided in their definitions.", "The ", "#handles external", " statement declares that there are plans within this capability that handle events of the given type, and that this type is shared with the enclosing capability. This means that event posting and handling ", "does", " cross the capability boundary upwards. That is, the ", "external", " ", "keyword declares that the event in question may be handled by the parent capability or any of its sub-capabilities that declare that they handle this external event, and these capabilities' plans, if any, contribute to the plan set assembled to handle this event. Note that the keyword ", "event", " is optional.", "The ", "#posts event", " statement declares that there are plans or code within this capability that post events of the given type. The declaration also indicates that these events are local to the capability, which means that the connection between posting and handling does not cross the boundary between this capability and its enclosing capability. A ", "reference", " name is needed only if the event is to be posted from Java code within the capability.", "The ", "#posts external", " statement declares that there are plans or code within this capability that post events of the given type, and that this event type is shared with the enclosing capability. All plans from all capabilities that handle this shared event then compete to handle it. Note that the keyword ", "event", " is optional.", "The ", "#sends event", " statement declares that there are plans or code within this capability that send events of the given type. It is important to note that events are received at agent level (the addressable entity), which means events cannot be explicitly directed into a capability of another agent.", " ", "The ", "#private data", " statement declares that a Java object or a JACK beliefset of type ", "DataType", " is ", "local", " to the capability, and is accessible only from within the capability and its sub-capabilities. Note that the statement results in the instantiation of the beliefset or object using the specified constructor.", " ", "When a capability definition includes a statement of this form, it declares a named data,  ", "data_name", " of type ", "DataType", ". The named data is shared among all agents in the same process that have the same type as the agent in which the capability instance is created. If the same capability type is used by two different agent types, there will be a different instance of the named data created for each of the agent types. Although it is not enforced, ", "agent", " access should be shared, read-only access. As access to ", "agent", " data is intended to be read-only, the beliefset or object should be initialised when it is constructed. The first instance of an agent class that uses the beliefset or data object, causes it to be constructed.", " ", "When a capability definition includes a statement of this form, it declares a named data,  ", "data_name", ". The named data is shared among all the agents in the same process. Although it is not enforced, ", "agent", " access should be shared, read-only access. As access to ", "global", " data is intended to be read-only, the beliefset or object should be initialised when it is constructed. The first instance of an agent class that uses the beliefset or data object, causes it to be constructed.", " ", "The ", "#exports data", " statement declares that a Java object or a JACK beliefset of type ", "DataType", " is exported from the capability so that it is accessible from its parent capability. The export statement can also be used to make a data object or beliefset available at agent level, and accessible from other capabilities within the agent level. Note that the statement results in the instantiation of the beliefset or object using the specified constructor.", " ", "The ", "#imports data", " statement declares that a Java data object or JACK beliefset of type ", "DataType", " is shared with this capability and its enclosing agent or capability. Note that ", "no", " instantiation occurs as a result of this statement.", "The ", "#uses plan", " statement declares that this capability uses plans of the given type. The usage is unique for the capability in the sense that even if the same plan type is used in another capability, the plan instances extending from each use are wholly distinct. This means that even if they are used in a way so as to share a handled event (e.g. used by two 'sibling' capabilities where the handled event is external in both), the usages within the different capabilities generate their own plan instances independently.", "The ", "#has capability", " statement declares use of an inner capability. Note that the reference name is required. The inner capability is then accessible through the reference name.", "The remaining step in completing the capability definition is to specify the capability's data members and methods. When defining a capability's methods, it is possible to use some of the base methods that the ", "Capability", " class provides. Since all capabilities extend the ", "Capability", " class, these methods are always available. If any of the capability's plans require it to implement a particular interface, all the methods specified by this interface must be included among the capability's methods and be fully implemented.", "Once the desired set of ", "#", "-declarations", " has been added to a capability's definition, the ", "event", ", ", "plan", ", ", "beliefset", " and ", "capability", " components that the capability requires need to be defined. Each of these components contains their own data members and methods.", "While capabilities are not explicitly constructed by the user, they are brought into being when the enclosing agent is constructed. They can be initialised by overriding the ", "autorun", "()", " method, described below.", "Capabilities do not have a name in the same sense that agents do, but can be referred to through the chain of reference names used in the ", "#has capability", " statements. This reference name can be retrieved by calling the ", "toString()", " method on the ", "Capability", " instance in question.", " The reference name starts with the agent name", ", and thereafter the names used for traversing down the capability structure to the instance in question, where each name is separated with ':'. Thus, a capability name like ", "bob@builders:tiling:bathroom_tiling", " says that this is the capability instance ", "bathroom_tiling", " of the capability instance ", "tiling", " of the agent instance ", "bob", " at portal instance ", "builders", ".", "JACK Agent Language entities (i.e. plans, events and beliefsets) that belong to capabilities are each instantiated in slightly different ways. These differences mean that it is not always possible to determine the name of the capability to which the entities belong. For example, when a plan is instantiated, it is associated with an enclosing ", "NameSpace", " object, which is either a ", "Capability", " object or an ", "Agent", ". This object is accessible through the public ", "Plan", " member ", "__ns", ".", " ", "Event", " and ", "beliefset", " instances are not explicitly associated with the enclosing capability instance. This means that a plan cannot query an event or beliefset instance about which capability they belong to.", "The ", "postEvent", "()", " method is used to post events within capability code. This method is actually just a convenient method that refers to ", "getAgent", "().", "postEvent", "()", ".", "See the discussion of the ", "postEvent", "()", " method in the ", "Agents", " section for more details.", "The method is called on a capability instance to return the containing agent, which is generically typed.", "The ", "autorun()", " method is invoked before the agent is fully constructed. The invocation is at the end of the construction of the capability after all its sub-capabilities have been fully constructed. The ", "autorun", " method can be overridden in order to provide some initialisation when the capability is constructed.", "Events", " motivate an agent to take action. There are a number of event types in JACK, each with different uses. These different event types help model:", "Events are the origin of all activity within an agent-oriented system. In the absence of events an agent sits idle. Whenever an event occurs, an agent initiates a task to handle it. This task can be thought of as a thread of activity within the agent. The task causes the agent to choose between the plans it has available, executing a selected plan or plan set (depending on the event processing model chosen) until it succeeds or fails.", "If plan execution succeeds, the event that initiated it is said to have succeeded. If plan execution fails, there are two options. Under normal event", " handling, the event is said to have failed after the first instance of plan failure.", "Under BDI", " event handling, a number of plans can be selected for execution and these are attempted in turn, in order to try to achieve successful plan execution. If the set of chosen plans is exhausted, the event is said to have failed.", "Both cases are regarded as successful event handling.", "There are a number of event classes in the JACK Agent Language, each representing different types of motivation to act. Additionally, there are event types available that facilitate analysis and debugging of inter-agent communication. In general, these events fall into two broad categories:", "Normal events", " in JACK are analogous to events in conventional event-driven programming. That is, they represent transitory occurrences that initiate a single, immediate response from an agent.", "For example, suppose that an agent is being programmed to play soccer. If the agent receives a message from the simulation environment telling it where the ball is every second, this would be modelled as a normal event. It represents an occurrence that must be acted upon immediately or not at all. If the agent decides to do something (execute a plan instance) and that plan instance fails, it would not make sense to reconsider an alternative because the information that the agent is acting on is now out of date.", "When a normal event is received by an agent, the agent initiates a ", "task", " to handle it. This task involves the agent selecting and executing the first plan that is both ", "relevant", " and ", "applicable", " ", " to this event. These tests for relevance and applicability are performed on plans in the order that the ", "#uses plan", " statements occur in the agent or capability code.", "A plan is ", "relevant", " to a given event if it has a ", "#handles event", " declaration that matches the event, and its ", "relevant", "()", " method succeeds when executed.", "The agent then checks if the relevant plan is ", "applicable", " in the current circumstance. It does this by executing the ", "context", "()", " method of the plan. If the ", "context", "()", " method succeeds, it is chosen as the plan that the agent will execute in response to the incoming event. If the ", "context", "()", " method fails, the agent examines the next relevant plan.", "Simple ", "context", "()", " methods return either true or false, meaning that a single instance of the plan is either applicable or not applicable. However, more complex ", "context", "()", " methods may include ", "cursor expressions", " and involve binding of logical variables. These expressions attempt to unify a given expression with tuples in one or more beliefset relations. For every tuple that matches, the logical variables are bound. Each such match causes a separate plan instance to be generated.", "In the case of normal event processing the first such plan instance is chosen as the plan that the agent will execute in response to the incoming event.", "Each normal event is implemented as a JACK Agent Language class. Each event has a number of base members and methods to provide access to their functionality and data. Each of these base classes can be extended and unique members and methods added to events.", "The JACK Agent Language normal event classes are listed below and are described in the following sub-sections:", "Table 5-1: ", "JACK normal event classes", "The base class for all events in JACK is the ", "Event", " class. This class implements all the core event functionality required by the JACK runtime environment. A normal ", "Event", " is only ever generated by processing that occurs within an agent.", "Events are always ", "posted", " explicitly by statements within agent code. To say an agent posts an event means that an event is constructed and added to the agents own event queue to await processing. If an agent is idle, no code is being executed and an agent cannot post any events. In this case, an agent can only take action if an external (i.e. ", "MessageEvent", ") arrives.", "Events are posted:", "In each case, an instance of the event is posted using one of the event's ", "posting methods", ". The posting method acts as the event's constructor, creating an instance of the event and making it available to the agent's task manager.", "MessageEvent", "s represent events that are used to communicate with other agents. Whenever an agent needs to send a question, command or message to another agent, this information is packaged and sent as a ", "MessageEvent", ". Instead of representing an internal occurrence that initiates activity within the agent, ", "MessageEvent", "s represent an ", "external occurrence", " that initiates activity within the agent.", "MessageEvent", "s can also be used as a mechanism to allow an agent to experience or perceive the environment in which it is executing. That is, anything affecting the agent that does not originate from the agent's own internal processing should be sent to the agent as a ", "MessageEvent", ".", "MessageEvent", "s often represent transient requests that the agent may want to act upon. For example, if an agent is programmed to play a game such as soccer in a simulation environment, the environment may send the agent ", "MessageEvent", "s", " periodically to tell it where the ball is. Clearly, this is a message that is relevant and applicable only at the moment that it arrives. It serves to inform the agent about an external situation that may concern it. If the agent is a mid-fielder and it is sufficiently close, it may invoke a plan to attempt to intercept the ball. If it is not close enough it may try to cover a designated opponent. Alternatively, if the agent is a goal-keeper, it may attempt to move itself between the ball and the goal.", "In each case, the agent is taking action on information that is ", "applicable only at the moment at which it arrives", ". The agent must decide what to do with the information immediately, and once a course of action is chosen the information is discarded.", "MessageEvent", "s are sent to other agents:", "In order for agents running in different processes to send and receive message events, the JACK runtime environment must provide a communication infrastructure with message routing capabilities. This is done using the JACK DCI network. The JACK DCI network", " enables the establishment of portals between processes, through which agent messages can be directed as needed. Refer to the ", "Inter-agent Communications", " chapter for further details.", "The ", "TracedMessageEvent", " class contains information which enables inter-agent communication to be effectively displayed via an Agent Interaction Diagram (refer to the ", "Tracing and Logging Manual", " for more details on the Agent Interaction Diagram). This information is now available within the message event classes; consequently, ", "TracedMessageEvent", " was deprecated in JACK version 3.5.", "Belief-Desire-Intention (BDI)", " ", " events represent a different class of event to the ", "Event", " and ", "MessageEvent", " described in the previous section.", "One of the important aspects of the BDI reasoning model at a conceptual level is that it models ", "goal-directed behaviour", " in agents, rather than plan-directed behaviour. That is, an agent ", "commits", " to the desired outcome, not the method chosen to achieve it. While normal events represent transient information that the agent reacts to (such as the changing of a dial reading, or the location of a ball), BDI events allow an agent to pursue long term goals.", "When using the BDI reasoning model, an agent does not simply react to incoming information, but sets itself a goal which it then tries to achieve. Rather than distracting an agent from its goal, incoming events are added to an agents knowledge base and can subtly influence its behaviour.", "The key difference between normal events and BDI events is how an agent selects plans", " for execution. With normal events, the agent selects the first applicable plan instance for a given event and executes that plan instance only.", "The handling of BDI events is more complex and powerful. An agent can assemble a plan set for a given event, apply sophisticated heuristics for plan choice and act intelligently on plan failure. At least one of the following characteristics applies to each type of BDI event under the BDI model:", "Additionally, it is possible to further control BDI behaviour by setting ", "behaviour attributes", ". These attributes are described later in this chapter.", "When handling a BDI event, meta-level reasoning", " allows precise control over how an agent chooses a plan for execution from the set of applicable plans. Whenever there is more than one applicable plan instance for a given BDI event, a ", "PlanChoice", " event is posted within the agent. By choosing to handle this event, an agent can implement meta-level reasoning.", "If the meta-level reasoning plan fails and does not select a plan for execution, the default plan selection method is invoked. This is discussed in more detail in the chapter on meta-level reasoning.", "When handling BDI events, an agent will not always assume that failure of a chosen plan instance means the goal cannot be achieved. Instead, it may reconsider other applicable plans and try one of them instead.", "It is this property that allows agents to avoid many of the pitfalls of more primitive reasoning models. Rather than having 'one shot' at achieving a goal, an agent can try a number of approaches to solving the problem by attempting any number of applicable plans.", "This property controls how an agent takes into account the passage of time and changing circumstances when choosing alternative plan instances to handle a BDI event after the previous selected plan has failed. An agent may select an alternative plan in one of the following ways:", "If circumstances and the agent's beliefs haven't changed, both approaches are equivalent. However, if the applicable plan instances depend on the agent's current set of beliefs and these beliefs have changed, the recomputed set of applicable plans may be different from the original set. This is especially relevant if the agent is using the ", "SimpleRRTaskManager", ", or if the failed plan itself changed one or more beliefset tuples that affect the context calculations of other relevant plans.", "The JACK Agent Language event classes are listed below and are described in the following sub-sections:", "Table 5-2: ", "BDI event classes", "BDIFactEvent", "s", " represent internal events that arise due to the agent's own internal processing.", "The main difference between a ", "BDIFactEvent", " and a normal ", "Event", " is that when there is more than one applicable plan instance for a given ", "BDIFactEvent", ", the agent is able to perform meta-level reasoning", " to determine which instance it should execute. A ", "PlanChoice", " event is posted to trigger this meta-level reasoning, and if the agent has a plan that can handle it, it will execute this plan to determine which applicable plan instance it should execute.", "Once the agent has chosen a plan instance to handle a ", "BDIFactEvent", ", it will commit to this plan.", "If the plan instance succeeds, the ", "BDIFactEvent", " succeeds and returns to the plan that generated it.", "If the plan instance fails, the default behaviour is that the ", "BDIFactEvent", " fails and returns control to the plan that generated the ", "BDIFactEvent", ".", "BDIFactEvent", "s are usually posted under the following circumstances:", "For more information on beliefset modification callbacks, refer to the ", "Beliefset Relations", " chapter.", "In each case, an instance of the event is posted using one of the event's ", "posting methods", ". The posting method acts as the event's constructor, creating an instance of the event and making it available to the agent's task manager.", "The BDI event processing properties supported by ", "BDIFactEvent", "s by default are summarised in the following table:", "Table 5-3: ", "Default BDI event processing properties, supported by ", "BDIFactEvent", "s", "BDIMessageEvent", "s", " are the same as normal ", "MessageEvent", "s but with BDI extensions. They allow the agent more scope when reasoning about how it should respond to a message received from another agent or process.", "Like ", "BDIFactEvent", "s", ", ", "BDIMessageEvent", "s allow the agent to perform meta-level reasoning when more than one plan instance is applicable. This lets the agent choose which of its available set of responses is most appropriate according to given criteria.", "For example, suppose an agent programmed to play as a soccer goal keeper in a soccer simulation has three plans that are applicable when defending a penalty \u2013 jump to the left, jump to the right and stay in the centre. When a penalty is called (arriving as a message event) all three of these plans would be applicable.", "If the message event is of class ", "MessageEvent", ", the agent can only select the first plan declared in the agent or capability. However, if the message event is a ", "BDIMessageEvent", ", the agent has the option of performing meta-level reasoning to determine which plan is best. This meta-level reasoning may take into account various statistics from the game and past successes of each approach, then make the selection accordingly.", "Once the agent has chosen a plan instance to handle a ", "BDIMessageEvent", ", it will commit to this plan. If the plan instance succeeds, the ", "BDIMessageEvent", " succeeds and returns to the plan that generated it.", "If the plan instance fails, the default behaviour is that the ", "BDIMessageEvent", " fails and returns control to the plan that generated the ", "BDIMessageEvent", ".", "This default behaviour can be overridden by adding either of the following to a ", "BDIMessageEvent", " subclass:", "BDIMessageEvent", "s can be sent by agents or by other Java processes running within a JACK application. Like ", "MessageEvent", "s, they are sent under the following circumstances:", "In order for agents running in different processes to send and receive message events, the JACK runtime environment must provide a communication infrastructure with message routing capabilities. This is done using the JACK DCI network. The JACK DCI network", " enables the establishment of portals between processes, through which agent messages can be directed as needed. Refer to the ", "Inter-agent Communications", " chapter for further details.", "The BDI event processing properties supported by ", "BDIMessageEvent", "s by default are summarised in the following table:", "Table 5-4: ", "Default BDI event processing properties, supported by ", "BDIMessageEvent", "s", "Like ", "MessageEvent", "s, ", "BDIMessageEvent", "s have a ", "message", " member and can be displayed on an Agent Interaction Diagram. Refer to the ", "Tracing and Logging Manual", " for more details on the Agent Interaction Diagram.", "The ", "BDITracedMessageEvent", " class contains information which enables inter-agent communication to be effectively displayed via an Agent Interaction Diagram (refer to the ", "Tracing and Logging Manual", " for details on the Agent Interaction Diagram. This information is now available within the message event classes and consequently the ", "BDITracedMessageEvent", " was deprecated in JACK version 3.5.", "BDIGoalEvent", "s", " are unlike the other BDI events described so far. The ", "BDIFactEvent", ",", " and ", "BDIMessageEvent", " extended existing normal events with some of the BDI reasoning capabilities. The ", "BDIGoalEvent", ", however, is exclusive to the BDI model of agent reasoning. Unlike the other BDI events, it offers all the BDI features by default.", "The ", "BDIGoalEvent", " represents a ", "goal", " or ", "objective", " that an agent wishes to achieve. Therefore, instead of representing reactive behaviour, ", "BDIGoalEvent", "s represent pro-active behaviour in an agent. When an agent posts and handles a ", "BDIGoalEvent", ", it is adopting a goal. It will then use all the reasoning powers at its disposal \u2013 the ability to discard and reconsider plans, the ability to reassess which plans are applicable and the ability to choose between the plans that are applicable, in order to satisfy that goal.", "An example of this might be a pilot agent adopting a goal to land an aeroplane. This would be posted internally as a ", "BDIGoalEvent", ". This then becomes an objective that the agent commits to achieving, and the agent should try every applicable plan until one succeeds, and only give up and fail when no more applicable plan instances remain to be tried.", "BDIGoalEvent", "s usually arise within an agent as a result of executing specific JACK Agent Language statements in a reasoning method. These statements represent the agent posting the goal for itself, or choosing to undertake a task to satisfy the goal. When an agent adopts a goal, it can do so with the following objectives in mind:", "Each of these objectives is specified by a separate reasoning method statement (", "@achieve", ", ", "@insist", ", ", "@test", " and ", "@determine", "). These reasoning methods are described fully in the ", "Plans", " section.", "BDIGoalEvents", " can also be posted and sub-tasked \u2013 they do not arise solely from the reasoning method statements ", "@achieve", ", ", "@insist", ", ", "@test", " and ", "@determine", ". However, if they do not arise from one of these statements, the mode (discussed in the section on ", "Event", " ", "members", ") will be set to null.", "The BDI event processing properties supported by ", "BDIGoalEvent", "s by default are summarised in the following table:", "Table 5-5: ", "Default BDI event processing properties, supported by ", "BDIGoalEvent", "s", "An ", "InferenceGoalEvent", " uses ", "RuleBehavior", ", which extends ", "BDIBehavior", " by processing all applicable plans (rather than only one of them). The behaviour is the same as ", "BDIBehavior", ", except for the following:", "The default behaviour is to ignore plan failure (i.e. the event always succeeds). The ", "RuleFailure", " attribute only applies to events that use ", "RuleBehavior", " (e.g. ", "InferenceGoalEvent", "s", ").", "The behaviour of an ", "InferenceGoalEvent", " is the same as ", "BDIBehavior", " in terms of forming the applicable set and in terms of meta-level plan choice (although in this case, all plans will be processed). An ", "InferenceGoalEvent", " can be fine tuned in the same way as other BDI events, using the behaviour attributes. Behaviour attributes are discussed in detail later in this chapter. The default ", "BDIBehavior", " attribute settings are as follows:", "The default ", "RuleBehavior", " attribute setting is:", "Note that an ", "InferenceGoalEvent", " can only be posted. To achieve the same behaviour when sending an event between agents, the ", "#use behavior RuleBehavior", ";", " declaration is added to an event which has extended a normal message event. For example:", "PlanChoice", " events are a separate class of event altogether, but they are included with BDI events because they represent the mechanism whereby an agent performs meta-level reasoning about the handling of BDI events.", "Unlike the other event classes in the JACK Agent Language, a user would not explicitly post a ", "PlanChoice", " event by executing a method or a reasoning method statement in a plan. Instead, ", "PlanChoice", " events are posted internally by an agent whenever:", "When this happens, the agent is given an opportunity to choose which of the applicable plan instances it will execute. The task to handle this ", "PlanChoice", " event proceeds like any other task execution in JACK. The agent looks for plan instances that are relevant to this ", "PlanChoice", " event and applicable under the current circumstances, selects one and then executes it. The plan should examine the set of applicable plans and select one for the agent to try.", "Because an agent handles a ", "PlanChoice", " event in the same way that it handles a normal event, the processing of ", "PlanChoice", " events is referred to as ", "meta-level reasoning", ". It represents reasoning (task execution) that an agent undertakes not to do work, but to decide what is the best approach to doing work.", "Plans that are used for meta-level reasoning, as opposed to handling normal or BDI events, are distinguished by the following JACK Agent Language declarations:", "The plan's ", "#handles event", " declaration identifies it as one that handles ", "PlanChoice", " events. Since ", "PlanChoice", " events cannot be declared, the ", "event_handle", " component will be assigned a reference to any ", "PlanChoice", " event that arises. Therefore, plans that include a ", "#handles event PlanChoice", " ", "event_handle", ";", " declaration will handle ", "all", " ", "PlanChoice", " events that arise within the agent unless further methods for discrimination are supplied.", "This discrimination is provided by the ", "#chooses for", " event declaration. The ", "#chooses for", " event declaration identifies the events for which the plan's meta-level reasoning is relevant. Therefore, if a meta-level reasoning plan includes one or more ", "#chooses for", " event declarations, the plan will only be relevant for a given ", "PlanChoice", " event if that ", "PlanChoice", " event was caused by one of the listed events. That is, the agent will only use this meta-level plan to choose between multiple plan instances if those plan instances are all applicable to the listed event.", "More information on these declarations is supplied in the ", "Plans", " section.", "Each BDI event type has a default behaviour that determines what happens with respect to plan reconsideration, plan set recalculation and meta-level reasoning", ". This default behaviour can be modified by setting the ", "behaviour attributes", " of the event.", "The ", "#set behavior", " declaration is used in BDI event definitions to define how an agent processes an instance of this event when it arises. Options that can be configured include things such as whether the agent will retry the event if an attempted plan fails and whether or not the agent can reason about which plan it executes in response to the event.", "Not all BDI events offer all these properties by default. However, each property is present with one or more BDI event. Furthermore, the ", "#set behavior", " declaration can be used to customise the properties of BDI events in each particular application.", "Changes to behaviour attributes for BDI Events take two basic forms, as follows;", "The first form is the most common and is used to set the behaviour of existing BDI events. The second form is used to define custom plan choice events to use for meta-reasoning with the event being defined. Both types are described in the sections that follow.", "Note that the exact behaviour generated by setting a particular behaviour attribute", " can depend on the setting of another behaviour attribute. For example, the behaviour generated by the ", "Recover", " attribute is linked to the setting of the ", "ApplicableSet", " attribute.", "With their default values of:", "an event will be reposted on plan failure and the applicable set will be recomputed anew (i.e. possibly with different bindings). Another applicable plan will then be tried (any plan instances already tried and failed will be discarded). However, if the ", "ApplicableSet", " attribute had a value of ", "once", ", the applicable set would not be recomputed before another plan was selected.", "This attribute can be added to a BDI event to define how plan processing should act upon plan failure. Possible values are listed in the following table:", "Table 5-6: ", "Possible values for the ", "Recover", " attribute", "This attribute can be added to a BDI event to define how to form the applicable set during plan processing, and in particular with respect to recovering:", "Table 5-7: ", "Possible values for the ", "ApplicableSet", " attribute", "This attribute can be added to a BDI event to define how an applicable plan should be chosen. This setting is overridden by any meta-level reasoning that is in place:", "Table 5-8: ", "Possible values for the ", "ApplicableChoice", " attribute", "This attribute can be added to a BDI event to define how plans are excluded from the applicable set:", "Table 5-9: ", "Possible values for the ", "ApplicableExclusion", " attribute", "The ", "two", " default values are;", "This attribute can be added to a BDI event to define how to process plan context for generating multiple plans instances:", "Table 5-10: ", "Possible values for the ", "PlanBindings", " attribute", "This attribute can be added to a BDI event to define how to deal with exceptions from plans:", "Table 5-11: ", "Possible values for the ", "OnError", " attribute", "This attribute can be added to a BDI event to define under which circumstances the ", "PlanChoice", " event should be posted:", "Table 5-12: ", "Possible values for the ", "PostPlanChoice", " attribute", "Setting ", "PostPlanChoice", " to ", "never", " resets all settings for this attribute. All required attributes can then be added.", "This attribute can be added to a BDI event to declare that the event type being defined should use ", "MyPlanChoice", " which is constructed inline. The class ", "MyPlanChoice", " needs to be defined and it needs to extend class ", "PlanChoice", ".", " The objective of ", "automatic events", " is to provide a mechanism for an agent to automatically post particular events when certain belief states arise. Automatic events use: ", "When an agent or capability declares that it handles an event which has a ", "#posted when", " definition, it will automatically have the necessary belief monitoring activated. The details are described in the section on the ", "#posted when", " declaration.", "The use of the ", "#uses data", " and ", "#posted when", " statements to achieve automatic belief monitoring is illustrated in the following example:", "The block after the ", "#posted when", " condition is optional. If there are no event fields that need to be initialized when the event is actually posted, it can be omitted as shown below:", "The condition is evaluated once initially, and subsequently whenever a change occurs that might affect the condition. If the condition evaluates to true, the event is posted with the logical variables bound as they were in the condition. If there are multiple bindings, a separately bound event will normally be posted for each possible binding. The exception occurs when an event with that particular binding has already been posted to signify the condition becoming true and the condition with that binding has not become false in the meantime.", "Suppose that in the above example, ", "rv", " initially contained the following tuples:", "then two separate events would be posted; one with ", "$x", " = 400 and one with ", "$x", " = 500.", "However, if ", "rv", " initially contained no facts and the fact", "was asserted, an event would be posted with ", "$vessel", " = \"vessel1\" and ", "$x", " = 400. If", "was then asserted, another event would be posted with ", "$vessel", " = \"vessel2\" and ", "$x", " = 500. However, note that another event with ", "$vessel", " = \"vessel1\" and ", "$x", " = 400 would ", "not", " be posted because the condition (with ", "$x", " = 400) is still true and had never been false in the intervening period.", "If the condition was more complicated (e.g. involved more than one beliefset) and the addition of one fact meant that multiple bindings became true, multiple events would be posted.", "JACK Agent Language events not only support the concepts described in the last section, but also provide type safety within agent definitions. This is because both agents and plans need to declare the events that they handle and the message events that they send. As with function prototypes, this ensures that any type mismatches in an event's parameters can be detected and flagged during compilation.", "Event definitions follow one of the formats given below:", "Each part of these definition statements is explained in the following table:", "Table 5-13: ", "Event component definitions", "The event classes described earlier in this chapter include a number of base members and methods. These members and methods are described in the following subsections. In each case, the event classes that contain these members and methods are identified.", "The ", "getAgent", "()", " method returns the ", "Agent", " that instantiated the event or in other words, the agent which is processing the event.", "The ", "from", " member describes the location of the agent that originally posted the event. This will refer to a different agent than the one returned by ", "getAgent", "()", " unless the agent posted a message to itself. This member is only available in message events used for inter-agent communication, according to the following table:", "Table 5-14: ", "Availability of the ", "from", " member", "Whenever a message event is sent from one agent to another, the name and address of the agent that sent it is automatically assigned to this member. This address is a string that represents both the agent's name and the ", "portal", " at which it is running on the DCI network.", " Refer to the ", "Inter-agent Communications", " chapter for further details.", "Agents that receive a message event can query the ", "from", " member to determine where the message came from. If they want to send a response, they can do so using the ", "@reply", " statement in a reasoning method, or the ", "reply", "()", " method in ordinary code. Both of these constructs automatically extract the ", "from", " member from the supplied event that originated the interaction.", "Because all message events extend from the ", "MessageEvent", " event class, every defined message event class will include this member.", "This member is available only in message events, as shown in the following table:", "Table 5-15: ", "Availability of the ", "message", " member", "The ", "message", " member is provided for message events so that they can be traced using the Agent Interaction Diagram (if this JACK option is enabled). Whenever writing a posting method for a message event, a ", "String", " may be assigned to this member. If so, this text will be propagated to the Agent Interaction Diagram, allowing easy identification of the instance of this message event. Refer to the ", "Tracing and Logging Manual", " for details on the Agent Interaction Diagram.", "This member is available in ", "BDIGoalEvent", "s", " only, as illustrated in the following table:", "Table 5-16: ", "Availability of the ", "mode", " member", "This member holds a ", "String", " that represents the statement used to post a given instance of a ", "BDIGoalEvent", ". By accessing this method, an agent can determine why it is handling a given ", "BDIGoalEvent", " instance. This information is stored in the ", "mode", " member only when ", "@achieve", ", ", "@determine", ", ", "@insist", " or ", "@test", " are used to post the ", "BDIGoalEvent", ". If it did not arise from one of these statements, the mode will be set to ", "null", ".", "For example, suppose an agent that drives a networking system needs to derive information about the state of the network before attempting to establish a new connection. When it wants to connect to a new system, it first posts a ", "BDIGoalEvent", " using a ", "@test", " statement. Assuming the connection is successful, the agent would post a ", "BDIGoalEvent", " using the ", "@achieve", " statement.", "The plan that handles this event can query the event's ", "mode", " member to determine if the agent wants the connection tested or whether a connection should be established. In each instance the strings \"test\" and \"achieve\" would be stored in the ", "mode", " member respectively. In each case, the plan's processing would need to be different.", "The strings for each ", "BDIGoalEvent", " posting mode are given in the following table:", "Table 5-17: ", "Posting modes", "This method indicates whether the agent has received any replies to a given message event. It returns a triggered cursor, which will test whether the given message event's reply queue is empty.", "A message event can have any number of pending replies. A reply is also a message event, but it must have been sent using a ", "reply", "()", " method or an ", "@reply", " statement.", "If the agent has received at least one reply to the ", "MessageEvent", " that you call this method on, the cursor statement will return ", "true", " when tested.", "If the agent has yet to receive a reply to the ", "MessageEvent", " that this method was called on, the cursor statement will return ", "false", " when tested.", "Because the cursor is triggered, it can be used in a ", "@wait_for", " statement to make the agent wait for replies before continuing with a given task. Doing this provides the option of implementing synchronous inter-agent messaging, rather than the default asynchronous method. After sending a message event to another agent, a reasoning method can make the task wait on the returned triggered cursor, effectively blocking it until such a reply arrives.", "This method is only provided on message events as shown in the following table:", "Table 5-18: ", "Availability of ", "replied", " method", "This method complements the ", "replied", "()", " ", " method described above. It allows retrieval of a reference to a ", "MessageEvent", " that has been sent as a reply to the ", "MessageEvent", " that it is called on.", "When this method is called, it returns the first reply in the reply queue, removing it from the queue at the same time. If there are no message events in the reply queue, it throws an ", "Error", ". This method is only provided on message events as per the following table:", "Table 5-19: ", "Availability of the ", "getReply", " method", "Events have a small number of JACK Agent Language specific constructs at the field or member level. These constructs are described in the following subsections.", "This is one of the event's ", "posting methods", ". A posting method describes how the event can be constructed and posted or sent.", "An event's posting method must be used whenever an instance of the event needs to be created. This is normally when agent or beliefset code executes the ", "post", "()", " method, or a plan uses the ", "@post", " or ", "@subtask", " statements. The posting method describes everything that the agent needs to do to construct an instance of the event.", "A posting method", " declaration is as follows:", "Each part of this declaration is described in the following table:", "Table 5-20: ", "Posting method declaration components", "An example event definition including a posting method", " is given below:", "In this example, the posting method's name is ", "foundTreasure", ". Whenever the agent believes it has found some treasure while executing its own methods, it can use the ", "foundTreasure", " posting method to create a ", "FoundTreasureEvent", " which it can post or send to initiate a response.", "The ", "foundTreasure", " posting method requires three arguments if the event is to be posted successfully. These are the treasure's latitude, longitude and value. All that the posting method's body does is populate the event's data members with this information so that it will be included in the posted event.", "An event may have as many posting methods as you want. You may use different posting methods when instances of the event should take a different form under different circumstances. In particular, you may want to implement multiple posting methods using the idea of a ", "polymorphic class", " which allows you to use the same posting method name while defining different versions of the posting method for different arguments.", "For example, suppose an agent that keeps track of a racing leaderboard gets messages sent to it by another agent whenever each racer completes a lap. This message may take two forms: one when the racers have completed a lap during the race, and another when the racers have completed the final lap. In each case, the message may convey different information about the racer. The agents can use the same message event for each situation, but a different posting method to propagate the event instance with the required information in each case.", "Just as you can extend the base ", "Event", " classes you can also extend your own event definitions. You may choose to define generic event types and then extend them to more specific cases. For example, a generic ", "FoundTreasureEvent", " might be used as the base class for a ", "FoundDiamondEvent", " and a ", "FoundGoldEvent", "). When you choose to do this, you should only define posting methods for the outermost (leaf) event classes.", "You may wish to extend your own event classes if, for example, you require:", " The ", "#uses data", " statement in an event definition has the following form:", "where the ", "DataType", " and ", "data_name", " match the data or beliefset declaration in the enclosing capability or agent. This statement is added to an event definition to provide access to the enclosing capability or agent's belief structures.", " The ", "#posted when", " statement has the following form:", "where the ", "condition", " is a logical condition of the same form as a condition for a ", "@wait_for statement", ". In particular, it must be a triggered condition, i.e. include conjuncts that are triggered, such as beliefset cursors etc.", "Note that the ", "elapsed()", " and ", "after()", " methods are plan methods and thus not available for events \u2013 if there is a requirement for issuing a regular recurrent event stream, the use of a plan is recommended.", "The body after the condition is optional and consists of any initialisation that should be done if and when the event is posted. The body is the same as that of a normal posting method declared using ", "#posted as", ". If no initialisation is needed, the entire body (including the braces) may be omitted.", "If an event definition includes a ", "#posted when", " statement, the compiler deals with logical variables in the event by providing a logical environment in which to evaluate the condition, and later providing new logical environments and bound variables for the automatic events being posted.", "An event definition may include several ", "#posted when", " and any number of ", "#posted as", " statements just like any other event. The former will then issue automatic events according to their conditions, and the latter would be used exactly as before.", "The ", " ", "#set transport", " statement is used to signal which transport format is to be used for message events. It has the following form:", "where ", "format", " is either ", "jacob", " or ", "java", ". Since release 4.1, the default format is ", "jacob", ". Although ", "jacob", " is generally more efficient for transport, there are some things that ", "jacob", " does not support (e.g. arrays). In such cases, ", "java", " format should be specified using the ", "#set transport", " declaration,", "If the ", "#set transport", " statement is used to specify ", "java", " format, the event is compiled to use Java serialization.", "jacob", " format provides support for transport in binary, text or XML style. The default style with ", "jacob", " format is binary. It is possible to specify the style processwide by setting the property ", "JACOB.OutputType", " to one of ", "(ascii,binary,xml)", ".", "In JACK, posting methods create instances of the events to be posted or sent. These instances are then provided as arguments to the reasoning statements or methods which are responsible for their posting or sending (e.g. ", "post", "()", ", ", "send", "()", ", ", "@post", " ", "...). The event's posting methods are accessed through the event reference provided in the ", "#sends", " event or ", "#posts", " event declaration. Note that there is only one ", "#sends", " or ", "#posts", " event declaration for a given event type in any agent or plan. Event instances are created in an agent or plan by using the event's posting method(s). The process is illustrated below.", "JACK provides a runtime networking environment on which different agent processes can operate. Agents can address messages (", "MessageEvent", "s, and ", "BDIMessageEvent", "s) to one another by specifying the name of the destination agent and, if applicable, its portal and host. The JACK runtime network then takes care of routing this message to its desired destination.", "Not all agents need to run in independent JACK processes. Often more than one agent will share the same process. When this is the case, the routing of messages between them is trivial. All that the source agent needs to know is the destination agent's name to send the message accordingly.", "For agents to communicate with one another, the following requirements must be met:", "When agents are running in separate processes, The JACK communications layer needs to be used to allow these agents to communicate. This communications layer is known as the DCI", " network.", "The DCI network is layered in such a way that different underlying transport mechanisms can be accommodated. By default, JACK uses the UDP transport protocol which is available on existing TCP/IP networks. This protocol is fast but connectionless and it does not guarantee delivery, so JACK provides a thin layer over UDP which provides reliable peer-to-peer communications.", "When agents in remote processes need to be able to communicate, the processes need to be told how to communicate with one another. Each process has its own ", "portal", " and these connect to each other to provide a communications link for the agents in each process. A pair of portals can be connected explicitly, or a name-server can be used so that portals can connect on the fly as needed.", "The full name of an agent takes the form ", "agent", "@", "portal", ", where ", "agent", " refers to the name given to an agent on creation and ", "portal", " refers to the named portal assigned to the process in which the agent is running. The process may be running on a remote host or the local machine. To avoid ambiguity, it is recommended that the full name of an agent be used at all times when sending messages.", "The easiest way to set up a DCI network is to designate one of the processes as a ", "name-server", ". This simply means that whenever an agent tries to send a message to an agent at an unknown ", "portal", ", the agent will query the name-server to try to locate the portal. If the name-server knows about the unknown portal, a connection to it is silently established. Otherwise, the message will be undeliverable and the send request will fail.", "If there is no designated name-server, all connections must be explicitly requested. Any explicit connection request must be made by one (and only one) of the two processes comprising each connection.", "Processes automatically keep their name-server(s) informed of new connections that they make. When a process makes an initial connection to a name-server, the name-server will update its list of known addresses. This can be used to implement a robust network containing two or more name-servers so that no information is lost if one name-server goes down and subsequently comes up again.", "If a process exits for any reason, it can be restarted and communication will resume from the restart time. Any messages sent while the process was not running will be lost.", "Portals", ", name-servers", " and connections", " can be established on the command line, provided that a call has been made to the JACK initialisation method:", "The simplest example is connecting two processes so that agents in each of them can communicate with each other. Suppose one of them is called ", "Speaker", " and the other is called ", "Listener", ". To connect them using a name-server, the two processes would be run as follows:", "The first process creates a portal called ", "listener", " bound to UDP port ", "xxxx", ".", "The second process creates a portal called ", "speaker", ". It did not specify a particular port so a random port will be allocated for it. It also specifies a name-server, so it will connect to the name-server portal immediately.", "To connect the two processes using an explicit connection, the two processes would be run as follows:", "As in the name-server example, the ", "listener", " portal did not bother to choose a specific UDP port because there was no need. However, the ", "listener", " portal had to specify a particular port so that ", "speaker", " would know where to connect to.", "An application can create a portal without the use of the ", "-dci.new", " command line option. By default the portal associated with an application has name ", "%portal", ", host ", "localhost", ", and a port number that is the next available port. However, if the Java properties ", "jack.portal.name", ", ", "jack.portal.host", " or ", "jack.portal.port", " are set, then these values will be used instead. This means that if the portal is being created solely for tracing purposes, (refer to the ", "Tracing and Logging Manual", "), then there is no need to include an ", "init(args)", " call in  the ", "main()", " method of the application.", "Table 6-1: ", "DCI command line summary", "The above DCI command line functionality can also be achieved in the JACK code through the following static methods in the class ", "aos.jack.jak.core.Dci", ".", "The ", "create", " method corresponds to the ", "-dci.new", " command line argument. This method needs to be called before the first agent is created. ", "name", " is the name of the portal, and ", "desc", " is the description string that follows the '=' sign on a command line.", "The ", "connect", " method corresponds to the ", "-dci.con:P1->P2=host:port", " command line argument. This method can be called at any time to establish a connection. ", "lname", " is the local portal's name, ", "rname", " is the remote portal's name, and ", "rdesc", " is the description string that follows the '=' sign on the command line.", "The ", "nameserver", " method corresponds to the ", "-dci.ns:host:port", " command line argument. This method can be called at any time to establish a new, additional name server to use. ", "rdesc", " is the name server specification string that follows the \"", "-dci.ns:", "\" on the command line.", "The ", "setTimeout", " method corresponds to the ", "-dci.timeout", " command line argument. This method can be called at any time to change the timeout period for the next connection request.", "Note that all of the above methods except ", "setTimeout()", " throw a ", "DciException", ".", "In addition, the following static methods are available to determine whether a particular agent is running and accessible on the DCI network.", "This form of the ping method performs one ping only and does not attempt any connection. It does not distinguish between different types of failure and simply returns 'true' on success and 'false' on any kind of failure.", "This form of the ping method performs one ping only and does not attempt any connection. This method times-out after 30 seconds. The possible return values are described in the table at the end of this section.", "With this version of ", "multiPingOk", ", if the given portal is not connected but a nameserver is present, then a connection attempt is made before the ping is attempted. One ping is attempted and if it is unsuccessful, more pings are attempted at intervals of 1 second for a total waiting period of 30 seconds. It returns 'true' or 'false' for success or failure.", "This version of ", "multiPingOk", " is like ", "multiPingOk(String)", " but it allows the timeout and interval to be specified.", "This version of ", "multiPingOk", " is like ", "multiPingOk(String)", " but it allows the timeout and interval to be specified plus it returns the same values as ", "ping(String)", " which are described in the table at the end of this section.", "The possible return values from the methods returning ", "int", " are described in the following table:", "Table 6-2: ", "Return values from ", "ping", " and ", "multiPing", "These values are defined in ", "aos.dci.Portal", ".", "The ", "Plan", " class", " describes a sequence of actions that an agent can take when an event occurs. Whenever an event is posted and an agent adopts a task to handle it, the first thing the agent does is try to find a plan to handle the event.", "Plans can be thought of as pages from a procedures manual, or even as being like methods and functions from more conventional programming languages. They describe, in explicit detail, exactly what an agent should do when a given event occurs. Equipped with a set of plans, an agent has a set of skills and procedural knowledge that it can draw upon as required. When the event that a plan addresses occurs, the agent can execute this plan to handle it.", "Each plan is capable of handling a single event. The event it can handle is identified by the plan's ", "#handles event", " declaration. When an instance of a given event arises, the agent may execute one of the plans that declare they handle this event.", "An agent may further discriminate between plans that declare they handle an event by determining whether a plan is ", "relevant", ". It does this by executing the ", "relevant", "()", " method of each plan. If plans do not specify a ", "relevant", "()", " method, they are relevant for all instances of that event. When present, the ", "relevant", "()", " method lets a plan specify exactly which instance of a given event it is relevant for.", "Once the relevant plan(s) have been identified, the agent determines which of these are ", "applicable", ". It does this by executing the plans' ", "context", "()", " method. The context method is a JACK Agent Language ", "logical expression", " that can bind the values of the plan's ", "logical members", ". For every possible set of bindings, a separate applicable instance of the plan is generated.", "When the agent has found all applicable instances of each relevant plan, it selects one of these to execute. If the event is a BDI event, this may cause a ", "PlanChoice", " event to be posted, which may initiate some meta-level reasoning", " within the agent to select the most appropriate plan instance. Refer to the ", "Meta-Level Reasoning", " chapter for more details on meta-level reasoning.", "When the agent executes a plan, it starts by executing the plan's ", "body", "()", " method. The body method is a special kind of method in the JACK Agent Language called a ", "reasoning method", ". Reasoning methods", " are quite different from ordinary methods in Java, as they are bound by extra logical rules and conditions. Each statement in a reasoning method is treated as a logical statement that can either succeed or fail.", "Failure of a plan statement will cause the ", "body", "()", " method to fail unless the plan specifically allows for this possibility. If execution proceeds to the end of the ", "body", "()", " method, the ", "body", "()", " method succeeds.", "The ", "body", "()", " method can call other reasoning methods as it executes. These reasoning methods must be declared in the plan using the ", "#reasoning method", " declaration. They help break complex processing down into smaller components and make plans both simpler to understand and more scalable.", "All reasoning methods can include JACK Agent Language ", "reasoning method statements", ". These statements are identified by a preceding ", "@", " symbol, and describe logical behaviour that the reasoning method should adhere to. If a reasoning method statement is violated the reasoning method also fails. Reasoning methods execute as ", "Finite State Machines", " (FSMs).", "Finite State Machines", " (", "FSM", "s) are a standard concept in computer science. They describe execution engines that represent calculations and state changes in atomic, indivisible steps. In a finite state machine, execution may be suspended or switched, but only at designated points. Each step in the execution is guaranteed to be atomic, and once started will not be interrupted until it is complete. These atomic steps are normally quite small, but nonetheless the atomic nature of each step is assured.", "Finite State Machine statements", " (or FSM statements) are significant in the JACK Agent Language because Java is a multi-threaded language where switching between execution threads is normally the responsibility of the programmer. The Java execution engine does not guarantee safe points at which it will switch execution threads, so it is up to the Java programmer to implement object locking and any other concurrency controls which may be required.", "With FSM statements, however, multi-threading is taken care of by the JACK kernel. Each statement is executed in a series of atomic steps, between which the agent can switch to other execution threads safely. All reasoning methods and task executions in JACK are FSMs, as are statements that execute subtasks synchronously with the parent task (such as ", "@subtask", ", ", "@achieve", ", ", "@insist", ", ", "@test", " and ", "@determine", "). This ensures that the statements they contain execute in safe, atomic steps. These steps are not always whole statements: sometimes a single statement may consist of multiple component steps.", "The minimal format for the definition of a plan is given below:", "Each component of this definition is explained in the following table:", "Table 7-1: ", "Components of a Plan definition", "Like agents and events, plans can include normal Java members and methods. The user may choose to add these to implement certain low-level functionalities.", "Some members and methods are supplied automatically in JACK. These members and methods enable the user to:", "Each of these members and methods are summarised in the following table and are described in more detail below:", "Table 7-2: ", "Plan methods", "getAgent", "()", " can be used anywhere within a plan to access the instantiating agent. It can be used within a plan to access the agent's ", "timer", " member and the ", "name", "()", " method. It can also be used to access user-defined agent methods and members.", "Note that ", "getAgent()", " has a return type of ", "Agent", ". An explicit cast is then required to provide access to user-defined agent methods and members. A preferred alternative to ", "getAgent()", " is to use the ", "#uses interface Interface reference", " declaration which provides access to the enclosing agent with the correct type cast. This is described in more detail in the section on plan declarations in this chapter.", "Relevance", " is the first filter that the agent applies when determining which plan to execute when a given event occurs. To be relevant, the plan must declare that it is capable of handling the kind of event that has arisen (via the ", "#handles event", " declaration) and that it is relevant to the event instance (via the ", "relevant", "()", " method).", "Not all plans have a ", "relevant", "()", " method. When present, it provides the agent with a filter to exclude plans that will definitely not be able to handle the event. For example, if the plan is only relevant when certain parameters are passed, or when some parameters have specific values, this can be tested by the ", "relevant", "()", " method. If the event is not one that the plan can handle, the agent can put it aside immediately. The ", "relevant", "()", " method provides a finer granularity for determining relevance than just the distinction between events. It can actually allow the agent to have plans to discriminate between instances of the same event when that event has different parameters types, or different values for a given parameter.", "The ", "relevant", "()", " method always takes the following form:", "That is, it must always be a static boolean method. If this method returns true, the plan is relevant to the event. If not, the plan is not relevant to the event.", "The body of the ", "relevant", "()", " method can perform any Java processing you want. Usually, however, it will test one or more of the event's members to make a decision.", "For example, suppose a prospecting agent that travels around looking for treasure has a plan that describes how to call in a helicopter to pick up some treasure it has found. Suppose also that the agent includes a ", "FoundTreasureEvent", " which is generated when treasure is discovered. If the helicopter costs $500 to call in, the plan would only be relevant if the treasure found is worth more than $500. The ", "relevant", "()", " method can check the value of the ", "FoundTreasureEvent", "'s ", "val", " field and if it is greater than $500, return ", "TRUE", ".", "Using a ", "relevant", "()", " method in this way, the agent can filter out those plans it knows it won't want to execute before proceeding with the applicability calculations described in the following sub-section. Typically, these applicability calculations are more resource-intensive, so well-thought out ", "relevant", "()", " methods can improve the computational efficiency of the application.", "The ", "relevant", "()", " method is especially useful if an event has more than one posting method. If different posting methods set different properties and provide different number of parameters, this method can be used to catch instances of the event posted by one posting method and not the others.", "For example, if an agent keeps track of racers, and this agent posts an event whenever a racer completes a lap, the event may take two forms. One form may represent the completion of a lap during the race, whereas the other may represent the completion of the final lap at the end of the race. If the plan is to compose a final leaderboard, this plan will only be relevant when the final lap is complete, not for the intermediate laps. By testing the parameters supplied with each lap instance event, the plan can identify the event for which it is relevant.", "The context method is the next filter that the agent applies when determining which plan to execute when an event occurs. The context method usually contains a logical condition that tests one or more of the agent's beliefset relations and/or data members. In many respects, it represents the core of the agent's simulated rational behaviour, because it takes into account the ", "current circumstances", " (identified by the current values of respective members and data structures), and the agent ", "current beliefs", " (represented by its beliefset relations), and uses this information to select a plan instance that is ", "applicable", " to the current conditions.", "The plan instance is a copy of the plan with particular values for its members. These members may include ordinary Java members and special ", "logical members", ". Instead of being assigned values like normal Java members, logical members are bound to particular values by a process of unification (attempting to match them with other known or partially known values). The semantic behaviour of logical methods is quite different to that of Java methods; therefore, logical methods include specific JACK Agent Language statements and expressions to manipulate them and their values.", "The ", "context", "()", " method always takes the following form:", "That is, it does not take any arguments and its body is always a single JACK Agent Language ", "logical expression", ". Logical expressions are statements consisting of boolean members, logical members and beliefset cursor expressions.", "When evaluating the ", "context", "()", " method, the agent will consider all possible alternatives. For every set of values that can satisfy the ", "context", "()", " method, a separate instance of the plan will be generated and available for execution. For example, a context method that has 5 possible bindings will cause 5 separate plan instances to be produced.", "This is like a shopping agent being told to buy a piece of fruit. If a shop sells apples, oranges and bananas, buying any one of these will handle this event. The agent would have three instances of the fruit-buying plan available: one to buy an apple, one to buy an orange and one to buy a banana. The plan instance chosen depends on the event model being used (refer to the ", "Events", " section for details). The agent will have achieved its objective if the chosen plan instance succeeds.", "The ", "body", "()", " method is the main reasoning method", " in a plan and is executed whenever a plan is executed. The ", "body", "()", " method is analogous to the ", "main", "()", " method in Java in that it represents the starting point in a plan's execution.", "Because a plan's body is a reasoning method, its execution structure is not the same as for an ordinary Java method. Firstly, it can contain a number of JACK Agent Language statements that can only appear in reasoning methods. These statements are all preceded by the ", "@", " symbol and are described in the ", "Reasoning Method Statements", " section below.", "Secondly, reasoning methods are like 'big logical expressions' in that when the agent executes them, it is constantly thinking 'is this true?'. Each statement in the ", "body", "()", " method is, therefore, treated as a boolean expression, and each semicolon between statements as an AND connector. The ", "body", "()", " method is true (succeeds) if, and only if, execution reaches the end. If any statement fails, the ", "body", "()", " method terminates immediately and fails.", "For example, if a plan's ", "body", "()", " method can be broken down as follows:", "This method will only succeed if ", "statement A", " ", "and", "statement B", " ", "and", " ", "statement C", " ", "and", " ", "statement D", " succeed. If ", "statement B", " was to fail, for example, the agent would stop executing the ", "body", "()", " method at this point and the plan instance would fail (meaning that, in this case, ", "statement C", " and ", "statement D", " are never attempted).", "It is not necessary for every statement in the reasoning method to succeed for the method to succeed. Only the entire boolean expression represented by each statement needs to be true. For example, if the reasoning method contains the block:", "If ", "condition A", " fails, the ", "body", "()", " method will not fail because there is an alternative execution path to follow \u2013 the ", "else", " clause. However, if ", "B", " or ", "C", " fail, the plan still fails.", "This callback is used to retrieve information about the instance of a plan that it is called on. It has been provided for use in meta-level reasoning plans, so that when the agent is faced with multiple applicable plan instances, it can use the information returned to help choose between them.", "By default, this callback is undefined. When a plan is written to handle a BDI event for the agent to be able to perform meta-level reasoning with, this method should be re-implemented to provide the meta-level reasoning plan with information that it can use to make the decision.", "For example, consider a soccer playing agent that has a number of plans which describe field tactics it can use. Each of these plans might have an aggression property added to them for meta-level reasoning purposes. That way, when more than one of these field tactic plans are applicable, the agent's meta-level plan to choose between them can select the plan instance with the highest aggression rating.", "These methods create cursors that become true immediately after a specified time. ", "t", " specifies the time as measured by ", "agent.timer", ". The time is specified in seconds for ", "after", "()", " and in milliseconds for ", "afterMillis", "()", ". Note that their argument types are not the same. If the user needs to use a timer other than ", "agent.timer", ", variants of both methods exist which accept a second argument of type ", "aos.util.timer.Timer", ".", "These methods are commonly used within ", "@wait_for", " statements, as illustrated by the following plan fragment:", "These methods create cursors that become true immediately after a specified time period has elapsed. ", "t", " specifies the time period as measured by ", "agent.timer", ". The time period is specified in seconds for ", "elapsed", "()", " and in milliseconds for ", "elapsedMillis", "()", " \u2013 note that their argument types are not the same. If the user needs to use a timer other than ", "agent.timer", ", variants of both these methods exist which accept a second argument of type ", "aos.util.timer.Timer", ".", "These methods are commonly used within ", "@wait_for", " statements, as illustrated by the following plan fragment:", "When a plan contains one or more ", "#chooses for event", " declarations, this means that the plan is used for ", "meta-level reasoning", ". Instead of describing what the agent should do to achieve an end, it describes how the agent should choose between a number of applicable plan instances.", "Meta-level reasoning describes the ability that an agent has to choose between applicable plans for a given BDI event. Normally when more than one plan instance is applicable for a given event, the agent just chooses one at random. However, with meta-level reasoning the agent can be more discerning.  Instead of choosing an applicable plan instance to try at random, the agent can invoke a plan to make this decision in a specific, deterministic way.  Plans that do this are known as ", "meta-level plans", ".", "Each component of the ", "#chooses for event", " declaration is described in the following table:", "Table 7-3: ", "Components of the ", "#chooses for event", " declaration", "The ", "#chooses for event", " declaration applies only to meta-level plans", ". When present, it identifies the BDI events that the meta-level plan is able to choose between. This is necessary because meta-level plans must all handle the internal ", "PlanChoice", " event. They all contain the following ", "#handles event", " declaration:", "This declares that the agent handles any ", "PlanChoice", " event. To narrow down the range of PlanChoice events that the plan can handle, use one or more ", "#chooses for event", " declaration. Only those ", "PlanChoice", " events that apply to one of the listed BDI events will be handled by the meta-level plan.", "For example, suppose a plan definition contains the following declarations:", "This identifies the ", "ChooseFieldStrategy", " plan as a meta-level reasoning plan for the BDI events: ", "BDIMidFieldPlay", ", ", "BDICornerPlay", " and ", "BDIKickoff", ".", "Most ", "#", "-declarations are optional in a plan definition, but the ", "#handles event", " declaration is mandatory. It specifies the event that the plan handles. Whenever an instance of this event occurs, the agent will consider this plan as a candidate response. Unless the plan's ", "relevant", "() method says otherwise, the agent will assume that this plan is relevant to the event.", "Hence, without a ", "#handles event", " declaration, a plan would never be executed by an agent. Regardless of the event that arose, the agent would never deem the plan to be relevant.", "Each plan definition must have exactly one ", "#handles event", " declaration. It is not possible for a single plan to be able to handle more than one kind of event. If this situation can arise in the model, multiple copies of the plan will need to be defined, each specifying one of the events as its relevant event.", "The ", "#handles event", " declaration takes the following form:", "Each component in this declaration is described in the following table:", "Table 7-4: ", "Components of the ", "#handles event", " declaration", "The ", "#posts event", " statement declares that the plan is able to post events of this type when executed. This may be in the ", "body", "()", " method, or one of the other reasoning methods. Note that the plan does not have to post this event every time it is executed, it merely has the capacity to do so.", "Not all events must be declared with the ", "#posts event", " statement \u2013 only those that the agent posts ", "internally", ". Events that the agent posts externally must be explicitly declared too, but this is done using the ", "#sends event", " statement instead.", "A ", "#posts event", " declaration takes the following form:", "Each component is explained in the following table:", "Table 7-5: ", "Components in the ", "#posts event", " declaration", "The ", "#posts event", " declaration is similar to a function prototype in C. Technically, it is redundant since the agent that the plan belongs to has already declared all the events it can handle using its own ", "#handles event", " statements. However, explicitly declaring the events that a plan posts ensures a correspondence between the events that an agent's plans can post and the events that it can handle. There should be no events posted by the plan that the agent cannot handle.", "By explicitly declaring handled events at both the agent and the plan level, the compiler can check that there are no 'dangling events' that the agent will ignore. This is in line with the explicit definitions in modern programming languages and helps protect programmers from runtime problems that are hard to locate.", "#posts event", " declarations identify the normal events and goal events that an agent posts. Message events that the plan can post are declared using the ", "#sends event", " construct described below.", "The ", "#sends event", " declaration is just like the ", "#posts event", " declaration, except that it identifies message events that the plan can send to other agents. A plan can only execute statements that send these events to other agents if the plan's definition includes a ", "#sends event", " declaration for that kind of event.", "A ", "#sends event", " declaration takes the following form:", "Each component is explained in the following table:", "Table 7-6: ", "Components in the ", "#sends event", " declaration", "The ", "#sends event", " declaration is similar to a function prototype in C. It specifies at the outset the range of message events that the plan can post. Only those events specified in ", "#sends event", " declarations can be posted by statements in the plan.", "The advantages of the ", "#sends event", " declaration are the same as those of function prototypes in C: they explicitly identify the events that the plan can post and hence make the plan easier to port to other agents and allow for compiler checking that can reduce programmer error.", "The ", "#uses data", " statement identifies those objects or beliefset relations that a plan uses (either to read or to modify). To be accessed this way from within a plan, the Java object or beliefset relation must have been declared in the enclosing agent or capability.", "A ", "#uses data", " statement takes the following form:", "Each item in the definition is described in the following table:", "Table 7-7: ", "Components in the ", "#uses data", " declaration", "For more information on beliefset relations and how to use them, refer to the ", "Beliefset Relations", " chapter.", "The ", "#reads data", " declaration indicates to the user that the Java object or JACK beliefset of type ", "DataType", " is to be accessed within the plan. The Java object or beliefset must have been declared in the enclosing agent or capability. Note that the read only constraint is not enforced by JACK.", "A ", "#reads data", " declaration takes the following form:", "Each item in the definition is described in the following table:", "Table 7-8: ", "Components in the ", "#reads data", " declaration", "For more information on beliefset relations and how to use them, refer to the ", "Beliefset Relations", " chapter.", "The ", "#modifies data", " statement indicates to the user that a Java object or JACK beliefset of type ", "DataType", " is to be modified within the plan. The object or beliefset must have been declared in the enclosing agent or capability.", "A ", "#modifies data", " statement takes the following form:", "Each item in the definition is described in the following table:", "Table 7-9: ", "Components in the ", "#modifies data", " declaration", "For more information on beliefset relations and how to use them, refer to the ", "Beliefset Relations", " chapter.", "This declaration identifies a particular Java interface that the plan requires when it is executed. Some plans rely on certain methods to be provided by the agent in which they are used. For this reason, JACK normally only allows plans to be used in the agent for which they have been defined.", "The ", "#uses agent implementing", " declaration gets around this by allowing the plan's required methods to be described by a Java interface. Any agent that implements this interface must provide implementations for these methods and as a result will be able to adequately support the plan.", "This declaration takes the following form:", "where ", "Interface", " is the name of the Java interface that contains the methods this plan requires, and ", "reference", " is the plan's handle on this interface. The ", "reference", " handle allows the plan to invoke methods through the interface. The ", "reference", " becomes a member of the plan referring to the agent, but only of the given interface type.", "When a plan definition includes a ", "#uses agent implementing", " declaration, it can be used in any agent that claims to implement this interface. This claim is made in the agent definition header. For example, a plan that includes the following declaration:", "can be included in an agent whose definition is shown below:", "This declares that one of the enclosing capabilities (or the enclosing agent) implements ", "Interface", ". Note that this declaration supersedes the ", "#uses agent implementing", " declaration for most purposes.", "The declaration takes the following form:", "where ", "Interface", " is the name of the Java interface that contains the methods this plan requires, and ", "reference", " is the plan's handle on this interface. Note that a class can also be considered to be an interface, so that ", "Interface", " can be the actual name of a ", "Capability", " class or an ", "Agent", " class.", "For example, given an agent:", "the ", "HelloPlan", " can include the declaration", "This gives the plan access to the ", "HelloWorld", " members and methods as illustrated in the following code fragment:", "The plan's ", "body", "()", " method is the main method in a plan. It describes all the actions that the agent performs when this plan is executed. A plan's ", "body", "()", " method is unlike normal Java methods in that it is a ", "reasoning method", ". However, the ", "body", "()", " method is not the only reasoning method that a plan may contain. As with other structured programming languages, it is sometimes easier to split functionality into separate methods. Similarly, it is possible for a plan to include other reasoning methods, which the main ", "body", "()", " method can call as needed.", "Each reasoning method that a plan contains beyond the ", "body", "()", " reasoning method must be defined using the ", "#reasoning method", " statement. The syntax for these definitions is shown in the following code:", "Each of the components of this definition are explained below.", "Table 7-10: ", "Components of a reasoning method definition", "Reasoning methods do not have a return type like normal Java methods. Instead, they either succeed or fail. This is determined by the execution path through the reasoning method. When the agent executes a reasoning method, it treats every statement or block as a separate step that must be completed successfully if the reasoning method itself is to be completed successfully.", "Therefore, if the agent succeeds in executing a statement or block, it will proceed to the next statement or block in the reasoning method. However, if it fails, it will assume that the reasoning method can no longer be completed successfully and therefore will fail.", "Of course, this does not mean that every single conditional test must succeed for the agent to continue executing the reasoning method. For example, if the reasoning method contains an ", "if ... then ... else", " construct and the ", "if", " condition fails, it can still execute the ", "else", " clause and continue. However, if the ", "if", " condition succeeded and then one of the statements in the ", "then", " block failed, the agent would still abandon the reasoning method as unsuccessful.", "If the agent reaches the end of a reasoning method without executing any statements that fail, the reasoning method succeeds. Otherwise, it fails. This is analogous to a human performing a task that requires the completion of several steps. If any step fails, the task can no longer be completed, but if all steps succeeds, the task succeeds.", "Reasoning methods can include special JACK Agent Language constructs known as ", "reasoning method statements", ". Reasoning method statements control aspects of how the reasoning method runs, and execute any agent-specific activities that the plan has to perform (such as sending messages to other agents, posting events, or ensuring that the plan is executed only while a given maintenance condition continues to be true). JACK Agent Language reasoning method statements begin with an ", "@", " character", ".", "Reasoning methods execute as ", "finite state machines", ". Finite state machines", " define an execution model where each step is atomic and the execution can be paused only between these steps.", "The ", "pass", "()", " reasoning method is a special reasoning method that may be included in a plan. Unlike other reasoning methods, it should not be called explicitly by other reasoning methods in the plan. Instead, it is executed after the plan's ", "body", "()", " method has succeeded, but before this success is reported back to the task in which the plan is being executed. Therefore, it can be used to describe any post-processing or 'cleaning up' that may be required after the plan has succeeded.", "The ", "pass", "()", " reasoning method is defined using the following format:", "The ", "pass", "()", " reasoning method can only be called by the task-execution infrastructure. Furthermore, its success or failure has no effect on the plans outcome. For example, if the plan succeeds but the ", "pass", "()", " method fails, the plan still succeeds.", "The ", "pass", "()", " reasoning method is executed if and only if the plan succeeds. If the user wants to perform post-processing for a plan that fails, they should use the ", "fail", "()", " reasoning method described below.", "This reasoning method complements the ", "pass", "()", " reasoning method. Like the ", "pass", "()", " reasoning method, it should not be called from other reasoning methods, but instead must be called by the underlying JACK task execution engine. The ", "fail", "()", " reasoning method is called if, and only if, the plan it appears in fails. Like the ", "pass", "()", " reasoning method, it can be used to perform any post-processing or cleanup activities that might be required.", "The ", "fail", "()", " reasoning method is defined using the following format:", "As has been described earlier, reasoning methods are different from normal Java methods in a number of ways. One of these is that they can include a number of special JACK Agent Language statements. These statements are all preceded by an ", "@", " symbol and describe specific logical guards or logical actions that the agent should perform within the reasoning method. The reasoning method statements are:", "Each of these reasoning method statements is described below.", "The ", "@wait_for", " expression controls the temporal flow through a reasoning method. When the agent executes a ", "@wait_for", " expression, it causes the plan to wait until a given logical condition becomes true before continuing. That is, the agent waits for the condition to be satisfied and then continues.", "The ", "@wait_for", " expression is a Finite State Machine (FSM)", ".", "An ", "@wait_for", " expression takes one of the following three forms:", "Each component of this statement is described in the following table:", "Table 7-11: ", "Components of the ", "@wait_for", " statement", "Each form of the ", "@wait_for", " statement, and how it is executed, is described in the following sub-sections.", "This is an unguarded wait. The agent will stop executing the current task and wait for as long as is necessary for the ", "wait_condition", " to be satisfied. If the condition is already true the agent continues, unhindered, through the reasoning method. This expression always succeeds \u2013 it succeeds when the ", "wait_condition", " is satisfied.", "This will not hamper the progress of the agent because the wait condition must be a triggered cursor", ". Triggered cursors are not checked using a busy-wait loop. Instead, they are only tested when the agent performs a modification action on one of the cursor's relations.", "This expression never fails. If the ", "wait_condition", " is never met, the agent just waits for it indefinitely (or until one of the circumstances described below arises). Note that this does not mean that the agent as a whole comes to a standstill. Since the waiting task is suspended, the agent will be able to proceed with any other tasks that are active, and undertake new tasks as new asynchronous events arrive.", "In the JACK runtime environment, satisfying the wait condition is not the only way to 'break' a ", "@wait_for", " statement. Although satisfying the wait condition is the way a ", "@wait_for", " statement is meant to be broken, it will also be broken under the following circumstances.", "This form of the wait condition tells the agent to do the following: \"wait for ", "wait_condition", " to become true until ", "sentinel_condition", " becomes true\". Both the ", "wait_condition", " and the ", "sentinel_condition", " can be any form of triggered cursor.", "This expression succeeds when the ", "wait_condition", " is satisfied before the ", "sentinel_condition", ". In fact, it succeeds the moment that ", "wait_condition", " becomes true.", "This expression fails when ", "sentinel_condition", " is satisfied before ", "wait_condition", ". In fact, it fails the moment that ", "sentinel_condition", " becomes true.", "This form of ", "@wait_for", " expression tells the agent to do the following: \"wait for ", "wait_condition", " to become true for ", "timeout", " seconds\". This is as though the agent is waiting while the stopwatch runs. The timeout period is a ", "double precision real", " number that specifies the timeout period in ", "seconds", ". The granularity of this time period, however, is to the nearest ", "millisecond", ". When the agent executes this statement, the stopwatch starts ticking. If the ", "wait_condition", " is satisfied before the timeout is reached, the statement succeeds; otherwise, it fails.", "This expressions succeeds when ", "wait_condition", " is satisfied before the ", "timeout", " period has passed. It succeeds the moment that ", "wait_condition", " becomes true. It fails when the ", "timeout", " period has passed without ", "wait_condition", " having been satisfied. It fails the moment the ", "timeout", " period expires.", "Unlike other forms of the ", "@wait_for", " expression, this expression will never put the agent in an indefinite wait because the timeout can always expire.", "The ", "@action", " statement is a compact way of writing in-line action cursors \u2013 these are discussed in the ", "Cursors", " section in this chapter. The ", "@action", " statement has two forms:", "and", "where ", "body", " is the set of statements for the 'action' method of an inline anonymous extension of ", "aos.jack.util.cursor.Action", ", and the optional ", "thread_pool", " argument specifies a thread pool to be used instead of the agent's thread pool. If no thread pool is given, the agent's thread pool is used. ", "Threadpool", " is discussed in ", "Appendix B: Utilities", ".", "The ", "@action", " statement is translated into a ", "@wait_for", " statement with an action cursor.", " Like the ", "@subtask", " statement, the ", "@maintain", " statement posts an event to be handled synchronously in the same execution thread. The current plan is suspended while the agent handles this event in a separate subtask. However, as well as specifying an event to be handled, the ", "@maintain", " statement also specifies a logical condition which is to be maintained for the ", "entire", " duration of the subtask execution. If the condition is violated during execution of the subtask the statement fails. As one would expect, if the condition is false when the event is posted, the statement will fail immediately.", "A ", "@maintain", " statement takes the following form:", "Each component of this statement is explained in the following table:", "Table 7-12: ", "Components of the ", "@maintain", " statement", "Termination of the subtask will occur either because:", "A maintenance violation is like an exception and will not invoke any fail() methods. If some cleanup action is required when a maintenance violation occurs, it can be achieved by explicitly catching the ", "MaintenanceViolation", " exception within a plan. This is shown below. Note that if this exception is caught, it ", "must", " be rethrown so that it can eventually reach the ", "@maintain", " exception handler. The statement will then fail (as it should).", "The ", "@post", " statement is used to post an event from within a plan. The statement accesses the event ", "posting method", " and uses it to post a new instance of the event for the agent to handle.", "The event is posted asynchronously to be handled by a new task that is executed in a new and independent task execution thread. Hence this statement always succeeds, because once the event has been posted, the plan continues processing. Even if the event is not handled (because there are no relevant or applicable plans), or the agent attempts to handle it but fails, the ", "@post", " statement still succeeds.", "A ", "@post", " statement takes the following form:", "Each component of this statement is described in the following table:", "Table 7-13: ", "Components of the ", "@post", " statement", "The plan must use one of the event's posting methods to create the event to be posted. This was described in the section on posting/sending events in the ", "Events", " chapter.", "Provided all these conditions are met, a plan can post an instance of an event using the ", "@post", " statement. The event instance is created using the parameters passed to the event's posting method.", "The ", "@reply", " statement is used by an agent to reply to a message event that it has received from another agent. It replies to the sending agent with a message event (", "MessageEvent", " or ", "BDIMessageEvent", ") which arrives as a data object on the reply queue of the original message event in the sending agent. This means the message event that is sent back using ", "@reply", " does not trigger a new task or plan.", "Messaging is normally initiated with ", "@send", " and thereafter ", "@send", " or ", "@reply", " are used according to protocol.", "A ", "@reply", " statement takes the following form:", "Each component of this statement is described in the following table:", "Table 7-14: ", "Components of the ", "@reply", " statement", "An example involving the updating of a GUI is presented below:", "The ", "@send", " statement is used to send a message event to another agent from within a reasoning method. Like the ", "@post", " statement, the ", "@send", " statement uses one of the message event's own posting methods to create the instance of the event to be sent. This was described in the section on posting/sending events in the previous chapter.", "A ", "@send", " statement takes the following form:", "Each component of this statement is described in the following table:", "Table 7-15: ", "Components of the ", "@send", " statement", "To be able to send an event, the plan must know the name of the agent to send it to. Like the ", "@post", " statement, the ", "@send", " statement always succeeds. This is because the message event is sent asynchronously and once the agent has sent it off, it immediately continues executing the plan. How the message event is handled by the destination agent is not a factor.", "The ", "@subtask", " statement is similar to the ", "@post", " statement, except that instead of posting an event in the normal (asynchronous) way, it posts the event ", "synchronously", ". Instead of being handled in a separate task and execution thread, an event posted with the ", "@subtask", " statement is handled as a ", "subtask", " of the current task.", "The ", "@subtask", " statement does not create a new execution thread within the agent as is the case with normal event posting. Instead, it suspends the current plan and adopts a task to handle the event within the same execution thread. The ", "@subtask", " statement then succeeds or fails depending on whether the posted event succeeds or fails.", "A subtask is handled exactly like a normal task. That is, the agent posts the event, finds all relevant plans and all applicable plan instances, then executes these plan instances until one of them succeeds or it runs out of alternatives. The only difference is that the suspended plan waits for this result to be returned, whereupon the ", "@subtask", " either succeeds or fails.", "A ", "@subtask", " statement takes the following form:", "Each component of this statement is described in the following table:", "Table 7-16: ", "Components of the ", "@subtask", " statement", "Note that the instance of the event to be executed as a subtask will have been created by invoking a posting method on the reference that is declared in the associated ", "#posts", " or ", "#sends", " statement. This was described in the section on posting/sending events in the previous chapter.", "The ", "@subtask", " statement can be used to make plan code more portable and manageable. It allows agents to re-use entire plans (or even plan sets) by calling them from within other plans. The other plan can post the plan's invocation event as a ", "@subtask", ", and take further action based on whether this subtask succeeds or fails. Because the subtask is handled in the same task execution thread, the ", "@subtask", " statement gives JACK the means for functional abstraction in plans.", "A ", "@subtask", " statement succeeds when the event that it posts is handled successfully in the subtask. If the agent can execute a plan that handles this event successfully, the subtask will be successful. The statement fails when the event that it posts is not handled successfully by the subtask. This may be because no relevant plans are found, no applicable plan instances are found, or all applicable plan instances that are found fail.", "The ", "@sleep", " statement, like the ", "@wait_for", " statement, is used to control the temporal flow of a plan. The ", "@sleep", " statement is far more straightforward, however: it merely tells the agent to wait for a designated period before continuing.", "A ", "@sleep", " statement takes the following form:", "The ", "timeout", " is specified as a double and represents the period of time that the agent must wait (sleep) before continuing with the plan. The ", "timeout", " period is specified in ticks on the agent's clock. The actual length of time depends on the ", "Timer", " that the agent is using.", "If the timer is a real-time clock, the timeout period represents a sleep period in ", "seconds", ", with ", "millisecond", " granularity. If the timer is a dilated or simulation clock", ", it represents the number of clock ticks on that timer.", "For example, the ", "@sleep", " statement;", "means that the enclosing plan is suspended for 6789 ticks on the ", "Timer", " assigned to the timer member of the calling agent. For a real-time clock this is 6789 ticks at one millisecond per tick, or 6 seconds, 789 milliseconds.", "A ", "@sleep", " statement succeeds when the time period has expired. In other words, the ", "@sleep", " statement always succeeds \u2013 it never fails.", "The ", "@achieve", " statement is one of four posting statements that can be used on ", "goal events only", ". The other three are ", "@test", ", ", "@insist", " and ", "@determine", ", all of which test a logical condition and, depending on its result, post a goal event in a different way.", "The ", "@achieve", " statement is used to model the situation where an agent is asked to ", "achieve a goal", ". The agent is given a ", "goal", " to achieve, and a ", "condition", " to determine whether any action needs to be taken (i.e. whether the goal has already been achieved).", "When the agent executes an ", "@achieve", " statement, it tests the condition.", "Because subtasks are handled synchronously, the parent plan waits until the subtask has either succeeded or failed before continuing. The success or failure of the subtask determines the success or failure of the ", "@achieve", " statement.", "An ", "@achieve", " statement takes the following form:", "Each component is explained in the following table:", "Table 7-17: ", "Components of the ", "@achieve", " statement", "Note that the instance of the event to be posted will have been created by invoking a posting method on the reference that is declared in the associated ", "#posts", " or ", "#sends", " statement. This was described in the section on posting/sending events in the previous chapter.", "An ", "@achieve", " statement succeeds when either the ", "condition", " is true, or when the ", "condition", " is false but the subtask to handle the ", "goal_event", " succeeds. It fails when the ", "condition", " is false and the subtask to handle ", "goal_event", " fails.", "The ", "@insist", " statement is similar to the ", "@achieve", " statement, but places a greater emphasis on ensuring that the goal is handled properly. With the ", "@achieve", " statement, the agent assumes it has handled the goal if it successfully performs the subtask. No check is made of the success condition to ensure that this is the case: it is assumed.", "This assumption is reasonable and it is a general assumption made for event handling in JACK. In fact, the successful handling of an event is ", "defined", " as the location and successful execution of an applicable plan. All task (and subtask) executions succeed as soon as an applicable plan is completed. However, the ", "@insist", " statement allows the agent to add an extra step \u2013 to 'make sure' that the goal has been achieved.", "It does this by ", "re-testing the given condition", " after each successful subtask execution. If the condition is true, the ", "@insist", " statement succeeds and the agent will continue through the plan. If it fails, however, the agent will attempt to ", "re-execute the subtask", " (i.e. try to achieve the goal again). If the subtask fails, the ", "@insist", " statement fails. Otherwise, the agent repeats the process by checking the condition again.", "Hence, an ", "@insist", " statement may involve multiple subtask executions. Each time the same goal event is posted. That is, the agent is insisting that the goal has been achieved as defined by the success condition given in the ", "@insist", " statement. If this goal has not been achieved, the ", "@insist", " statement fails.", "An ", "@insist", " statement takes the following form:", "Each component is explained in the following table:", "Table 7-18: ", "Components of the ", "@insist", " statement", "Note that the instance of the event to be posted will have been created by invoking a posting method on the reference that is declared in the associated ", "#posts", " or ", "#sends", " statement. This was described in the section on posting/sending events in the previous chapter.", "An ", "@insist", " statement succeeds when the ", "condition", " is true. This can be when the ", "@insist", " condition is first executed (i.e. before any subtasks have been performed) or after any successful subtask execution of the ", "goal_event", ". It fails when any subtask execution of the ", "goal_event", " fails.", "The ", "@test", " statement tells the agent to determine whether a logical condition (", "test_condition", ") is true or false. It is similar to the ", "@achieve", " statement, except that in this case the logical condition is important.", "If the ", "test_condition", " is true, the ", "@test", " statement succeeds and it performs a unification against the ", "test_condition", ".", "If the ", "test_condition", " is false, the ", "@test", " statement fails and there is no unification.", "The goal event comes in to play when the logical condition is neither true nor false, but rather is ", "unknown", ". Not all logical conditions can be unknown in JACK Agent Language \u2013 only those that follow Open World semantics", ". Therefore, if a logical expression consisting of ordinary boolean values and Closed World", " relations is tested, the ", "@test", " statement will always succeed or fail based on the logical expression's truth valuation and the ", "@test", " statement's goal event will never be posted. Thus, it is only when Open World relations are involved that the possibility of goal handling may arise.", "When an Open World relation is involved and the ", "test_condition", " is unknown, the ", "goal_event", " will be posted. The event is then responsible for doing any unification that is required, as the ", "@test", " statement will do nothing when the goal has finished executing \u2013 it will simply succeed or fail based on the success or failure of the goal. The ", "@test", " statement does not check whether or not the ", "test_condition", " is true if the goal succeeds.", "A ", "@test", " statement takes the following form:", "Each component is explained in the following table:", "Table 7-19: ", "Components of the ", "@test", " statement", "Note that the instance of the ", "goal_event", " to be posted will have been created by invoking a posting method on the reference that is declared in the associated ", "#posts", " or ", "#sends", " statement. This was described in the section on posting/sending events in the previous chapter.", "The ", "@test", " statement can be thought of as modelling what a human would do when asked to test something. First, they would consult their own knowledge (beliefs) to find the answer. If this uncovers nothing, action would be taken to find out the answer. The ", "@test", " works in the same way \u2013 the agent first tests the logical condition (often against its own beliefset). If this does not work, it starts trying to achieve a goal to find the answer.", "An ", "@test", " statement succeeds when the ", "test_condition", " is true, or the ", "test_condition", " is unknown but the goal to find its truth (", "goal_event", ") succeeds (i.e. the subtask that handles this goal succeeds). It fails when the ", "test_condition", " is false, or the ", "test_condition", " is false and the goal to find out its truth (", "goal_event", ") fails.", "The ", "@determine", " statement tells the agent to try and find a logical binding for which a given ", "BDIGoalEvent", " will succeed. It does this by finding all possible sets of values that satisfy the logical condition, then posting the goal event for each in turn until one of them succeeds. When the goal event succeeds for a particular set of bindings, the ", "@determine", " statement succeeds and the values for these bindings are committed. The ", "@determine", " statement will return (bind) the logical members in the logical condition with those values that caused the goal event to be satisfied.", "In a way, it is the opposite of the other three ", "BDIGoalEvent", " posting statements: ", "@achieve", ", ", "@insist", " and ", "@test", ". Instead of testing a logical condition and posting a goal event when it fails or is unknown, the ", "@determine", " statement posts a goal event for known values. The agent is not trying to add to its knowledge base. Rather, it is trying to determine which of the possible candidates in its knowledge base allow it to achieve the goal that it wishes to achieve.", "The ", "@determine", " statement's logical condition is designed for use with a beliefset cursor. It iterates through the results that the beliefset cursor returns, testing these returned values, until one set of values satisfies the logical condition. In other words, the agent is being asked to \"determine a situation under which the given goal can be achieved\". The ", "@determine", " statement iterates over the beliefset cursor, testing and discarding possible bindings for its logical members, until all set have been found that satisfy the condition. Once this set of bindings has been found, the agent posts a ", "BDIGoalEvent", ", synchronously, for each binding in turn. This causes a subtask to be executed for each binding, one after the other, until one succeeds.", "If a subtask succeeds, the ", "@determine", " statement succeeds and no more bindings are tried. It commits the current set of bindings and discards the rest. Otherwise, the agent takes the next set of bindings that satisfied the logical condition and attempts the goal again. Therefore, the ", "@determine", " statement succeeds if, and only if, the goal can be met for at least one of the sets of bindings returned by the logical condition.", "A ", "@determine", " statement takes the following form:", "Each component is explained in the following table:", "Table 7-20: ", "Components of the ", "@determine", " statement", "Note that the instance of the event to be posted will have been created by invoking a posting method on the reference that is declared in the associated ", "#posts", " or ", "#sends", " statement. This was described in the section on posting/sending events in the previous chapter.", "The ", "@determine", " statement has been designed specifically to work with beliefset relations in the ", "binding_condition", ", iterating over the relation's tuples until it finds ones that might meet the goal. However, it determines all possible bindings before the first goal event is posted. This means that if the subtask changes any tuples that are used in the logical condition while they are processing, this will not affect the ", "@determine", " statement. If the subtask goes on and fails, it will post next goal with the next set of bindings from its list. It will not re-evaluate the logical condition and find that the set of tuples have changed.", "An ", "@determine", " statement succeeds when the ", "goal_event", " is successfully handled for a set of bindings provided by ", "binding_condition", ". The statement succeeds as soon as the first binding is successfully handled \u2013 no more bindings are tested. It fails when no bindings are found that satisfy ", "binding_condition", ", or the handling of ", "goal_event", " fails for all bindings found.", "The ", "@parallel", " statement allows concurrent sub-tasking of a set of statements within reasoning methods. The ", "@parallel", " statement suspends execution of the calling plan while all enclosed statements are executed in parallel.", "The ", "@parallel", " statement is used in a plan as a program control structure to sub-task goals in parallel, or more precisely, to progress on several branches of activity in the plan in parallel. The success or failure of the statement depends on the successes and failures of the parallel branches involved. The programmer specifies whether all branches need to succeed or whether it is sufficient that at least one branch succeed. The programmer also specifies whether to wait for all branches to complete before the statement completes, or whether to complete the statement as soon as possible (e.g. with the first successful branch, if the success of one branch is sufficient).", "The ", "@parallel", " statement provides a very powerful mechanism for expressing plans. The implied task synchronisation reduces the effort of programming coordinated activity, in particular while focusing on the \"success paths\". Recovery procedures, contingency planning and their effect on coordination, require careful design and use of the task control statements available in JACK.", "The form of the ", "@parallel", " statement is as follows:", "The ", "@parallel", " statement works like a control structure where the statements, ", "branch_1", ", ", "branch_2", ", etc. are executed as parallel tasks, while the ", "@parallel", " statement itself waits until its termination condition holds. A branch is either a single statement or a compound statement. Branches may be labelled. They have the same form as a Java labelled statement.", "The mandatory arguments to the ", "@parallel", " statement specify success condition, termination condition, and how termination is notified. An optional fourth argument is allowed, which is an object through which the execution of the parallel statement can be monitored.", "With a ", "ParallelMonitor", " object, the teamplan can inspect the processing of parallel branches, and as in the example, throw exceptions to branches selected by label or by index.", "The ", "ParallelMonitor", " object given to a ", "@parallel", " statement becomes a handle for that statement, which can be probed regarding termination and/or success of the individual branches. It can also be used to add branches to a ", "@parallel", " statement dynamically through the ", "addTask(FSM)", " ", "method. The ", "FSM", " argument is an event or a reasoning method in the plan. The following code extract is an illustration of how this may be used.", "The code above would create 42 instances of the ", "cleverness(int)", " reasoning method, with different input argument, and add their executions to the parallel statement monitored by ", "p", ". The ", "@parallel", " statement will then not complete until all the branches have completed.", "In addition, parallel branches can be referred to via ", "labels", ". If a branch is a labelled statement, the program can refer to that statement using the label as a string.  The earlier code outline is an illustration of this, where the branch labelled ", "xxx", " is thrown an exception after 1000 seconds.", "Branches can also be referred to by index, where 0 is the first branch, 1 the second branch, etc. Dynamically added branches are numbered contiguously after the definite branches, and the ", "addTask(FSM)", " method also returns the index for the branch added. The ", "ParallelMonitor", " class is documented in section on the ", "ParallelMonitor Base Class", ".", "Exception handling within the parallel execution model is designed to strictly follow the Java model for exceptions. That is, a branch may throw an exception, and if not caught, the exception is propagated upwards in the calling stack. When the exception reaches the ", "@parallel", " statement, it causes a notification to any ongoing branch before the exception propagates out of the ", "@parallel", " statement.", "A branch may catch exceptions, as in the following example:", "In this example, there are two parallel branches that each contain a ", "try-catch-finally", " block. If, for instance, an exception is thrown within the reasoning_method1, the parallel sub-statement may catch that exception and succeed anyhow without propagating the exception.", "A ", "ParallelMonitor", " object enables the tasks associated with a ", "@parallel", " statement to be explicitly monitored and controlled. ", "The ", "aos.extension.parallel.ParallelMonitor", " class implements the following interface:", " In relational databases, a query can return multiple tuples in the form of a result set; access to the elements of this set is then provided through a ", "cursor", ". In JACK, these concepts have been extended to provide cursors which not only operate in the conventional manner but can also operate on the temporal evolution of a query. The latter type of cursor is typically used in JACK applications to determine when a particular condition (such as the clock reaching a specified time) becomes true. Cursors which provide this additional capability within JACK are implemented as ", "triggered cursors", " ", ". Triggered cursors are not checked using a busy-wait loop \u2013 rather, they are only tested when the agent performs a modification action on one of the cursor's relations.", "All JACK cursors have a ", "next", "()", " method which provides access to the next element in the result set. As one would expect, the exact behaviour of the ", "next()", " method is cursor dependent. A brief description of each cursor and the behaviour of its ", "next()", " method is given below:", "In all cases, the cursor may return a different truth value each time it is tested.", "In situations where the cursor can result in the binding of logical variables (as in beliefset and enumeration cursors) the current binding is made available by invoking ", "next()", " on the cursor. Within ", "#reasoning", " methods the ", ".next()", " is implicit when a condition or sub-condition of type ", "Cursor", " occurs as either:", "Composite statements which have condition parts are:", "Note that ", ".next()", " is ", "not", " implicit in ", "Cursor", " valued right-hand side expressions of assignment statements.", "Each of the above cursor types is described in more detail in the following sub-sections.", "Time cursors are used for simulation purposes, and provide internal timing facilities for simulation measurement and synchronisation. JACK provides both real-time cursors as well as dilated clock", " cursors. Time cursors can use a ", "real-time clock", ", which synchronises the agent with real-time systems; a ", "dilated clock", " for simulated time increments that can be altered as required (effectively providing slow-motion, fast-forward, incremental steps, etc.); or a ", "simulation clock", ", which can be ticked manually to provide even more control over the passage of time in a simulation environment. Each kind of clock is packaged in a ", "Timer", " class.", "A time cursor has the following constructor:", "The parameters are described below:", "Table 7-21: ", "The parameters in the ", "TimeCursor", " constructor", "A time cursor becomes true when ", "time", " has been reached on the ", "clock", ", i.e. if the ", "clock", " time is at or past the designated ", "time", ". It becomes false when ", "time", " has not yet been reached on the ", "clock", ". Hence, the time cursor is like a stopwatch for the agent. It is false as long as there is still time to go (the designated time has not been reached) and then true afterwards. Time cursors are useful for causing the agent to synchronise with other agents or objects in a simulation program.", "Like time cursors, again cursors are used for simulation purposes, and provide internal timing facilities for simulation measurement and synchronisation. As with time cursors, again cursors can use a range of different clocks.", "An again cursor has the following constructor:", "Each parameter is described below:", "Table 7-22: ", "The parameters in the ", "Again", " cursor constructor", "An again cursor becomes true when the next ", "interval", " has been reached on the ", "clock", ". It becomes false when the next ", "interval", " has not yet been reached on the ", "clock", ". Again cursors are useful for causing the agent to synchronise with other agents or objects in a simulation program. For an example which uses an again cursor, refer to ", "Example 2", " in the ", "Views", " chapter.", "With both time and again cursors, any clock of the JACK ", "Timer", " class can be used in a cursor statement", ". In JACK, the following timer members are provided for agents to use:", "These timer members are assigned a particular clock, which describes how time is manipulated. These clocks are listed below.", "Each ", "Timer", " member and ", "Clock", " class is described in the following sub-sections.", "This ", "Timer", " member is the JACK ", "universal real-time clock", ". Since it is ", "static", ", there is only a single copy of it which is available to all agents. It is initialised from the operating system's real-time clock, and measures the current system time when tested.", "This ", "Timer", " ticks in milliseconds. Hence, when testing it with a long integer, this integer should be a measurement of system time expressed in a unit of milliseconds.", "This ", "Timer", " provides a base method ", "getTime", "()", ". When called, this method will return the clock's current time. Because this timer measures system time, the ", "getTime", "()", " method will return the same result as the normal Java ", "System.currentTimeMillis", "()", " system method.", "This ", "Timer", " member is the JACK ", "relative real-time clock", ". It is initialised from the universal real-time clock", ", but can be reset by any agent in the application as required to start measuring time from a specified moment. For example, in a soccer playing multi-agent system, you might use a relative real-time clock to measure match time. It would be reset at kickoff, and again at half time.", "Like the universal real-time clock, this ", "Timer", " is ", "static", " and hence common to all agents and objects throughout the application.", "This is a ", "private real-time clock", " for a specific agent. It is initialised from the relative real-time clock, but can be reset if required.", "This is the JACK ", "real-time clock", " class. It measures time in milliseconds, is initialised from the operating system's clock and supplies the ", "getTime", "()", " method for reading its current value.", "This is the JACK ", "dilated clock", " class. When a ", "Timer", " is defined to be of this class, it behaves like a dilated clock", ". A dilated clock is like a console on a video recorder: it can allow time to pass at normal pace, but it can also slow down, speed up or pause time if required. It is called a dilated clock because slowing down and speeding up the clock can be thought of as redefining the length of each tick.", "The ", "DilatedClock", " class provides two constructor methods:", "Each parameter is explained in the following table:", "Table 7-23: ", "The parameters in the ", "DilatedClock", " constructor", "The JACK ", "dilated clock", " class also provides a base method to change the dilation factor, as well as a base method to read the current time. These methods are listed below:", "This is the JACK ", "simulation clock", " class. This clock has been provided for specific simulation purposes where even greater time manipulation is required than is provided with the JACK ", "dilated clock", " class. Unlike the dilated clock, the simulation clock is ticked manually.", "The ", "SimClock", " class provides two constructors:", "The second constructor allows you to specify a name for the newly created clock instance, while the first allocates the new clock a default name.", "As well as ", "getTime", "()", " to read the clock's current time value, the simulation clock provides two methods for the agent to manage the passage of time. These methods are listed below.", "Hence, the agent is not constrained to increment the clock by a single tick: any number of ticks can be applied at once.", "Change cursors are used to observe ", "java.util.Observable", " objects. A change cursor is intended to be used in an ", "@wait_for", " statement to block condition testing until the cursor returns true. This occurs when the object being observed notifies that a change has occurred and the cursor's ", "condition()", " method evaluates to true. Programmers can develop their own customised change cursors by extending ", "aos.jack.util.cursor.Change", ".", "A change cursor has two constructors:", "The parameters are described in the following table:", "Table 7-24: ", "The parameters in the ", "Change", " cursor constructor", "A change cursor becomes true when the object being observed notifies that a change has occurred and the cursor's ", "condition()", " method returns true. The default implementation of ", "condition", " is to always return true \u2013 if this behaviour is inappropriate for a given application, the programmer must extend the ", "Change", " class and override the ", "condition()", " method. It may also become true if testing of the cursor immediately after construction has been enabled.", "The following two examples illustrate the use of the change cursor:", "In this example, the agent is required to monitor the progress of a chemical reaction and determine when the reaction is complete. It is assumed that the reaction variables are sampled on a regular basis, and that the current reading is available in an instance of the ", "Reading", " class (which ", "extends Observable", "). The ", "ReactionCursor", " class overrides the ", "condition()", " method in the base class (", "aos.jack.util.cursor.Change", "), incorporating the code to test whether or not the reaction is complete. The monitoring plan could then be similar to the following:", "The ", "ReactionCursor", " class and ", "Reading", " class would be similar to the following:", "Since beliefsets extend ", "aos.util.Watchable", " they can be used as the observable in a change cursor. In the following example, ", "jigs", " is a beliefset which maintains the current status of the jigs in an assembly cell. The ", "AllocateJig", " plan has the responsibility of assigning a jig to an incoming part. The plan tests to see if a jig is available (", "busyJig()", ") whenever a change occurs in jig status. The availability test involves determining whether the jig is in use by another part and, if it is not, whether it is in the loading position for the cell.", "If there is a need to include an action within a plan that may take a long time to complete (such as an external database access or a computationally intensive calculation), the use of an action cursor ", " (", "aos.jack.util.cursor.Action", ") is recommended. The programmer extends the ", "aos.jack.util.cursor.Action", " class, overriding its ", "action()", " method with one that incorporates code that performs the time-consuming action. The user-defined cursor can then be incorporated in an ", "@wait_for", " statement within a plan. When the ", "@wait_for", " statement is executed, the action is performed in a separate thread and the plan waits until the cursor returns true, indicating that the action is complete.", "As an example, suppose that an application required a robot to perform a pick and place action. One could encapsulate the action within an action cursor and perform the action within an ", "@wait_for", " statement using code like the following:", "Another example of the usage of Action cursors can be found in ", "Example 2", " in the ", "Views", " chapter.", "This might be the result of a programming error (e.g. a call to Java code which never returns), or it might be a legitimate piece of code that just takes a long time to execute. The message indicates that the JACK kernel has dissociated itself from the thread that is taking too long and has started a new thread in its place for the continued processing of the other agents. If the code executing on the original thread ever finishes, the thread terminates and normal plan processing continues on the new thread. If the message was not caused by a programming error it is indicative of sub-optimal use of JACK and should be avoided. One could either incorporate the offending code into an action cursor which is then used to trigger a ", "@wait_for", " statement, or directly into an ", "@action", " statement.", "The repeat action cursor", " provides a capability for repeatedly performing the same action. It is created in the same way as the action cursor, except that we create a class which extends ", "RepeatAction", " (rather than ", "Action", "). The user provides a constructor and ", "action()", " method as before. If we require the action to be performed at regular intervals, the desired effect can be achieved by coupling an again cursor with a repeat action cursor.", "The beliefset cursor statement is used to query beliefset relations. This is done most often in a plan's ", "context", "()", " method and in reasoning method statements that take a logical condition, such as ", "@wait_for", ", ", "@maintain", ", ", "@achieve", ", ", "@test", ", ", "@insist", " and ", "@determine", ".", "Beliefset cursor statements use unbound logical members", " to perform a pattern-match search over the relation's tuples. If any tuples can be unified with this pattern the beliefset cursor returns true.", "Beliefset cursors and their behaviour are best explained by means of an example. Suppose a beliefset relation is defined for a political commentary agent that describes the ministers in politics. This relation might be defined as shown in the following code:", "Suppose that an agent makes use of this beliefset relation by having the following declaration included in its definition:", "The agent now has a private relation called ", "politician", "()", " of type ", "Politician", ". Suppose that the agent's current tuples for this relation are as shown in the following table:", "Table 7-25: ", "Tuples stored in the Politician beliefset", "If the agent has two unbound String logical members called ", "name", " and ", "portfolio", ", it could query this relation using the beliefset cursor statement shown in the following code.", "The beliefset cursor uses the appropriate ", "who()", " query method for the relation based on the parameters. In the example above there is only one ", "who(...)", " query method defined.", "Unbound logical variables are used as ", "output", " parameters for a query. Bound logical variables are still treated as ", "output", " parameters but they can only match the already bound value.", "When the above expression is evaluated, the agent looks through each tuple and attempts to match it with the pattern provided by unifying the logical members.", "In this example, the first tuple will match the pattern provided when ", "name", " is bound to \"Mr. Important\" and ", "portfolio", " is bound to \"Prime Minister\". The party field matches that specified in the pattern, so binding the logical members in this way will provide an exact match with the relation's first tuple. Hence, if executed under these circumstances, the beliefset cursor expression", " will return true, and the logical members will be bound to their designated values.", "Hence, a beliefset cursor appears to always return the first matching tuple in the relation. However, when it appears in a composite logical expression", ", subsequent tests may reject the first tuple returned and the agent may have to back-track and bind with the next matching tuple instead. This is discussed in more detail in the ", "Composite Logical Expressions", " section in this chapter.", "Enumeration cursors iterate over a ", "java.util.Enumeration", ". True is returned while elements are available in the enumeration; false is returned when the end of the enumeration is reached.", "An enumeration cursor has the following constructor:", "The parameters are described in the following table:", "Table 7-26: ", "The parameters in the ", "EnumerationCursor", " constructor", "An enumeration cursor becomes true while there are more elements to be bound and is false otherwise.", "The cursor's ", "next()", " method calls ", "bindValues()", " with the current element as its argument. The default implementation of ", "bindValue()", " is to return true with no binding taking place. In most situations this is not the desired behaviour and the user must extend ", "aos.jack.util.cursor.EnumerationCursor", " and override ", "bindValues()", ". An example is shown in the following code.", " ", "aos.jack.util.cursor.ArrayCursor", " is a non-triggered cursor which can be used to bind logical variables to the values of an array. Successive calls to ", "next()", " provides one binding at a time until the array is exhausted.", "An ", "ArrayCursor", " has two constructors:", "The latter is for iterating through the subarray which starts at index ", "start", " and ends with index ", "(end - 1)", ".", "The parameters are described in the following table:", "Table 7-27: ", "The parameters in the ", "ArrayCursor", " constructor", "The ", "ArrayCursor", " is particularly useful for use within a context condition in a plan. For example:", "In this case, a plan instance is generated for each element in ", "ev.parties", ", with ", "party", " bound to that element.", "This section gives some advice on how to write the plans that agents will use. It presents some typical plan templates that can be used as a starting point, and gives some advice on abstracting agent tasks into a set of related plans.", "This section provides typical plan templates for both normal plans and meta-level plans. Since the fundamental purpose of meta-level plans is distinct from that of normal plans, their templates are slightly different.", "A template to use for defining normal plans is given below.", "A template to use for defining meta-level plans is given below.", "Of all JACK structures, the plan is usually the most complex. As well as including a number of ", "#", "-declarations", ", it will also frequently contain a number of reasoning methods to express its functionality. The main ", "body", "()", " reasoning method will always be present, but if the actions that the agent must take when it executes the plan are reasonably complex, they may be abstracted into other reasoning methods, or other entire plans which the agent can call with BDI statements or ", "@subtask", " ", "statements.", "In most cases, you should abstract a plan into separate reasoning methods which express subtasks that the agent needs to perform when executing the plan's ", "body", "()", ". You should only abstract it into entirely separate plans (to be called by the ", "@subtask", " statement) when:", "In this case, the subtask is really better expressed as an event. The different approaches to handling it can then be expressed in different sub-plans, which the agent can choose between at run time by their respective context conditions.", "Most of the core differences between JACK Agent Language semantics and those of ordinary Java involve the way logical statements are used and interpreted. In Java, boolean methods are just like normal methods that happen to return a boolean result. In the JACK Agent Language, however, the logical expressions hold more meaning.", "Some of the differences between JACK Agent Language logical expressions and regular boolean expressions are listed below:", "Logical statements are important in JACK. They are used to determine which instances of a plan are applicable, and to determine the success and failure of these plans and their respective components.", "Although logical statements are common to many programming languages, some unique and important properties should be mentioned with regard to their use in JACK.", " The components from which logical statements in JACK can be built are listed below.", "Logical members can be included in any JACK Agent Language definition, but have specific support in plans. Most often, they are used in a plan's ", "context", "()", " method or reasoning methods. Logical members bring elements of logic programming to JACK.", "Logical members follow the semantic behaviour of variables from logic programming languages such as Prolog. That is, they are not place-holders for assigned values like normal Java members: rather, they represent a specific, but possibly unknown, value. Conceptually, the murderer in a classic murder mystery can be represented by a logical variable. That is, the murderer is a specific person, but the detective may not know this person. As the detective investigates, he or she attempts to match new evidence with what he or she already knows about the murderer in order to uncover the murderer's identity.", "The process of investigation that the detective in the above example goes through is analogous to the way that an agent uses logical members. Instead of assigning values to them, the agent attempt to uncover their value through a process known as ", "unification", ". Unification involves attempting to match the logical member with a known pattern. The logical member, therefore, behaves like a 'wild card' in this pattern matching exercise. If it is possible to find a value for the wild card to make it match the pattern, the agent will treat this as a possible value for the logical member. It will ", "bind", " the logical variable to this value.", "Therefore, an unbound logical member is a member whose value is still unknown to the agent, whereas a bound logical member is a member whose value has been determined.", "A logical member is defined with the plan's other members. Their definition takes the following form:", "Each component of this definition is described in the following table:", "Table 7-28: ", "Components of a logical type definition", "Once bound, a logical member's value cannot be changed. Returning to the murder mystery example, this is equivalent to uncovering the murderer. Once the murderer has been uncovered, the murderer is known. This cannot change.", "Logical variables are objects that, when bound, require the use of an accessor", " to gain access to the values they represent. The available accessors are:", "Each of these will throw a ", "LogicalException", " if the user tries to determine the value of an unbound logical variable.", "Unification", " is a boolean method of the logical member. This method can be called directly from within a reasoning method if required.", "If a logical variable is unbound it can be bound using ", "unify", "()", ". For example, a logical member of type integer can be defined and then unified with the value '3' in a reasoning method as shown below.", "This is like assigning a member the value '3', except that once unified, the value cannot be changed. In this case if ", "x", " was unbound before ", "x.", "unify", "(3)", ", ", "unify", "()", " would return ", "true", ". If ", "x", " was already bound and you used ", "unify", " to attempt to bind it again, it would return ", "true", " if you attempted to bind it to its current value and ", "false", " otherwise.", "The previous example shows the simplest form of unification \u2013 where the agent simply designates a value. In the murder mystery example, it would be like the detective deciding that Colonel Mustard is the murderer (presumably after some flawless deduction). Sometimes, however, logical members are used in ways that are more complex. The agent may not simply be able to bind the member to a particular value. Instead, it may attempt to bind the member to a possible value, then perform some test to see whether the value is suitable. This can be thought of as testing the ", "hypothesis", " that the logical member's value has been bound correctly.", "For example, consider a ", "@determine", " statement in the context of the murder mystery example (the detective agent is trying to determine the identity of the killer). The detective may find that the victim was shot and hence conclude that the murderer had access to a gun. If there are only three people who had access to a gun, the detective may hypothesize that one of these people is the murderer. This will be followed by further investigation that will prove whether this is the case. If it is, the killer has been uncovered. Otherwise, the detective will repeat the process with the second candidate.", "In a ", "@determine", " statement, this would correspond to there being three tuples that satisfy the statement's logical condition. The agent temporarily binds the condition's logical variable to the first tuple and then posts an event using this tuple's values. The agent ", "commits", " the binding if this succeeds; otherwise, the binding is ", "rolled back", " and the next tuple's values are bound. Rolling back is just like the detective finding out that his hypothesis is wrong and hence withdrawing the accusation of guilt.", "Roll-back is the only way that the binding of a logical member can be 'undone'. It only occurs when the logical member is used in a ", "cursor", " and when this cursor appears in a composite logical expression, or a compound statement such as the ", "@determine", "statement.", " Individual logical statements in JACK can be combined using the standard boolean connectives available in Java ('", "&&", "', '", "||", "' and '", "!", "' representing the logical connectives ", "AND", ", ", "OR", " and ", "NOT", " respectively).", "When a logical expression", " is used, the agent always evaluates it in a ", "short-circuit", ", ", "left to right", " manner. That is, the agent will start evaluating the logical expression from the left-most statement and will stop evaluating as soon as it has found enough information to determine whether the expression is ", "true", " or ", "false", ".", "For example, suppose the beliefset relation described in the example from the previous section is used in the following logical expression (where ", "name", " and ", "portfolio", " are unbound logical members of type ", "String", "):", "Evaluation is performed left to right, so that the agent first looks at the ", "politician", " relation's tuples to unify the query pattern with each tuple. The first and second tuples do not have a ", "party", " field that matches the \"Silly Party\" string, however the third one does. Hence, the agent binds ", "name", " to \"Mr. Knockout\" and ", "portfolio", " to \"Minister for Sport\", and the beliefset cursor returns ", "true", ".", "The agent now moves onto the second expression, which compares the value of ", "Portfolio", " with the ", "String", ", \"Minister for Sport\". This matches, so the logical expression is true.", "As well as returning ", "true", ", the logical expression has bound the logical members ", "name", " and ", "portfolio", " to values that satisfy the statement. If this expression were to appear in a ", "context", "()", " method, it could lead to an applicable plan instance. In that case, the logical members would capture the context in which the plan was applicable.", "Now consider a logical expression of the following form instead:", "Again, the agent starts with the left-most beliefset cursor and attempts to unify it with the relation's tuples. However, there is no tuple whose name field matches the \"Fred\" string, so the portfolio member will remain unbound and the beliefset cursor will return ", "false", ".", "The logical expression", " is of the form ", "A && B", ", so if ", "A", " is false there is no way that the expression will be true. Therefore, the agent does not test the second comparison (", "B", "). Evaluation is also short-circuiting, so the agent considers the logical expression to be false immediately. It is important that the agent does not try to evaluate the comparison statement at this point because the ", "portfolio ", " member is still unbound. Any attempt to read its value will throw a ", "LogicalException", " exception.", "Finally, consider a third logical expression as shown below:", "In this logical expression, the beliefset cursor can unify with the first tuple:", "The ", "name", " and ", "portfolio", " members are bound in the same way as before, but when the second conjunct is tested, ", "portfolio", "'s value \"Prime Minister\" does not match the expected string. The evaluation will back-track to the previous conjunct and try to choose a new binding for ", "name", " and ", "portfolio", ". In our example, ", "name", " will become bound to \"Ms. Action\", ", "portfolio", " will be bound to \"Minister for Sport\" and the query will return true. The entire logical expression succeeds, with the logical members bound as follows:", "In order for an event to be processed by an agent, the agent must determine which plan (if any) should handle the event.", "To decide which of the plans are applicable, JACK employs the following steps:", "The last step results in what is known as the applicable plan set. Elements in the applicable plan set are ordered according to the order in which their corresponding plans were declared \u2013 this ordering is called ", "prominence", ". This ordering can be overridden by a process called ", "precedence", ", where a ranking is provided for each entry via the ", "getInstanceInfo()", " method.", "Having generated the applicable plan set for an event, one entry must be chosen for subsequent execution. Normally JACK will perform this selection, choosing either the first entry in the set, or choosing one at random. The exact mechanism used is tunable via behaviour attributes associated with the event (this is discussed in detail in the section ", "Customising BDI Behaviour with Behaviour Attributes", " in the ", "Events", " chapter). Note that when a choice is being made, only the highest precedence entries are considered. If the event is a BDI event and there is more than one entry in the applicable plan set, a ", "PlanChoice", " event is posted. If plans are provided to handle this event (referred to as ", "meta-level plans", "), the applicable set can be interrogated and the entry deemed most appropriate for the current situation selected. Note again that the available choices are restricted to the highest precedence entries \u2013 there may be additional entries of lower precedence, but they will be considered only when all entries of higher precedence have been exhausted.", "Most ", "#", "- declarations are optional in a plan definition, but the ", "#handles event", " declaration is mandatory. It specifies for which event type the plan type may be relevant. Whenever an instance of this event occurs, the agent will consider this plan as a potential candidate. Unless the plan's ", "relevant", "()", " method indicates otherwise, the agent will assume that this plan is relevant to the event.", "The ", "#handles event", " declaration takes the following form:", "event_ref", " is available within the plan to reference the event being handled and its data fields.", "To be ", "relevant", " to a given event instance:", "If a plan does not have a ", "relevant", "()", " method, the plan is relevant for all instances of the event.", "In the following example, the ", "relevant", "()", " method ensures that the plan is only considered if there is a colour specified in the ", "colour", " data member of the ", "Paint", " event.", "The ", "context", "()", " method provides the next level of 'filtering' after ", "relevant", "()", ". If a plan is relevant to a particular event, the ", "context", "()", " method determines whether the plan is applicable given the agent's current beliefs.", "The ", "context", "()", " method does not take any arguments and its body is always a single JACK Agent Language logical expression. ", " ", " Logical expressions are composed of boolean members, logical members and beliefset cursor expressions", " ", " ", "which can, in general, bind to multiple values. When evaluating the ", "context", "()", " method, the agent will consider all possible alternatives. For every possible set of values that satisfy the ", "context", "()", " method, a separate entry will be created in the applicable plan set.", "In the following example, the ", "context", "()", " method ensures that the plan is only applicable if the ", "Paint", " event requests a specific colour that is the same as the agent's current ", "paintColour", ".", "In the following plan, the ", "context", "()", " method queries a BOM (Bill of Materials) beliefset using ", "getSubcomponent()", ". The plan will only be applicable if the ", "getSubcomponent()", " query can find a tuple with a key of ", "component", " in the beliefset. Note that it is quite normal for a component to have more than one sub-component \u2013 if this is the case, entries corresponding to ", "each", " sub-component will be added to the applicable plan set.", "As usual, only one plan instance will be attempted, and a second one is only tried if the first one fails.", "In the absence of precedence, the order in which plans appear in an agent or capability (the order of the ", "#uses plan", " declarations) determines the order in which the corresponding entries appear in the applicable plan set.", "For example, the agent below uses two plans. Prominence dictates that entries arising from ", "PaintSpecifiedCurrentColour", " will appear in the applicable plan set before entries arising from ", "PaintAnyColour", ".", "Note that inner capabilities are more prominent than plans.", "Precedence is the second means of ordering entries in the applicable plan set. If a ", "getInstanceInfo()", " method is provided in a plan when the entry for the applicable plan set is being generated, the ", "getInstanceInfo()", " method will be called. ", "getInstanceInfo()", " returns a ", "PlanInstanceInfo", " object. The ", "PlanInstanceInfo", " class has the following members and methods:", "Table 8-1: ", "PlanInstanceInfo", " class members and methods", "Note that a data member is available for holding a rank \u2013 the entries in the applicable plan set are ordered according to rank. In order to simplify the ranking process, an array of predefined ", "PlanInstanceInfo", " objects (", "def[]", ") is provided. The array index corresponds to the rank \u2013 0 is the lowest rank and 9 is the highest rank. For example, the following plan will have a rank of 4:", "If a second plan is now introduced:", "then entries arising from the ", "PaintAnyColour", " plan will always precede those arising from the ", "PaintSpecifiedCurrentColour", " plan regardless of their prominence.", "Note that ", "getInstanceInfo()", " is executed after ", "each", " binding of the ", "context", "() method. Thus the current binding is available to ", "getInstanceInfo()", " and can be used in determining the rank to be returned, as shown in the following example:", "When ", "context()", " results in multiple bindings (as could occur in the earlier BOM example), ", "getInstanceInfo()", " is executed after ", "each", " binding. Thus, each entry added to the applicable plan set could be assigned a different ranking.", "The applicable plan set is used to determine which plan instance of those applicable to the event under current consideration should be executed. A plan instance is defined by:", "Note that multiple plan instances may arise from a single plan type instance.", "In order to facilitate reasoning about plan instances JACK provides the ", "Signature", " class. It provides a representation which enables plan instances to be uniquely identified and efficiently compared for logical equivalence. Note that a signature does not contain a reference to the actual plan type instance \u2013 rather, it keeps all the information needed for re-establishing the plan instance.", "The ", "Signature", " class provides the following methods for use by the programmer:", "Table 8-2: ", "Signature", " class methods", "One can gain access to the ", "PlanInstanceInfo", " object that was returned by the plan's ", "getInstanceInfo()", " method via the ", "getInfo()", " method.", "The ", "ApplicableSet", " class extends the ", "SignatureList", " class and one can therefore access the applicable plan set using the following methods:", "Table 8-3: ", "Methods to access the applicable plan set", "Thus, given a reference to the applicable plan set for an event, one can iterate through the ", "Signature", " objects, inspect their corresponding ", "PlanInstanceInfo", " objects and decide which signature is most appropriate for the current situation. Note that the applicable set only contains the highest precedence signatures \u2013 lower precedence signatures become 'visible' only after all higher precedence signatures have been used and failed.", "If one is going to explicitly select a signature, additional information regarding the plan instances will invariably be required. This can be provided by extending the ", "PlanInstanceInfo", " base class and then creating a suitable ", "PlanInstanceInfo", " instance in the ", "getInstanceInfo()", " method.", "With normal events, the agent selects an entry from the applicable plan set for a given event and executes only the plan instance associated with that entry. As noted earlier, the mechanism used for selection (pick the first entry in the list or a pick an entry at random) is tunable via behaviour attributes associated with the event.", "With BDI events, if the applicable plan set contains more than one entry, a ", "PlanChoice", " event is posted. ", "PlanChoice", " events are described in detail elsewhere; for the purposes of this discussion note that the ", "PlanChoice", " class allows access to the following data members:", "Table 8-4: ", "PlanChoice", " class data members", "If the user has provided meta-level plans to handle the ", "PlanChoice", " event, one uses the ", "PlanChoice", " data members to reason about the applicable plan set and to determine which is the most appropriate plan instance in the current situation. This process is called meta-level reasoning.", "A meta-level plan is defined to ", "#handle", " the ", "PlanChoice", " event. It may further include one or more ", "#chooses for", " statements to constrain to which object-level events the plan is relevant. This is discussed in more detail in the section on ", "Plan Declarations", " in the ", "Plans", " chapter. The plan will also access the data members of the particular ", "PlanChoice", " event instance.", "These features are illustrated in the following simple example which prints \"Hello World\" in different languages. Each language is identified by a number (1 for English, 2 for Swedish ...) and each plan ", "#handle", "s an event of type ", "TransEvent", ". This event has a single data member which contains the requested language number. The code for ", "TransEvent", " is not listed but note that it ", "must", " extend ", "BDIGoalEvent", ". Meta-level reasoning is used to select the appropriate plan instance. Note that this example is for pedagogical purposes only \u2013 there are much simpler ways to achieve the same result.", " Beliefsets are used in JACK to maintain an agent's beliefs about the world.", "An agent's beliefset can be stored as either an ", "OpenWorld", " or a ", "ClosedWorld", " class. The beliefset represents these beliefs in a ", "first order", ", ", "tuple-based", " ", "relational", " model. The logical consistency of the beliefs contained in the beliefset is automatically maintained. Hence, for example, if an agent adds a belief that contradicts a belief it already has, the beliefset detects this and automatically removes the old belief.", "The beliefset is not the only way that an agent can represent information. Agents can also include ordinary data members and other data structures that have been implemented in Java. However, the advantage of using a beliefset over normal Java data structures is that beliefsets have been designed specifically to work within the agent-oriented programming paradigm. Therefore, it is fully integrated with the other JACK Agent Language classes, and provides facilities not available with other data storage techniques. In particular, a JACK beliefset provides:", "Each beliefset class definition that an agent uses is called a ", "beliefset relation", " ", ". It describes a set of beliefs that the agent may have in terms of ", "fields", ". When the agent wants to adopt a new belief, it specifies values for each of these fields and ", "adds", " this belief to the relation. This creates a ", "tuple", " for the relation. Every belief that an agent currently has stored in a given beliefset relation is represented as a tuple.", "Tuples can either be ", "true", " or ", "false", ". This models the 'belief' aspect of the tuple. If the tuple is true, the agent believes that it is a true statement. If it is false, the agent believes that it is a false statement. For example, an agent may have a tuple to represent the statement that Mr Important is Prime Minister and member of the Sensible Party. If this tuple is stored as being true, this indicates that the agent will consider the statement true. If it is stored as false, the agent will assume that this statement is false.", "The fact that beliefset relations represents their data as beliefs rather than 'absolute truths' distinguishes them from most other programming storage mechanisms and allows agents to more realistically exhibit rational behaviour. Agents do not treat what they know as absolute truth, but rather as beliefs that reflect what they have learned or have been told about the world to this moment. Like people, they will operate on the assumption that these beliefs are true until more information comes to light, but if something new is uncovered that contradicts them, they will update these beliefs accordingly.", "A beliefset definition uses a relational model to specify an agent's knowledge capacity. This knowledge capacity is expressed as a relation that the agent can use to express beliefs with. Each belief is represented by a specific set of values for each of the relation's fields. The general format for a beliefset relation's definition takes one of the two forms shown below:", "Each component of this definition is explained in the following table:", "Table 9-1: ", "Components of a beliefset definition", "For an agent to be able to use a beliefset, its agent definition file ", "must", " include a data declaration. The data declaration describes the type of beliefset required by the agent and specifies an external name (", "BeliefType", ") and an internal name (", "beliefName", ") for the beliefset. The external name of the beliefset maps to a beliefset definition file of the same name.", "Each of an agent's plans that makes use of a beliefset must contain a declaration specifying read-only or read-write access to the beliefset. This is achieved by using either a ", "#reads data", ", a ", "#modifies data", " or a ", "#uses data", " ", " plan declaration.", "Closed World relations assume that the agent is operating in a world where every tuple that the relation can express is stored in the beliefset at all times as being either true or false. This means that there is no query the agent can make for which it does not have an answer because, theoretically, every possible tuple is always represented in the beliefset. All that the agent can change is whether it believes the tuple to be true or false.", "Of course, most tuple fields have an almost infinite range of values, and hence in practical terms the beliefset cannot store every possible tuple. Instead, only those tuples that the agent believes to be true are stored. Any tuple that is not stored, therefore, is assumed to be false.", "In a Closed World relation, adding a tuple to the beliefset causes the agent to believe what was false to now be true. Similarly, removing a tuple causes the agent to believe what was true is now false.", "Closed World relations do not often occur in the real world, but are still useful in many applications. For example, consider an agent that plays chess. It needs to know the positions of the pieces on the board. This information could be modelled using Closed World relations.", "Open World relations model knowledge and beliefs as most people in the real world experience them: for any given set of beliefs, only some of the answers are known to the agent. Some things may be known to be true, others known to be false and still others unknown.", "Unlike the Closed World example, therefore, Open World relations store both true and false tuples. This models the situation where the agent does not know what something is, but does know what it is not. For example, consider a detective in a classic murder mystery. This detective may not know who the murderer is, but may believe that the murderer is definitely not Ms Scarlet (due to some prior investigation). To reflect this knowledge, the agent will store the statement, \"Ms Scarlet is the murderer\" in the beliefset as a false tuple \u2013 one that is believed not to be the case.", "Because Open World relations record both true and false tuples, any tuple that is not stored in the beliefset is assumed to be unknown. That is, the agent does not know whether the tuple is true or not.", "Unlike Closed World relations, therefore, Open World relations effectively work with three logic values: ", "true", ", ", "false", " and ", "unknown", ".", "Just like the other JACK Agent Language classes, beliefsets provide a number of base members and methods that you can access. These members and methods are described in the following subsections.", "JACK supports three types of beliefsets; private, agent and global. Only private beliefsets can be populated by a beliefset constructor ", "and", " manipulated by plans that use the ", "add", "()", " and ", "remove", "()", " methods. Beliefsets that are specified in an agent declaration as being agent or global are read-only, so after they are populated by their constructor they can only be queried. As the default constructor creates an empty beliefset when the agent that uses it is instantiated, it only makes sense to use the default constructor for private beliefsets.", "A beliefset can be populated with an initial set of tuples by either writing a constructor that reads the required data from a file and explicitly adding the records to the beliefset or by using JACOB Object Modelling.", "The following example shows a beliefset constructor which reads data from a file and explicitly adds tuples to the beliefset.", "If multiple constructors have been defined, the JACK kernel determines which beliefset constructor to use on the basis of the number and type of arguments supplied.", "An alternative method is to initialise tuple objects using JACOB Object Modelling. JACOB is described in more detail in the ", "JACOB Manual", ". Beliefsets have a ", "read()", " method which takes the name of a file as its argument. The ", "read()", " method populates the beliefset according to the contents of the file which should contain data in JACOB format.", "Beliefsets also have a ", "write(String filename)", " method that can be used to write the beliefset contents in the appropriate JACOB form to the given filename.", "The following example illustrates how a beliefset can be initialised in this way.", "Given the beliefset", "and an agent containing the declaration:", "The beliefset could be populated using the ", "read()", " method as illustrated below:", "The data file ", "book.dat", " could contain data similar to the following:", "where ", "TupleTable", " is a pre-defined object for the purpose of initialising beliefsets in this way. Also note that in the above example BookData__Tuple has two underscores.", "In addition, beliefset classes have a constructor which takes a filename as an argument and uses the read method to populate the beliefset.", "This means that by declaring the beliefset as follows:", "the tuples are initialised with the data contained in ", "book.dat", ".", "BeliefSet modification callbacks use this method to post events when changes are made to a beliefset relation. Therefore, when registering any beliefset callbacks with a beliefset relation, the relevant events using this method must be posted.", "This method is automatically generated from the beliefset definition file by the JACK compiler \u2013 the key and value fields of the relation become arguments of the ", "add", "()", " method, as illustrated by the following example.", "This results in the following methods being generated in the class ", "Foo", ":", "This method is used to add tuples to ", "Foo", ". It assumes that the tuple to be added has a belief state of ", "true", ".", "This method could also be used to add tuples to ", "Foo", ". However, given that ", "Foo", " has Closed World semantics, it is only valid to add tuples with a belief state of true. Attempts to add tuples with a belief state of false or unknown will result in a ", "BeliefSetException", " being thrown. If ", "Foo", " had been defined to have Open World semantics, it would have been valid to add tuples with belief states of either true or false. Attempts to add tuples with an ", "unknown", " belief state into a beliefset with Open World semantics will cause a ", "BeliefSetException", " to be thrown.", "The ", "add()", " methods allow an agent to add tuples to any of its private relations, but not to any of its agent or global relations (as these relations cannot have their tuple set changed after creation).", "This method is automatically generated from the beliefset definition file by the JACK compiler \u2013 the key and value fields of the relation become arguments of the ", "remove()", " method as illustrated by the following example.", "This results in the following methods being generated in the class ", "Foo", ";", "This method is used to remove tuples from ", "Foo", ". It assumes that the tuple to be removed has a belief state of ", "true", ".", "This method could also be used to remove tuples from ", "Foo", ". Given that ", "Foo", " has been defined to have Closed World semantics, this form of the method should only be used to remove tuples with a belief state of true. Attempting to remove tuples with a belief state of false or unknown from a beliefset with Closed World semantics will result in a ", "BeliefSetException", " being thrown.", "If ", "Foo", " had been defined to have Open World semantics, it would have been valid to remove tuples with belief states of either true or false. Attempting to remove tuples with an ", "unknown", " belief state from a beliefset with Open World semantics will cause a ", "BeliefSetException", " to be thrown.", "The ", "remove", "()", " methods allow an agent to remove tuples from any of its private relations, but not from any of its agent or global relations (as these relations cannot have their tuple set changed after creation).", "This relation method returns the number of tuples stored in the relation at the time of calling. This includes all tuple instances that physically appear in the relation; therefore, the meaning and results are different depending on whether the relation follows an Open World or Closed World logical model.", "For Closed World relations, this returns a count of the number of True tuples that are currently stored for this relation. For Open World relations, this returns a count of both the number of True and False tuples that are currently stored for this relation. For example, if a relation stores tuples to represent statements of, \"The tie is blue\", \"The tie is not green\" and \"The tie is not red\", calling ", "nFacts", "()", " on this relation will return 3: one tuple representing true information and two tuples representing false information.", "BeliefSet definitions can include the following declarations:", "Each of these declarations are described in the following sections.", "This declaration is used to describe a beliefset relation's key fields. Key fields describe attributes that uniquely identify the object or entity that the tuple is referring to. Each belief that is expressed using a beliefset tuple is a belief about ", "something", ". Hence, the agent needs some way of knowing whether two tuples refer to the ", "same", " thing or not.", "The relation's key fields are used for this purpose. They describe a uniquely identifying characteristic of the thing that the tuple refers to.", "For example, suppose an agent had a beliefset relation to represent bank accounts. When a tuple is added to the beliefset, how does the agent know which bank account it refers to? How does it know whether this new information contradicts what it already believes about bank accounts?", "With bank account information, this is normally done using an account number. By definition, the account number uniquely identifies a given bank account. Therefore, if the beliefset already contains a tuple stating that account 54321 contains $100, adding a (true) tuple that says account 54321 contains $200 contradicts and replaces this belief. Similarly, adding a tuple that says account 12378 has $200 has no effect on this tuple, because the agent knows from its key that this tuple refers to a different bank account.", "A ", "#key field", " declaration takes the following form:", "Each component of this declaration is described in the following table:", "Table 9-2: ", "Components of a ", "#key field", " declaration", "In the last example, the bank accounts had a single key field. This is not necessarily the case in all situations. Sometimes a relation may have multiple key fields (for example in a relation that describes geographic location, where the key might require two key fields: a site's latitude and its longitude). Similarly, a relation might have no key fields. When a relation has no key fields, this means that there is only ever one object that the relation refers to (hence, it does not need to be specified).", "The knockout of existing tuples due to key constraints occurs for true tuples only. As the example above demonstrates, an Open World beliefset can have many negative tuples about something without having them contradicting one another. In fact, if the beliefset contains a positive tuple and the agent adds a negative tuple that doesn't contradict it, the two tuples will coexist in the beliefset as well (\"Ms Action is the Minister for Sport\" and \"Ms Action is not the Prime Minister\", though redundant, do not contradict one another). The only way negative tuples will knock out positive ones is if the two are directly contradictory (for example, \"Ms Action is the Minister for Sport\" and \"Ms Action is not the Minister for Sport\").", "This declaration is used to specify a relation's data fields. Unlike key fields, data fields do not identify the object that the tuple is describing. Instead, they represent information about this object that the agent needs to know. To a certain extent, the value fields are the reason why the agent has the relation in the first place \u2013 because it wants to know this information about some kind of object.", "A ", "#value field", " declaration takes the following form:", "Each component of this declaration is described in the following table:", "Table 9-3: ", "Components of a ", "#value field", " declaration", "For example, a bank account's key field is its account number. However, the account number does not provide any information about the account that an agent will want to record. Its purpose is purely to distinguish one account from another. The sorts of things that the agent might want to know about the account are its balance, owner's name, credit limit, etc. Each of there attributes would be described using value fields.", "Once a beliefset relation has been defined and tuples have been added to the beliefset, the agent will need to access this data. It does so by performing a query on the relation. There are two kinds of query that an agent can perform on a relation:", "Both these queries produce the same results (search for the tuple(s) concerned). The only difference is in implementation. Indexed queries maintain a hash index of tuples, and can usually locate them more quickly, whereas linear queries do not maintain an index; thus the only way that matching tuples can be found is through a linear search.", "Indexed queries occupy slightly more space (which is required for the index) and are slightly slower to update tuples (since the index must be updated as well), but are much quicker to query in most circumstances. Therefore, unless memory and update speed is at an absolute premium, you should use indexed queries for all but the smallest of relations (i.e. those that will hold at least 10 tuples in the beliefset).", "When a query is performed and most of the fields are unified with unbound logical variables, the agent may not have enough information to use the index effectively. In this case, the indexed query would be just as slow as the linear one.", "An indexed query's definition takes the following form:", "Each component of this definition is described in the following table:", "Table 9-4: ", "Components of an ", "#indexed query", " definition", "Only the prototype needs to be declared for each indexed query. The actual query class will be a derived class of ", "BeliefSetCursor", " generated by the JACK compiler. The indexing is done using only the non-logical parameters.", "For example, suppose a beliefset relation is defined as shown below:", "This beliefset relation has an indexed query, which takes ", "name", " and ", "party", " as input parameters, and if successful will return the matching tuple's ", "portfolio", ".", "A beliefset relation may have many query methods, each specifying different input and output parameters.", "Beliefset queries take a number of parameters which are either data values (which can either be literal, normal members or logical members that have already been bound to a specific value) or unbound logical members. The query attempts to match the given parameters against the relation's tuples, using the unbound logical members as 'wild cards'. If a match can be found, the logical members are bound to the tuple's values.", "It is possible to overload the query methods by providing different parameter lists. When such polymorphic query methods are defined, the compiler will select the definition that best matches the parameters provided.", "For example, consider the following beliefset relation definition:", "The same query name has been defined with all different combinations of input and output parameters. This means that any combination of ", "String", " and logical variables can be queried.", "The ", "#linear query", " method is identical to the ", "#indexed query", " method in all respects, other than the way queries search the beliefset for matching tuples. The ", "#indexed query", " builds an index that allows for search speed optimisation while the ", "#linear query", " is more efficient in terms of memory usage.", "Each component of a ", "#linear query", " is described in the following table:", "Table 9-5: ", "Components of a ", "#linear query", " definition", "In all other respects, linear queries are identical to indexed queries in terms of how they are defined and how they are used.", "Complex queries provide a way to combine simple queries (as described above) into one entity that can be used in the same way as a simple query. Suppose that there is a beliefset which contains only ", "parent(parent, child)", " relations and a ", "parent(parent, child)", " query has already been defined. A ", "grandparent()", " query could be written as follows, avoiding the need to add specific ", "grandparent(grandparent, grandchild)", " relations to the beliefset.", "A ", "#complex query", " declaration takes the following form:", "Each component of this declaration is described in the following table:", "Table 9-6: ", "Components of a ", "#complex query", " definition", "In JACK, the code for indexed and linear queries is generated automatically \u2013 the user only provides the function prototypes. With a function query the user provides the entire function definition so queries can be constructed which use arbitrary Java code. A function query can contain logical member definitions, so it can be used to query a beliefset from JACK entities that do not support logical members. In the following example, the function queries ", "#function query String parent(String b)", " and ", "#function query int numChildren( String p )", " could be used from within an agent method.", "A ", "#function query", " declaration takes the following form:", "Each component of this declaration is described in the following table:", "Table 9-7: ", "Components of a ", "#function query", " definition", "Beliefset relations are able to post events when changes are made to their tuples. This is done by posting an event within a ", "beliefset callback", ". Beliefset callbacks are described in more detail below, but essentially they are methods that will be called when a particular beliefset change occurs. This declaration specifies the event types that may be posted from within any of the callbacks defined for this beliefset type.", "A ", "#posts event", " declaration takes the following form:", "Each component of this declaration is described in the following table:", "Table 9-8: ", "Components of a ", "#posts event", " declaration", "#propagates changes", " marks that a beliefset may be a source beliefset in a team belief connection, and it provides an implementation of the connection dynamics, so that changes to the beliefset are propagated correctly. Belief propagation is only available when using JACK Teams. Refer to the ", "Teams Manual", " for more details.", "This propagation includes filtering when the ", " ", "#propagates changes", " declaration is used with an optional event type. This is discussed in more detail in the ", "Teams Manual", ".", "A beliefset relation will only post an event if the specific event-posting callback has been written. Hence, a beliefset relation will only need to include ", "#posts event", " declarations if such callbacks are going to be written. These callbacks are defined in the beliefset super-classes ", "OpenWorld", " and ", "ClosedWorld", ". Their prototypes are listed below:", "When any of these callbacks are included in a beliefset relation's definition, it is imperative to declare any events that the callback posts in ", "#posts event", " declarations.", "For example, consider the following beliefset definition:", "In this example, the beliefset relation includes a callback that should be executed whenever a new prime minister is elected. When a new tuple is added to the beliefset whose ", "portfolio", " field is 'Prime Minister' the ", "newfact", "()", " callback is executed. The ", "name", " member will be bound to the new prime minister's name and the ", "party", " member to the new prime minister's party. It is up to the callback's author to implement how the event should be posted when these circumstances arise. Because an event of type ", "electedEvent", " will be posted, the ", "#posts event", " ", "electedEvent electref", " declaration is required. The ", "newfact", "()", " callback method can use this event's ", "electref", " handle to access the event's posting methods.", "The beliefset ", "OpenWorld", " and ", "ClosedWorld", " classes provide two base methods for manipulating the tuples in an agent's beliefset. These are ", "add", "()", ", which is for adding information to the beliefset, and ", "remove", "()", ", which is for removing information from the beliefset. Each of these methods are provided for both Closed World and Open World relations.", "Beliefset cursors also provide a base method called ", "removeAll", "()", " that can be used to remove a set of tuples from an agent's beliefset relation. When called, this method removes all tuples from the relation that unify with the beliefset cursor's query expression.", "For example, suppose an agent uses a private relation called ", "politician()", " (of type ", "Politician", "). Suppose also that the current set of tuples for this relation are as shown in the following table:", "Table 9-9: ", "Tuples in the Politician beliefset", "If the agent executes the following code, this will remove the first two tuples from the agent's private ", "politician()", " relation.", "That is, it will remove all tuples that unify with the parameters provided to the relation's ", "get who", " indexed query.", "One simple way to clear a private relation for an agent is to use the ", "removeAll", "()", " method on a beliefset cursor expression with unbound logical members for all query parameters. For example, to completely clear the above agent's politician relation of tuples, regardless of how many it has, an agent could execute the following reasoning method code:", "Since every tuple in the relation will unify with this query expression, every tuple will be removed.", "A JACK beliefset is neither an array nor a list of records. It is structured in a way that permits efficient query-based information retrieval, and this is how it is best used. To access data linearly, it may be more appropriate to use a Java data structure rather than a JACK beliefset. Nevertheless, it is sometimes useful to be able to retrieve all the tuples from a JACK beliefset.", "A JACK beliefset query returns a ", "Cursor", " and it is possible to iterate over all the matching tuples using this cursor. For example, suppose we have a plan with:", "The logic machinery knows of cursors as objects that can provide bindings for logical variables and that they carry information, so that when the ", "next", "()", " method is called on the cursor, it will renew the bindings, if possible. The first call to ", "next", "()", " provides the first binding, the second call provides the second binding, and so on, until all alternative bindings have been provided, at which point the ", "next", "()", " resets bindings to the original input state and returns false.", "However, note that if the subsequent processing changes the beliefset, or the beliefset is changed by some other task, the next ", "c.", "next", "()", " call will result in a ", "BeliefSetException", ".", "Note that the code below does ", "not", " iterate through the beliefset (as one may initially expect), but instead repeatedly performs the same processing while a certain beliefset state holds. This is because there is no call to ", "next", "()", " on the cursor returned by ", "bel.", "get", "()", " to renew the bindings:", "If you wish to create your own extension of the ", "OpenWorld", " or ", "ClosedWorld", " classes they must be marked as ", "abstract", ".", "It will also be necessary to create a ", "Cursor", " class for your extended class. An example is shown below:", "The JACK compiler will define the required abstract methods for each specific type of beliefset that you define in your JACK application.", "The ", "view", " concept is central to JACK's data modelling capability, providing the means to integrate a wide range of data sources such as JACK beliefsets, Java data structures and legacy systems into the JACK framework. In performing this role, the ", "view", " type level construct is used in conjunction with JACK query methods (in particular the ", "#complex query", " ", " and the ", "#function query", " ", " introduced in the ", "Beliefset Relations", " chapter), and JACK cursors, which are described in the ", "Plans", " chapter.", "A view is defined as a type level construct using the keyword ", "view", ". There are no requirements on base classes or interfaces for the view. (Note that this is different from all other type level constructs in JACK.)", "A view definition takes the following form:", "Note that a view definition can extend any class and implement any interface.", "A ", "view", " can contain the following declarations:", "Each of these declarations is described in the following sections.", "This is a declaration that this view requires data of type ", "Type", ". ", "Type", " can refer to a JACK beliefset or to an arbitrary data type. The reference name ", "ref", " is used to refer to the data instance within this view. An actual view is bound to an actual data instance at construction time.", "This enables a complex query called ", "methodName", " to be defined. Complex queries were introduced in the ", "Beliefset Relations", " chapter. However, note that when used in a ", "view", " (as opposed to a ", "beliefset", "), the query can be defined to span more than one JACK beliefset. Note that ", "methodName", " must return a ", "Cursor", ". The parameters for the query can be of any type.", " This enables a function query called ", "methodName", " to be defined. Function queries were introduced in the ", "Beliefset Relations", " chapter. They enable queries which use arbitrary Java code to be constructed. Unlike a complex query, a function query can return any type. The parameters for the query can be of any type.", " This statement declares an event that an agent can post from within a view using the ", "postEvent", " method.", "A ", "view", " does ", "not", " have automatic ", "add", " or ", "remove", " methods. Like beliefsets, views must be declared in the agents and plans that use them. The declaration within the agent takes the following form:", "where ", "DataType", " is the type of data involved, ", "ref", " is the reference used within the agent and ", "arg_list", " is the list of arguments that must be passed to the constructor.", "The declaration within a plan takes the following form:", "where ", "DataType", " is the type of data involved and ", "ref", " is the reference to the data.", "Views can be used in the same way as JACK beliefsets (bearing in mind the differences noted above) and conversely, JACK beliefsets may include ", "#complex query", " and ", "#function query", " statements.", "The following examples illustrate how the ", "view", " construct can be used.", "This example illustrates how you can use a ", "view", " and a ", "#complex query", " to formulate a query that spans two JACK beliefsets.", "In this example, you have two beliefsets, one which records where people live and one which records what credit cards people have. A ", "view", " could then be generated to obtain information about credit cards used by people in Melbourne. The associated definitions could look as follows:", "The view, ", "MelbourneCards", ", is now available for use like a JACK beliefset. It is a class that has a constructor taking two arguments, which correspond to the data it uses in the order they are declared. However, the view does not have any automatic ", "add", " or ", "remove", " methods.", "It could be used in the following way:", "The following example illustrates how a view can be used to integrate an external process into JACK. In this example, there is an assembly cell which is controlled by a program called ", "BBS", ". Each machine in the cell has a designated input address and output address. The input address provides access to the machine's status word; the output address provides access to the machine's control word. ", "BBS", " accepts requests on a UDP socket to either read the contents of the input address or to set the contents of the output address.", "Control of a machine by an external agent is achieved as follows:", "If the interface is wrapped in a view, it is possible to encapsulate the low level socket interface into a higher level functional interface consisting of the following queries:", "A plan which implements the control loop specified above can then be implemented as follows:", "The implementation for the view (", "BBSConnection", ") is given below. Note the use of ", "RepeatAction", " and ", "Again", " cursors to implement polling. Polling is a strategy which should be avoided whenever possible as it can be extremely wasteful of CPU time. In this situation, there was no alternative, but inspection of the code reveals that:", "Consequently, the impact of polling on the rest of the system is minimised.", "The ", "JackBuild", " utility is a Java program that invokes the JACK compiler and the Java compiler appropriately so as to rebuild outdated files after editing. The utility accepts arguments from the command line, from which it prepares command lines for first running the JACK compiler (if needed for any JACK files), and thereafter the Java compiler, as needed for any Java files. The command line is as follows:", "The ", "flags", " are used to define operating parameters for the ", "JackBuild", " utility, while the ", "sources", " includes files and directories to be visited by the compiler. If a directory is mentioned, the utility will operate on all files it recognises in that directory.", "Table A-1:", " File name extensions", "Files are recognised by their file name extensions according to the table above, which also shows the file dependencies supported by the utility. In addition, the compiler also recognises a ", ".jack", " extension. This can be used if it is desirable to keep all JACK source files in ", "*.jack", " rather than ", "*.agent", ", ", "*.plan", " etc.", "The flags for the ", "JackBuild", " utility are as follows:", "Table A-2:", " Flags for the ", "JackBuild", " utility", "Note that the ", "-r", " flag tells the utility to operate recursively, which means that it will traverse any directories mentioned on the command line exhaustively and include all recognisable files in the operation. By default, files and directories beginning with a dot are not looked at or traversed. The ", "-a", " flag can be used to override this.", "Dependent files are generated by the respective compilers, and will end up in the same directories as their respective sources.", "If no sources are mentioned on the command line, the utility will operate on all recognisable files in its current working directory.", "If a source is missing, or rather is neither a file nor directory, the ", "make", " utility will abort and leave the file system unaffected.", "If the ", "-n", " flag is given, the utility will merely analyse and report on what is outdated without affecting the file system.", "The ", "JackBuild", " utility operates as follows:", "The ", "-DJAVACARGS=xxx", " argument can be used to add extra arguments to any ", "javac", " command invoked by the JACK compiler.", "The ", "-DJAVAC=xxx", " argument can be used to force the JACK compiler to invoke a different ", "javac", " command, for example ", "jikes", ".", "The ", "-DJACOBARGS=xxx", " argument can be used to add extra arguments to any ", "JacobBuild", " command invoked by the JACK compiler.", " The JACK distribution includes a number of utility packages. Most of the classes in these packages are intended for internal use but some are of more general applicability. The purpose of this appendix is to document briefly those utility classes which may be of use to JACK developers. The utility packages that are included in the JACK distribution are summarised below:", "Table B-1:", " Utility packages included in the JACK distribution", "Note that in the descriptions that follow, it is assumed the user is familiar with particular Java classes and the basic concepts of synchronisation in a multi-threaded environment.", "PathEntry", " provides a capability to open files and to load objects that are in one's ", "CLASSPATH", ". To open a file, use:", "static InputStream open(String filename)", " ", "To load an object, use either:", "static byte[] loadObject(String filename)", " ", "or", "static byte[] loadObject(InputStream is)", "as appropriate.", " The ", "Properties", " class provides an alternative interface to the system properties list. In particular, the loading of user defined properties is simplified and properties are returned as their intended type rather than as a ", "String", " (which must then be converted to the desired type). The loading of user defined properties is achieved with the following method:", "synchronized static final void readProperties(String list)", "list", " can be either a UNIX filename or a URL.", "The following methods are available for accessing properties:", "static final int getIntProperty(String propertyName,int defaultValue)", " ", "static final long getLongProperty(String propertyName,long defaultValue)", "static final double getDoubleProperty(String propertyName,double defaultValue)", " ", "static final boolean getBooleanProperty(String propertyName,boolean defaultValue)", " ", "static final String getStringProperty(String propertyName,String defaultValue)", " ", "static final int getBitMapProperty(String propertyName,int defaultValue,String[] bitNames)", " ", "The behaviour of the above methods is self-explanatory, with the exception of ", "getBitMapProperty()", ". The value stored with the property can either be an integer or a sequence of bit position names separated by colons. If the name is preceded by !, the value of that position is set to 0, otherwise it is set to 1. The position is determined from the index of the bit position name in the ", "bitNames", " array.", " The ", "Redirector", " class allows the user to dynamically redirect the standard input, standard output and standard error for a process. A single method", "is provided for this purpose; if any of the properties ", "debug.setInput", ", ", "debug.setOutput", " or ", "debug.setError", " are set in the system properties list, the appropriate redirection will occur. The association between one of the standard streams and the file to be used for redirection can be achieved using either a properties file and ", "aos.util.Properties.readProperties()", ", by using ", "System.setProperty()", " or by using the ", "-D", " option on the command line for the application.", "A ", "ThreadPool", " is an object that manages a set of threads that are used to process a queue of ", "Runnables", ". The number of threads in the pool varies between a lower and an upper limit, which are specified at construction time. Three constructors are provided:", "ThreadPool()", " The lower limit and upper limit are both set to 1 \u2013 i.e. the thread pool contains exactly 1 thread.", "ThreadPool(int i)", " The lower limit and upper limit are both set to ", "i", " \u2013 i.e. the thread pool contains exactly ", "i", " threads.", "ThreadPool(int i,int j)", " The lower limit is set to ", "i", " and the upper limit is set to ", "j", ".", " In order to execute a ", "Runnable", " object, the method", "synchronized void run(Runnable r)", " ", "must be invoked by the programmer. This method adds ", "r", " to the queue of ", "Runnables", " which is being served by the threadpool.", " A ", "Semaphore", " is a synchronisation resource which is used to establish mutual exclusion regions of processing in JACK plans and threads. A ", "Semaphore", " is a binary resource which plans and threads may wait for and signal on when they have completed. Waiting entities queue up on the semaphore and acquire the semaphore in FIFO order.", "The ", "Semaphore", " class has a single constructor:", "Semaphore()", "The semaphore is grabbed initially by the constructing thread (or plan), and must thus be released by a call to ", "signal()", ".", "Methods are provided to grab and release the semaphore:", "Cursor planWait()", "planWait()", " returns a ", "Cursor", " object to grab the semaphore. This method is called by JACK plans, which then use ", "@wait_for", " to synchronise.", "void threadWait()", "threadWait()", " waits (via ", "Object.wait()", ") to grab the semaphore. This method is called by Java threads (not JACK plans) to synchronise on the semaphore.", "void signal()", "signal()", " releases the semaphore to the next waiting thread or plan.", "A program illustrating the use of semaphores in a JACK application is provided in the solutions to the practical exercises. This code can be found in the ", "doc/practicals/solutions/practical1/semaphore", " directory of the JACK distribution tree.", " ", " A ", "task junction", " is a synchronisation resource for plans. It allows a monitoring plan to wait until a group of plans are complete. The ", "TaskJunction", " class has a single constructor:", "TaskJunction()", "The task junction which is constructed is initially idle: that is, there are no executing plans associated with it.", "The ", "TaskJunction", " class provides the following methods which enable a plan to attach and detach from a task junction, and to determine when a task junction becomes idle:", "void join()", "This method is called by a plan in order to join the task junction.", "void leave()", "This method is called by a plan in order to leave the task junction.", "Cursor idle()", "This method returns a ", "Cursor", " object to observe when the task junction becomes idle.", "It is sometimes useful for a joined plan to leave a task junction and then to rejoin at some later date when a particular condition is satisfied. For example, in a simulation one might use a task junction to keep track of all plans which are initiated within a given timestep \u2013 when the task junction becomes idle, we then move to the next timestep. However, it may well be that not all plans are able complete their execution within a single timestep, in which case we want the plan to leave the task junction and to then rejoin it when the plan is about to complete execution. This functionality is proved by the following method:", "Cursor escape()", "escape()", " returns a ", "Cursor", " object that lets a joined plan escape the task junction while in an ", "@wait_for", " statement. The ", "escape()", " cursor should be used in conjunction with the actual condition waited for, and the Cursor ensures that the plan rejoins the task junction during the plan step which makes the actual condition come true.", "Cursor escape(Cursor c)", "In this variant of ", "escape()", " a joined plan escapes the task junction only until the argument cursor (a triggered cursor) becomes true. This variant is safe with respect to external thread triggering; the task junction is re-joined immediately when the cursor triggers.", "Monitor", " is a convenience class for allowing event handling to be monitored via a primary task junction. The Monitor class goes together with the ", "TaskMonitoring", " interface. They support task execution reflection so that an agent can know whether it is busy or idle with respect to monitored events.", "The following constructors are provided:", "Monitor(Event e,String tj)", "Monitor(Event e,Agent a,String tj)", "Monitor(Event e,TaskJunction tj)", "Monitor(Event e)", " This interface is to be implemented by an agent in order to provide access to a primary task junction for ", "Monitor", " objects. It consists of the following method:", " ", "TaskJunction getTaskMonitor()", "A number of properties are provided for customisation of the runtime behaviour of JACK tools and applications. Developers are of course free to provide their own application specific properties if required.", "This appendix lists the effect of usage, possible values and default setting of each publicly available JACK compiler and runtime environment property. A complete list of the publicly available JACK properties, including properties used to customise tracing and debugging tools can be found in the ", "Tracing and Logging Manual", ".", "Several JACK properties are accessible from the JDE ", "Preferences", " window. Refer to the ", "Development Environment Manual", " for instructions on how to set these properties. JACK properties can also be used when running a JACK application. In this case, the property name must be preceded by a ", "-D", " and entered either on the command line or in the ", "Java Args", " field in the ", "Run Application", " tab of the of the JDE ", "Compiler Utility", ".", "Table C-1", ": JACK Compiler Properties", "Table C-2:", " JACK Runtime Environment Properties", "The JACK\u0099  Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "This set of exercises provides a basic introduction to JACK\u0099  Teams (Teams). It is assumed that the user is already familiar with JACK\u0099  Intelligent Agents. Teams is an extension to JACK\u0099  Intelligent Agents (JACK) that provides a team-oriented framework. The ", "Overview", " chapter in the ", "Teams manual", " provides the user with an introduction to team-oriented programming and the Teams extensions.", "Build a simple application consisting of a team with several sub-teams.", "The intent of this exercise is to demonstrate how to build a Teams application where one team requires several sub-teams to perform roles on its behalf. This example will consist of a ", "Spacecraft", " team which will contain 3 ", "Martian", " sub-teams capable of performing the roles of ", "Pilot", ", ", "SpokesPerson", " and ", "Crew", ".", "If you have not already read the ", "Overview", " chapter of the ", "Teams manual", ", you should read it before beginning this exercise. Note that the introductory example in the ", "Overview", " is similar, but not identical to the example developed in the following exercise.", "1. Create the subdirectories ", "martian", " and ", "spacecraft", ". The application will be organised into two packages (", "martian", " and ", "spacecraft", "). The first package will contain the plans etc. for the ", "Martian", " team and the other will contain the plans etc. for the ", "Spacecraft", " team.", "2. Create the ", "Martian.team", " file in the ", "martian", " subdirectory.", "3. Create the ", "Spacecraft.team", " file in the ", "spacecraft", " subdirectory.", "4. In the directory above the ", "martian", " and ", "spacecraft", " directories, create the main Java program. This program should construct three ", "Martian", " teams with appropriate names. It must then construct the ", "Spacecraft", " team. The containing team should not be constructed before any of its sub-teams.", "A main program called ", "AlienProgram", " is given below:", "5. In the same directory as the main program create the initialisation file to build the role obligation structure. The name ", "scenario.def", " is often used for this file. In this example, all 3 Martians should be capable of performing all 3 roles in the role obligation structure. The start of the initialisation file is given below:", "6. Create the 3 role definition files (", "Crew.role", ", ", "Pilot.role", " and ", "SpokesPerson.role", ") in the martian package.", "In all three cases, the roles indicate the downward interface between a team that can perform that role and a team that requires a sub-team to perform the role. This indicates the events that will be posted from the containing ", "Spacecraft", " team to the ", "Martian", " sub-team capable of performing the role. This means that the ", "Martian", " sub-team must have at least one plan capable of handling the specified event.", "7. Create the ", "MessageEvent", "s required for the application in the ", "martian", " package:", "8. Create the ", "MessageEvent", "s required for the application in the spacecraft package:", "9. Create the plans used by the ", "Martian", " sub-teams in the ", "martian", " package:", "10. In the spacecraft package, create the ", "Visit", " plan to be used by the ", "Spacecraft", " team.", "This plan handles the ", "PerformVisit", " event. It also coordinates the activities among the sub-teams to allow the team to travel to the planet and speak a greeting. It will therefore require the following declarations to indicate that it requires sub-teams to perform the following roles to carry out this task:", "Note that the ", "sp", ", ", "pi", " and ", "cr", " references must correspond to the references in the ", "Spacecraft", " team definition. By using the ", "#requires", " declaration in the plan, we allow the plan to use the default ", "establish", " method to select sub-teams to perform the roles within the plan.", "The default ", "establish", " method will assign a ", "Role", " instance to ", "speaker", " from the list of ", "Role", " instances in the ", "SpokesPersonContainer", ". Similarly, it will assign ", "Role", " instances to ", "pilot", " and  ", "crew", ".", "The ", "Role", " type has a ", "String", " member ", "actor", " which can be used to obtain the name of the sub-team associated with the role.  In this exercise, the body of the ", "Visit", " plan should print an appropriate message to indicate the ", "task team ", " that has been established for this plan. By including a ", "#uses interface Team team", " declaration at the beginning of the plan, the team name can be obtained with ", "team.name()", ". For example:", "This plan must also contain the following import statements:", "11. Compile the program with the following command:", "Create a ", "mkit", " script which contains this command.", "12.  Assuming your program is called ", "AlienProgram", " and that the initialisation file is called ", "scenario.def", ", run the program with the following command:", "The output will look like:", "You will notice that it is possible for the same sub-team to be assigned to more than one role within the task team. In the next exercise an ", "establish", " method will be developed which restricts each martian sub-team to performing only one role within the ", "Visit", " plan's task team.", "13. Create a ", "runit", " script to run your program.", "14. It is also useful to have a ", "cleanit", " script which contains the following command:", "Complete the body of the ", "Visit", " plan and write an ", "establish", " method to ensure that each martian sub-team is only responsible for performing one role within the ", "Visit", " plan.", "1. Initially we will assume that it is possible for one sub-team to be responsible for all three roles and complete the body of the plan. The first step is to have the sub-team tasked to perform the ", "Pilot", " role and fly the craft to the planet. This is achieved by sending a ", "PilotCraft", " event to the sub-team responsible for the ", "Pilot", " role by using a ", "@teamAchieve", " statement as follows:", "Note that the reference to the event factory is through the role (i.e. ", "st", " is the reference used in the declaration of the ", "PilotCraft", " event in the ", "Pilot", " role definition.", "2. At the same time, the sub-team responsible for performing the ", "Crew", " role must maintain a watch to ensure that no problems arise. This is also achieved by using the ", "@teamAchieve", " statement. This time it is used to send a ", "DoWatch", " event to the sub-team responsible for the ", "Crew", " role.", "As the two activities are to be carried out in parallel, the two ", "@teamAchieve", " statements should be inside an ", "@parallel", " statement. In this example the arguments used in the ", "@parallel", " statement are as follows:", "3. Compile and run the program.", "4. When the ", "@parallel", " statement has completed it should mean that the craft has arrived at the planet. Make the following additions to land the craft:", "5. This should be followed by another ", "@teamAchieve", " statement to get the speaker to speak the greeting. Remember that the ", "@teamAchieve", " is synchronous, so this will not be executed until the craft has landed.", "6. Compile and run this version of the program.", "7. Create an ", "establish", " method which restricts each sub-team to performing only one role within the ", "task team", ". This can be achieved by iterating through the role instances inside each role container and selecting one that is associated with a sub-team that is not already being used for a role. When a role instance is selected the team name can be stored in a 'busy' vector, so that this team does not get selected to perform another role.", "The ", "RoleContainer", " base class has a method ", "tags()", " which returns its current role object tags as a ", "java.util.Enumeration", ". These role object tags relate to the role instances and can be used as the argument to the role containers ", "find", " method to obtain the corresponding role instance. In this way we can iterate through the role instances in a role container. The ", "establish", " method described (and an associated helper method) are given below:", "8. The ", "#requires", " declarations in the ", "Visit", " plan should now be changed to ", "#uses", " declarations as the default establish method is no longer being used to establish the task team.", "9. Add the following ", "import", " statements to ", "Visit.plan", ":", "10. Compile and run the new version of the program.", "In the current version of the program, the sub-team performing the watch only does this for a short period of time. It should actually continue this task until notified to stop (or at least until the craft has arrived). In this exercise, the ", "WatchMonitor", " plan will continue until it is notified that it is no longer required to perform the watch.", "1. Modify the body of the ", "WatchMonitor", " plan so that after the print statement it enters a forever loop which contains a ", "@waitFor(elapsed(10.0))", " statement.", "2. Add ", "pass", " and ", "fail", " reasoning methods with appropriate print statements. These are used for tracing purposes in this exercise. They will enable us to tell whether or not the plan has succeeded or failed.", "3. Compile and run this version of the program. What happens? Why?", "4. Modify the mode in the ", "@parallel", " statement in the ", "Visit", " plan to ", "ParallelFSM.FIRST", ".", "5. Compile and run this version of the program. Notice that although the ", "@parallel", " statement ends now, there is no message to indicate that the ", "WatchMonitor", " plan has terminated.", "6. In this version of the example, we send an event to the crew member to start the watch and then send an event to stop the watch at the appropriate time. In exercise 4 we will explore an alternative mechanism for interrupting the ", "WatchMonitor", " plan. 'Clean' the application (i.e. remove class files etc.) using the following command (or your ", "cleanit", " script):", "and copy the current version of the program into another directory to be used as the starting point for exercise 4.", "7. Modify the ", "DoWatch", " event so that it contains a ", "boolean", " member ", "todo", " to indicate whether the watch command is being started or stopped. Introduce two new posting methods ", "startWatch()", " and ", "stopWatch()", " which set ", "todo ", " to ", "true", " and ", "false", " respectively.", "8. Introduce a new beliefset to the ", "martian", " package called ", "CommandsStatus", ". It contains one key field of type ", "String", " and is used as a store of all the active commands.", "9. Add a ", "#private data CommandsStatus commands()", " declaration to the ", "Martian", " team definition.", "10. Modify the ", "WatchMonitor", " plan as follows:", "11. Write a new plan called ", "StopWatch", ". This plan is to be relevant if the ", "todo", " member of the ", "DoWatch", " event is ", "false", ". The body of this plan is to remove the ", "PerformWatch", " command from the ", "commands", " beliefset. Make sure you declare that the ", "Martian", " team uses the new ", "StopWatch", " plan.", "12. Modify the ", "Visit", " plan so that the ", "@parallel", " statement contains the following two branches:", "13. Compile and run the program. The output should look similar to the following:", "Use the ", "aos.extension.parallel.ParallelMonitor", " to throw an exception to interrupt the ", "WatchMonitor", " plan.", "The arguments to the ", "@parallel", " statement specify the success condition, termination condition and how termination is notified. In addition, an optional fourth argument is allowed, which is then an object through which the execution of the parallel statement can be monitored.", "The optional monitor attribute must, if given, be an instance of the class ", "ParallelMonitor", ". The ", "ParallelMonitor", " class implements the following interface:", "The ", "ParallelMonitor", " object allows the team plan to inspect the processing of parallel branches and (as in the code segment below) throw exceptions to branches selected by label or index. If the branch contains an ", "@teamAchieve", ", the plan activated by the ", "@teamAchieve", " will receive a ", "TeamAbort", " exception. The plan can catch this and take appropriate action. Note that if an exception is thrown to a branch, the branch is terminated and the branch is considered to have failed. If the plan that was activated by the ", "@teamAchieve", " does not catch the ", "TeamAbort", " exception, you will not get any indication that the plan has been terminated. Neither the ", "pass", " nor the ", "fail", " reasoning method will be executed in this situation.", "1. Change directory to the version saved before the previous exercise (i.e. before the version to interrupt the ", "WatchMonitor", " plan using a beliefset.", "2. In this version, we will interrupt the ", "WatchMonitor", " plan by using a ", "ParallelMonitor", " object to throw an exception.", "3. In ", "Visit.plan", ", import ", "aos.extension.parallel.ParallelMonitor", ".", "4. In ", "Visit.plan", ", create a ", "ParallelMonitor", " object ", "p", " before the ", "@parallel", " statement. Modify the ", "@parallel", " statement to be:", "Note that ", "ParallelFSM.ANY", " is used. Why?", "5. ", "fly", " is a reasoning method in which ", "@teamAchieve", " is used to send an event to the pilot to start travelling to the planet. When this is complete, the ", "fly", " reasoning method must use the ", "ParallelMonitor", " object to test the status of the ", "watch", " branch (using ", "getStatus(\"watch\")", "). If it is still active (which it should be in this example),  the ", "ParallelMonitor", " object must throw an exception to the ", "watch", " branch (using the ", "throwTo(...)", " method). Create this ", "fly", " reasoning method in the ", "Visit", " plan.", "6. Compile and run the program. Note that although the ", "pass", " and ", "fail", " reasoning methods are not executed, the ", "WatchMonitor", " plan has been terminated by a ", "TeamAbort", " exception.", "7. In the ", "WatchMonitor", " plan, wrap the ", "performWatch", " activity in a ", "try/catch", " statement that catches a ", "TeamAbort", " exception. Print a trace statement if you catch a ", "TeamAbort", " in this plan.", "8. Add the ", "import aos.team.TeamAbort", " statement to the ", "WatchMonitor", " plan.", "9. Compile and run the program. Your output should be similar to the following:", "10. Try changing the mode in the ", "Visit", " plan ", "@parallel", " statement to ", "ParallelFSM.ALL", ". Compile and run the program. What happens? Why?", "11. Change the mode back to ", "ParallelFSM.ANY", ".", "In this exercise we illustrate the upwards propagation of team beliefs.", "Belief propagation focuses on how the beliefsets of teams and sub-teams may be connected through role relationships. Belief connections are either directed upwards, synthesizing the beliefs of sub-teams, or downwards, allowing sub-teams to inherit beliefs from the team.", "In this exercise, the pilot will maintain a flight status beliefset which, for simplicity, will consist of two non key ", "String", " fields:", "This information is to be propagated up to the spacecraft team. In some applications, data could be propagated from several sub-teams and then merged in some way. For example, sub-teams could propagate their location and the team could combine these locations into a single aggregated location. This is not illustrated in this exercise.", "To achieve upward propagation of beliefs, the following components need to be provided:-", "1. A data source definition", "2. Source team declarations", "3. Role declarations", "4. A target data definition", "5. Target team declarations", "1. Create the data source type definition.", "In the ", "martian", " directory, create the ", "PilotFlightStatus", " beliefset in the normal way. The beliefset is to have two non key ", "String", " fields, ", "status", " and ", "destination", " as described in the introduction to this exercise. In addition to the normal declarations for the value fields and the queries, add the following declaration for belief propagation:", "2. Add the data source to the sub-team type definition.", "Add a ", "#private data PilotFlightStatus flightStatus();", " declaration to the ", "Martian", " team definition.", "3. Add the declaration to associate a synthesizing belief with the ", "Pilot", " role.", "Add a ", "#synthesizes teamdata PilotFlightStatus flightStatus;", " declaration to the ", "Pilot", " role definition.", "4.  Create the target data definition (synthesized teamdata) for the spacecraft.", "This is to be called ", "CraftStatus", ". ", "CraftStatus", " should be defined in a file called ", "CraftStatus.td", ". A template for a synthesized teamdata is shown below (", "DataType__Tuple", " is a placeholder for the type of the incoming tuple):", "In this exercise the synthesis method simply adds a copy of any new status details propagated up from the pilot's beliefset. Note that", "5. Add the declaration for the target data to the ", "Spacecraft", " team.", "Add a ", "#synthesizes teamdata CraftStatus status(pi.flightStatus)", " declaration to the ", "Spacecraft", " team definition. ", "pi", " must correspond to the reference in the ", "#requires Pilot", " role declaration in the ", "Spacecraft", " team definition. This statement has the effect of creating an instance of the ", "CraftStatus", " teamdata type called ", "status", " that is private to the ", "Spacecraft", " team. In this exercise, ", "status", " receives beliefs propagated from a sub-team performing the pilot role and stores the propagated beliefs in a ", "PilotFlightStatus", " tuple. (", "CraftStatus", " extends ", "PilotFlightStatus", ".) The storage is performed within the ", "#synthesis", " method of ", "status", ".", "The necessary ", "#requires", "/", "#performs", " declarations and ", "scenario.def", " file required to build the role obligation structure for the spacecraft and martian teams have been established in previous exercises.", "The components are now in place for belief propagation to take place. The remainder of this exercise uses belief propagation to propagate belief changes from the  from the sub-team in the pilot role to the spacecraft.", "6. Add a ", "#uses data CraftStatus status", " declaration to the ", "Visit", " plan.", "7. Modify ", "Visit.plan", " so that after the ", "@parallel", " statement is executed, it checks that the ", "status", " teamdata contains the tuple ", "(\"holding\",eventref.planet)", " (where ", "eventref", " is the event being handled by the plan). If it does, then print a message and carry out the remaining ", "@teamAchieve", " statements to land the craft and speak the greeting. If it does not, print an error message and make the plan fail.", "8. Modify the  martian ", "Travel.plan", " and ", "LandCraft.plan", " so that they assert status information in the ", "PilotFlightStatus", " beliefset at each stage of the journey. These plans will require ", "#uses data PilotFlightStatus flightStatus", " declarations.", "9. Compile and run the program", "In this exercise we illustrate the downwards propagation of team beliefs.", "In this exercise we will propagate the craft status information down from the spacecraft to the sub-teams in the ", "CrewContainer", " and ", "SpokesPersonContainer", ".", "To achieve downward propagation of beliefs, the following components need to be provided:-", "1. A data source definition", "2. Source team declarations", "3. Role declarations", "4. A target data definition", "5. Target team declarations", "1. Add a trace statement to the teamdata definition.", "In this exercise the same teamdata type is used as both the source and target data type. The ", "Martian", " team will have a private instance of ", "CraftStatus", " teamdata that is to contain beliefs inherited from the spacecraft's ", "CraftStatus", " teamdata. This will enable the ", "Martian", " sub-teams to track the craft status and their current 'position'.", "When data is added to the spacecraft's ", "status", " beliefs, the beliefs will be propagated down to the sub-teams involved in the inheritance connection. Note that there is no need to have a ", "#propagates changes", " declaration in the teamdata definition as it extends the ", "PilotCraftStatus", " beliefset which already has a ", "#propagates changes", " declaration.", "The ", "CraftStatus", " type was defined in exercise 5 and is in the ", "spacecraft", " package.", "To help follow the belief propagation, add a trace statement to the ", "CraftStatus", " synthesis method to print any new data as it is added.", "2. Add a ", "#inherits", " declaration to the Role definition.", "Add a ", "#inherits teamdata CraftStatus status;", " declaration to the ", "Crew", " role definition.", "CraftStatus", " is defined in the ", "spacecraft", " package, so it is necessary to add an import statement for ", "spacecraft.CraftStatus", " to the ", "Crew", " role definition.", "3. Add the ", "#inherits", " declaration to the target team.", "Add a ", "#inherits teamdata CraftStatus craftstatus(Crew.status)", " declaration to the ", "Martian", " team definition. Each instance of a ", "Martian", " team will now have its own private instance of a ", "CraftStatus", " teamdata to enable it to track the craft status. The information is only propagated to the sub-teams that fill in the ", "Crew", " role. When the propagated beliefs are inherited by a sub-team, they are again dealt with by the ", "#synthesis", " method in the ", "CraftStatus", " teamdata and the data is stored in a ", "PilotFlightStatus", " tuple.", "CraftStatus", " is defined in the ", "spacecraft", " package, so it is necessary to add an import statement for ", "spacecraft.CraftStatus", " to the ", "Martian", " team definition.", "The necessary ", "#requires/#performs", " declarations and ", "scenario.def", " file required to build the role obligation structure have been established in previous exercises.", "The components are now in place for downward propagation to take place.", "4. Compile and run the program.", "5. You should have noticed that ", "all", " sub-teams in the ", "Crew", " role container receive the new data from the ", "Spacecraft", " team. If there were any martians in the ", "SpokesPerson", " role container that were not in the ", "Crew", " role container, they would be unaware of the craft status.  To overcome this deficiency:", "6. Compile and run the program. Note that the information should only have been propagated to each sub-team once, not once/role that the sub-team is involved in.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "The solutions to the programming exercises can be found in the ", "practicals/teams/solutions", " subdirectory. There is a separate directory for each of the exercises.", "Instruction 3: The spacecraft does not arrive. This is because the ", "@parallel", " statement does not terminate now that the ", "watch", " branch does not terminate.", "Instruction 4: ", "ParallelFSM.ANY", " is used so that the ", "@parallel", " statement succeeds if the ", "flying", " branch terminates successfully.", "Instruction 10: The statements after the ", "@parallel", " statement are not executed. The ", "watch", " branch is considered to fail \u2013 it is terminated when the ", "fly", " reasoning method throws it an exception. When the ", "@parallel", " statement has a mode of ", "ParallelFSM.ALL", " and one of the branches fails the ", "@parallel", " statement fails.", "Note that the actual ", "WatchMonitor", " plan is interrupted in this exercise. The plan passes because the ", "TeamAbort", " exception is caught in the ", "try/catch", " statement.  Without the ", "try/catch", " statement, the plan would be interrupted and terminate immediately \u2013 it would not even execute the ", "fail", " reasoning method to indicate that it had terminated.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "There are some questions in the comments of the examples.", "The solutions to the programming exercises can be found in the ", "practicals/jack_jde/solutions/practical2", "  subdirectory. There is a separate directory for each of the exercises.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Practical 1 provides an introduction to JACK agents, plans, events and capabilities. The notes are based on the material in the ", "JACK\u0099 ", " ", "Intelligent Agents", " ", "Agent Manual", " and provide a summary of the features that you need to be familiar with to complete the programming exercises. For more details refer to the ", "Agent Manual", ". When the prerequisite information has been covered for a particular exercise, it is indicated explicitly in the notes. In some cases additional information is provided in the introduction for the exercise. It is assumed that you are familiar with Java and are able to develop and run Java applications in your computing environment.", "The Practical exercises will be developed using the JACK Development Environment. It is assumed that the reader is familiar with the overall structure and operation of the JDE. If this is not the case then at least Chapters 1 and 2 of the ", "JACK\u0099 ", " ", "Intelligent Agents", " ", "Development Environment Manual", " should be read before commencing the exercises. No additional material regarding the JDE is provided in these notes.", "JACK\u0099  Intelligent Agents (JACK) is an agent-oriented development environment built on top of and fully integrated with the Java programming language. JACK consists of the key components described below.", "The JACK Agent Language", "The JACK Agent Language (JAL) is a programming language that can be used to develop agent-based systems. JAL is a 'super-set' of Java \u2013 encompassing the full Java syntax while extending it with agent-oriented constructs.", "The JACK Agent compiler", "The JACK Agent Compiler pre-processes JAL source files and converts them into Java. This Java source code can then be compiled into Java virtual machine code to run on the target system.", "The JACK Agent kernel", "The JACK Agent kernel is the runtime engine for programs written in JAL. It provides a set of classes that give JAL programs their agent-oriented functionality. Most of these classes run behind the scenes and implement the underlying infrastructure and functionality that agents require. Others are used explicitly in JAL programs. They are inherited from and supplemented with callbacks as required to provide agents with their own unique functionality.", "The JACK Development Environment", "The JDE is a cross-platform graphical development environment that can be used to develop JACK agent applications. In addition to providing support for code generation, tools are provided to support the design process and the tracing of agent execution.", "JAL extends Java by:", "Class-level constructs", "Agent", ", ", "Event", ", ", "Plan", ", ", "Beliefset", ", ", "View", " and ", "Capability", " class-level constructs are provided in JACK. Each of these are implemented as Java classes.", "To create your own agent, the ", "Agent", " class is extended and the particular details required for your specific agent are included. A similar approach is used to create your own events, plans, beliefsets and capabilities.", "JACK declarations", "These provide a set of statements that define properties of a JAL type and declare relationships between the classes above. They are preceded by a ", "#", " symbol.", "JACK reasoning method statements (@-statements)", "Reasoning statements are JAL statements that can only appear in reasoning methods. Reasoning methods are found inside a plan. Reasoning method statements are preceded by an @ symbol.", "Semantic extensions", "JAL provides semantic extensions that support the ", "Belief Desire Intention (BDI)", " execution model.", "When an agent is instantiated in a system, it will wait until it is given a goal or it experiences an event to which it must respond. When it receives an event (or goal), the agent initiates activity to handle the event. If it does not believe that the goal or event has already been handled, it will look for the appropriate plan(s) to handle it. The agent then executes the plan or plans depending on the event type. The handling of the event may be synchronous or asynchronous relative to the posting. The plan execution may involve interaction with an agent's beliefset relations or other Java data structures. The plan being executed can in turn initiate other subtasks, which may in turn initiate further subtasks (and so on). Plans can succeed or fail. Under certain circumstances, if the plan fails, the agent may try another plan.", "Within a single process you can have multiple agents and each agent potentially has multiple ", "task queues", ". A task queue is generated when an asynchronous event is received by the agent (either from itself or from another agent). The task queue contains the processing steps (or tasks) that are required for the agent to handle the event \u2013 these steps are specified in a plan. Task execution can result in further event posting. If the event is posted synchronously, the resulting tasks are added to the head of the task queue that generated the event. If the event is posted asynchronously, a new task queue will be generated.", "The JACK kernel is responsible for giving each agent a 'turn'. Within an agent, a task manager is responsible for cycling through the task queues (exactly how will depend on the task manager being used by the agent). This is all managed by the JACK kernel within the JACK thread of execution. Note that this does not prevent other threads in the Java program from calling agent methods. You will see examples where an agent method is invoked from the Java main thread in the exercises.", "Of course, you can also have agents in different processes and on different machines communicating with one another.", "The ", "Agent", " class embodies the functionality associated with a JACK intelligent agent. To define your own agents, the JACK ", "Agent", " class is extended by adding members and methods that are applicable to your agent's specific problem domain.", "In a file called ", "AgentType.agent", ":", "Timer", " timer", "Specifies which clock the agent uses to measure the passage of time.", "Constructor", "To construct an agent, follow the normal convention for constructors used in Java. JACK agents require a name (of type ", "String", ").", "finish()", "Used to terminate an agent. It causes all event processing within the agent to be terminated immediately, and removes the agent from the JACK runtime network.", "postEvent(EventName)", "This allows an agent to post an event to itself. The event is handled asynchronously by the agent. The parameter is an instance of an event. As event posting methods are responsible for the creation of an instance of an event, ", "postEvent()", " is often invoked with an argument that involves the event's posting method as shown below.", "Note that ", "eventRef", " must have been declared to be an event that is handled by the agent (", "#handles event EventType eventRef;", "), and the event must also have a corresponding posting method. The ", "EventName", " parameter that is found in the methods described below is often replaced by an argument that involves the event's posting method.", "postEventAndWait(EventName)", "This is similar to ", "postEvent()", " except that it is posted synchronously. The event is still executed as a separate task, but the calling method must wait until this task has been completed before continuing.", "send(name, EventName)", "This method is used to send messages/events to other agents. The first parameter (", "name", ") is of type ", "String", " and is the name of the destination agent. The second parameter is the message event to be sent to the destination agent. Only certain event types can be used for inter-agent communication. This will be discussed later in this document.", "reply(receivedMessageEvent, SendEventName)", "reply()", " is used to send a message back to an agent from which a previous message has been received. ", "reply()", " does not specify the destination agent \u2013 this information is contained in the message that it received.", "The reply message arrives as a data object on the reply queue of the original message event. This means that the message event that is sent back using ", "reply", " does not trigger a new task or plan.", "name()", "This method can be used to retrieve the agent's name as a ", "String", ".", "In ", "MyAgent.agent", ":", "Events are the originators of all activity within JACK. There are a number of Event classes in JACK. They can be categorised into the two broad categories of normal events and BDI events.", "Normal events correspond to events in conventional event-driven programming. They are transitory and initiate a single immediate response. On receipt of the event, the agent selects an appropriate plan which either succeeds or fails. If the chosen plan fails, the agent does not try another plan.The normal event classes are:", "These are used to represent a change in belief or circumstance that give the agent a sense of purpose. The agent desires not to react to information, but rather to achieve something. By default, all BDI agents can involve meta-level reasoning (i.e. reasoning about plan selection). Depending on the type of BDI event (and the event's behaviour attributes) the agent may try alternative plans and may even perform recalculation of the ", "applicable plan set", " before selecting another plan to try. The BDI event classes are described in the following table.", "Note that there are two other event classes to consider.", "The brief descriptions given above of the BDI events are of the default behaviours that occur when the event arises. This default behaviour can be modified by setting the behaviour attributes of an event using ", "#set behavior", " statements in the event to set the values of particular attributes. ", "InferenceGoalEvent", "s can also be customised by setting behaviour attributes. Details of the attributes can be found in the ", "Agent Manual", ".", "To define your own events, extend the appropriate JACK event class. Then add any members required as part of the event structure. These members can then be used to convey information to the agent when it receives the event. It is also necessary to specify at least one posting method for the event.", "We will illustrate the event template using the base class ", "Event", ". Note that to define an event to extend one of the other event types described earlier, you would replace ", "Event", " with the specific event type required: i.e. ", "MessageEvent", ", ", "BDIFactEvent", ", ", "BDIMessageEvent", ", ", "BDIGoalEvent", ", ", "InferenceGoalEvent", " or ", "PlanChoice", ".", "In a file called ", "EventType.event", ":", "A posting method is executed whenever an instance of the event needs to be created. The posting method describes everything that the agent needs to do to construct an instance of the event.", "The actual base members will depend on the specific event type. They are:", "Cursor replied()", "This method returns a cursor which can be ", "true", " or ", "false", " depending on whether or not an agent has received any replies to a given message event. A cursor is a special type provided by JACK. Cursors can be tested multiple times, and each time they are tested they may return a different truth value. They are discussed in more detail in the ", "Agent Manual", ", but at this point it is sufficient to understand that this method can allow the agent to wait for a reply to a message before it continues with a given task.", "MessageEvent getReply()", "This complements ", "replied()", ". It allows you to retrieve a reference to a message event that has been sent as a reply. If there are no replies it returns null. Again this method is only provided for message events.", "In ", "MyEvent.event", "A plan describes a sequence of actions that an agent can take when an event occurs. Each plan is capable of handling a single event. When an agent executes a plan, it starts by executing the plan's ", "body()", " method \u2013 i.e. its top level reasoning method.", "Reasoning methods are not the same as normal Java methods. Each statement in a reasoning method is treated as a logical statement that can either pass or fail. Unless the plan explicitly caters for the possibility of a statement's failure (through, for example, an ", "if-else", " construct), failure of a statement causes a reasoning method to fail. If an agent reaches the end of a reasoning method, then the reasoning method has succeeded. If it reaches the end of the ", "body()", " reasoning method, then the plan has succeeded.", "The template below can be used for any plans that do not involve meta-level reasoning.", "In a file called ", "PlanType.plan", "Note that reasoning methods can include special reasoning statements preceded by ", "@.", "  They are ", "@achieve", ", ", "@determine", ", ", "@insist", ", ", "@maintain", ", ", "@post", ", ", "@reply", ", ", "@send", ", ", "@sleep", ", ", "@subtask", ", ", "@test", " and ", "@waitFor", ". These reasoning statements can only be used inside plans. For more details regarding the reasoning statements, refer to the ", "Agent Manual", ".", "Agent", " agent", "Identifies the agent to which the plan belongs", "In a file ", "MyPlan.plan", "We could test the example (which consists of ", "MyAgent.agent", ", ", "MyEvent.event", " and ", "MyPlan.plan", ") with the following main program:", "Capabilities represent functional aspects of an agent that can be 'plugged in' as required. Capabilities are built in a similar fashion to simple agents \u2013 constructing them involves declaring the JAL elements required. Events, beliefsets, plans, Java code and other capabilities can all be combined to make a capability.", "In a file called ", "CapabilityType.cap", ":", "String toString()", "Capabilities do not have a name in the sense that agents do, but they can be referred to through the chain of reference names used in the ", "#has capability", " statements. The reference name can be retrieved by calling the ", "toString()", " method.", "void postEvent( Event event )", "The postEvent method is used to post events within capability code.", "Agent getAgent()", "If this method is called on a capability, it returns the containing agent.", "protected void autorun()", "This method can be overridden in order to provide some initialisation when the capability is actually brought into being.", "In a file called ", "MyCapability.cap", ":", "JACK provides a ", "Beliefset", " class which has been specifically designed to work within the agent-oriented paradigm. The JACK ", "Beliefset", " class is described in detail in the notes provided with practical 2.", "Exercise 1", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "If you find any errors in this document or would like to suggest improvements, please let us know.", "The JACK\u0099  documentation set includes the following manuals and practicals:", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "\n\u00a0", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Set up a Bill of Materials (BOM) beliefset.", "In this exercise you will create a simplified BOM beliefset to be used within a ", "Planner", " agent. A BOM is a data structure used in manufacturing to describe the component/subcomponent structure of part assemblies. In this tutorial, the BOM will only capture the component/subcomponent structure: in practice, it will contain much more information, such as the number of a particular component that is required, whether the component is made internally or is outsourced etc.", "You will also create a main program to read BOM data provided by the user. This information will be stored in a JACK beliefset which is private to the ", "Planner", " agent. An alternative mechanism for initialising the beliefset is to use a JACOB file. This alternative is used in Exercise 5.", "1. Create a directory called ", "practical2/ex1", ". In this directory, start the JDE and open a new project called BOM.", "2. Create a beliefset type called ", "BOM", ":", "3. We will now use the design tool to define an agent, ", "Planner", ", that will store component/subcomponent tuples in a private beliefset of type ", "BOM", ":", "4. The beliefset will be populated at agent construction time. Consequently the agent's constructor will be passed two strings \u2013 the agent's name and the name of a file containing component-subcomponent details. The constructor must read each component-subcomponent relation from the file, and add the information to the agent's ", "BOM", " beliefset. The code to achieve this can be added to the agent by using the browser to edit the agent as a JACK file. Sample code for the constructor follows:", "Make sure that the ", "Planner", " agent has the following import statements:", "5. Add a new file called ", "Program.java", " to the ", "Other Files", " folder in the browser. It will create a ", "Planner", " agent, perhaps as follows:", "If you wish to run the project from within the JDE make sure that you use the full pathname for bom.dat.", "6. Create the file ", "bom.dat", " and populate it with component/subcomponent records. It could contain:", "7. Compile and run the program. No output is generated by the program at this stage, but it provides the basis for the remaining exercises.", "Use the indexed query to find a component's subcomponents.", "This step involves the use of indexed queries and a plan with a ", "context()", " method to print out one of the subcomponents of a component. Initially we use a ", "BDIGoalEvent", " so that only the first successful applicable plan is executed. This means that if we post only one event (e.g. find a subcomponent of component X), the first plan to have a context that finds a binding for a subcomponent of X will be executed. In that case we will only find (at most) one subcomponent.", "1. Open the ", "Planner_AD", " design diagram and", "2. In the ", "Planner_AD", " design diagram:", "3. Edit the ", "FindSubcomponent", " event so that it:", "4. Edit the ", "FindSubcomponentPlan", " plan so that it", "5. Modify the ", "Planner", " agent so that it contains a ", "findSubcomponent(String component)", " method which will post a ", "FindSubcomponent", " event using ", "postEventAndWait()", ".", "6. Modify the main program so that it makes several invocations of the ", "Planner", " agent's ", "findSubcomponent()", " method with the name of a component that is in the agent's BOM beliefset. Ensure that for at least one of the invocations the component is composed of several subcomponent types.", "7. Compile and run the program.", "1. Why aren't all the component's subcomponents printed out?", "Use the ", "InferenceGoalEvent", " class instead of ", "BDIGoalEvent", ".", "In this example, you will use an ", "InferenceGoalEvent", " instead of the ", "BDIGoalEvent", ". This illustrates two concepts. The first is the difference between these two types of event (i.e. the ", "InferenceGoalEvent", " will cause all applicable plans to be executed). Secondly, it shows that there is a separate plan instance generated in the applicable set for each of the possible bindings in the context method. This means that in this example we will see all the subcomponents being printed. A separate plan instance will be responsible for printing the message about each subcomponent.", "1. Modify the ", "FindSubcomponent", " event so that it is an ", "InferenceGoalEvent", " and not a ", "BDIGoalEvent", ".", "2. Compile and test the program. The tests should involve at least one component which is composed of four or more subcomponents.", "Use a beliefset callback method.", "In this exercise you add an order beliefset to your ", "Planner", " agent and use a beliefset callback method to post a ", "FindSubcomponent", " event to the agent. This will result in a list of subcomponents being printed for the required new component.", "1. Use the JDE to create a new beliefset type called ", "Orders", " that belongs to the ", "bom", " package. It will have one key field (", "String orderId", ") and three non-key fields (", "String component", ", ", "int numberRequired", ", ", "String date", "). Add at least one query to the beliefset.", "2. Open the ", "Planner_AD", " design diagram and", "3. Modify the ", "Planner", " agent so that it contains a new method ", "addOrder(String orderId, String component, int numberRequired, String dueDate)", " that will add a new order into the ", "orders", " beliefset. Note that the ", "add()", " method may throw a ", "BeliefSetException", ", so ", "add", " must be invoked from inside a ", "try/catch", " block. You will also need to import ", "aos.jack.jak.beliefset.BeliefSetException", ". Your ", "addOrder()", " method should be similar to the following:", "4. Edit the ", "Orders", " beliefset type and", "5. Modify the main program so that it:", "6. Create a data file that contains several orders. At least one order should be for a component that has four or more subcomponents.", "7. Compile and run the program.", "Use a JACOB initialisation file to initialise the ", "BOM", " beliefset.", "In this exercise, you will modify the ", "Planner", " agent's constructor so that it no longer reads the data from the text file used in the earlier exercises. Instead, you will create a file in JACOB ASCII format that is read in either when the beliefset is constructed, or by using the beliefset ", "read", " method in the agent's constructor.", "1. Edit the ", "Planner.agent", " and remove the code to read the BOM data from the filename passed into the constructor.", "2. Modify the ", "#private data BOM bom()", " declaration so that the filename is now passed to the ", "BOM", " constructor (", "#private data BOM bom(\"bom.dat\")", ").", "3. Edit the file ", "bom.dat", " so that it contains the data in JACOB ASCII format. An example data file is shown below.", "4. Compile and run the program.", "5. It is also possible to explicitly invoke the beliefset's ", "read", " method to read data in JACOB ASCII format. This means that the filename can then be passed as a parameter to the agent's constructor.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Make a basic robot agent that contains a Java method that prints a message to indicate that the robot is painting a part.", "The aim of this exercise is to demonstrate how to build, compile and run a JACK program using the JACK Development Environment (JDE). Consequently, no agent-oriented programming concepts other than agent creation are involved.", "1. Make sure that ", "CLASSPATH", " is set to include ", "jack.jar", " and the root path for your application.", "2. In a new directory (called ", "ex1", ") start the JDE using the following command:", "3. Create a new project as follows:", "4. We will now develop our application using the design tool. In this application we will develop the following types of diagrams:", "Note that when we add new components to a design diagram, the skeleton for the type definition is automatically created and added to the browser. Links created between components on the design canvas result in the corresponding declarations being added to the type definitions in the browser. Removing a link from a design diagram removes the link from the underlying model and the change will be reflected in the browser. Removing a component from the design diagram does not remove it from the underlying model. It will still exist in the browser and can be dragged back on to the design canvas to view its relationships with other components in the diagram.", "5. Create the top level agent diagram using the design tool.", "6. In the browser, edit the ", "Robot", " agent by right-clicking on the robot agent and selecting ", "Edit as JACK file", ". Add a Java method called ", "paintPart()", " that contains the statement", "System.out.println(\"Painting part now\")", ".", "Close the robot agent file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the robot agent file, click the ", "Save", " button and then the ", "Close", " button.", "7. Use the browser to add the main program. This is added in the ", "Other Files", " folder at the top level of the browser hierarchy. Right-click on the ", "Other Files", " folder and select ", "Add New File", " from the pop-up menu. Add the code for the main program in the ", "Edit File", " window which appears. Save the main program with the name ", "Program.java", ". The following main program can be used to test the paint robot:", "8. Save the project. This can be achieved by selecting the ", "Save Project", " option from the ", "File", " menu in the top left hand corner of the JDE.", "The JDE window should look similar to the following:", "Figure 1: ", "The JDE window with project browser, ", "Robot_AD", " design, design palette and Program.java windows", "9. Compile and run the program within the JDE.", "Figure 2: ", "The ", "Run Application", " tab of the ", "Compiler Utility", "Extend the robot agent to use a JACK plan.", "In this exercise, the robot agent's ", "paintPart()", " method will post a ", "Paint", " event, thus allowing a plan to be chosen to respond to this event. At this stage we will only have one plan, ", "PaintSpecifiedCurrentColour", ", which handles the ", "Paint", " event. The plan will print a message to indicate that the robot is painting a part a particular colour. Note that the plan ", "PaintSpecifiedCurrentColour", " would be more appropriately named ", "PaintSpecifiedColour", " at this stage in the practical. However, this plan will be used to paint a part a specified colour which matches the robot's current paint colour in later exercises, and it was felt that it would be less confusing if the name was not changed.", "As before, ", "paintPart()", " is invoked from a Java ", "main()", " method (and runs on the Java main thread) and is followed by a ", "System.exit(0)", " call.", "Plans and events are described in the ", "Introduction to JACK", " notes.  If necessary, read these before beginning the exercise.", "1. Use the design tool to add a ", "Paint", " event to the application.", "2. On the design canvas, create a ", "posts", " link from the ", "Robot", " agent to the ", "Paint", " event. Observe that a declaration is added automatically by the JDE in the ", "External Events", " folder of the ", "Robot", " agent.", "3. On the design canvas, create a ", "handles", " link from the ", "Paint", " event to the ", "Robot", " agent.", "4. Add a ", "PaintSpecifiedCurrentColour", " plan to the ", "Robot_AD", " canvas. The plan must also be in the ", "robot", " package.", "5. On the design canvas, create a ", "uses", " link from the ", "Robot", " agent to the ", "PaintSpecifiedCurrentColour", " plan.", "6. On the design canvas, create a ", "handles", " link from the ", "Paint", " event to the ", "PaintSpecifiedCurrentColour", " plan. Your design diagram should now be similar to the following diagram:", "Figure 3: ", "The ", "Robot_AD", " design diagram with one plan, ", "PaintSpecifiedCurrentColour", "7. In the browser, right-click on the  ", "Paint", " event and select ", "Edit as JACK file", " from the pop-up menu. Complete the ", "Paint", " event by making it:", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "8. Using the ", "Edit as a JACK File", " option, edit the ", "Robot", " agent and", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "9. Using the ", "Edit as a JACK File", " option edit the ", "PaintSpecifiedCurrentColour", " plan as follows:", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "10. Save, compile and run the application.", "1. What would happen if you used ", "postEvent()", " inside ", "paintPart()", " instead of ", "postEventAndWait()", "? Try it!", "If you did not observe any difference, add ", "@sleep(2)", " before the print the statement in the ", "PaintSpecifiedCurrentColour", " plan. Run the program using ", "postEventAndWait()", " in the ", "paintPart()", " method. Replace the ", "postEventAndWait", " with ", "postEvent()", " and run the program again. Explain your observations. Remove the ", "@sleep(2)", " from the plan before you begin the next exercise.", "Make sure you change ", "postEvent()", " back into ", "postEventAndWait()", " before you begin the next exercise.", "2. ", "postEventAndWait()", " should only be called from the Java main thread or from other Java threads that are external to JACK. While the agent handles this event, the calling thread is blocked and must wait until the agent returns its result. What problem would you envisage if ", "postEventAndWait()", " was called from an agent task?", "Enable the robot agent to select between multiple plans through relevance.", "In this example, the agent has two plans that can handle a ", "Paint", " event: ", "PaintAnyColour", " and ", "PaintSpecifiedCurrentColour", ".", "The ", "PaintAnyColour", " plan prints the string ", "\"No colour specified. Painting the part.\"", "The ", "PaintSpecifiedCurrentColour", " plan prints the string ", "\"Painting part the requested colour:\"", " followed by the colour that was requested in the ", "Paint", " event.", "Whenever an event is posted and an agent begins a task to handle the event, the first thing that the agent must do is find an applicable plan to handle the event. Note that each plan is only capable of handling a single event type which is identified by the plan's ", "#handles event", " declaration. It is possible (as in this example) that there is more than one plan capable of handling a particular event type. To decide which of the plans are applicable, JACK employs the following steps.", "We will be looking at the ", "relevant()", " method in this example. The ", "PaintSpecifiedCurrentColour", " plan will contain a ", "relevant()", " method to ensure that the plan is only selected if there is a colour specified in the ", "colour", " data member of the ", "Paint", " event. If a plan does not specify a ", "relevant()", " method, the plan is relevant for all instances of the event. The ", "relevant()", " method takes the following form:", "The next level of 'filtering' in plan selection (assuming the plan can handle the event and is relevant for a particular instance of the event) is the ", "context()", " method. This is discussed in Exercise 4.", "Note that the order of plan declarations within the agent (or capability) also has a bearing on plan selection. The order is called prominence, and the most prominent applicable plan will be selected first. This means that if ", "PaintAnyColour", " is declared before ", "PaintSpecifiedCurrentColour", ", it will always be the plan selected to handle ", "Paint", " events as it does not have a ", "relevant()", " or a ", "context()", " method associated with it.", "1. Use the design tool to add a new plan called ", "PaintAnyColour", " to the ", "Robot_AD", " design diagram.", "Figure 4: ", "The ", "Robot_AD", " design diagram with the ", "PaintSpecifiedCurrentColour", " and ", "PaintAnyColour", " plans", "2. Use the ", "Edit as a JACK File", " option to modify the ", "PaintSpecifiedCurrentColour", " plan so that its ", "relevant()", " method performs a test that recognises events with non-empty strings. For example,", "This plan will be used to paint a part the colour that was requested in the ", "colour", " member of the ", "Paint", " event. Note that if the robot is not currently painting with the requested colour an alternative plan will be required. We will not write that plan or test for that condition in this exercise \u2013 that is deferred until the next exercise.", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "3. Use ", "Edit as a JACK File", " to edit the new plan to add the following print statement to its ", "body", " reasoning method:", "This is the plan to be used when a ", "Paint", " event does not include a specific colour request. The ", "colour", " string will be null or empty. In this case the part will be painted with the colour being used by the robot at the time of the paint request.", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "4. The ", "#uses plan PaintAnyColour", " declaration should appear after the ", "PaintSpecifiedCurrentColour", " plan declaration.  Check the order by editing the ", "Robot", " agent. If necessary swap the declarations via the project browser or by editing the file as a JACK file.", "If editing the file as a JACK file, save and close the file before continuing.", "5. Edit the ", "Robot", " and modify its ", "paintPart()", " method so that it now takes a ", "String", " argument (the colour) and passes it to the ", "paint", " posting method.", "If editing the file as a JACK file, save and close the file before continuing.", "6. Edit the ", "main()", " method in ", "Program.java", ", so that the ", "paintPart()", " method is invoked with the first program argument, if any, and null otherwise. For example:", "Save and close the file to apply the changes before continuing.", "7. Save the project.", "8. Compile and run the program a few times with and without command line arguments. The command line arguments are added in the ", "Extra Args", " text box of the ", "Compiler Utility", "'s ", "Run Application", " window.", "9. Swap the plan declarations within the agent. Compile and run the program again (with and without command line arguments).", "10. Swap the plan declarations back to normal before moving on to Exercise 4.", "Enable the robot agent to select between multiple plans through ", "context", ", as well as relevance.", "The ", "context()", " method provides the next level of 'filtering' after ", "relevant()", ". If a plan is relevant to a particular event, the ", "context()", " method determines whether the plan is applicable given the agent's current knowledge. The ", "context()", " method does not take any arguments and its body is always a single ", "JACK Agent Language logical expression", ". (JAL logical expressions are composed of boolean members, logical members and beliefset cursor expressions which can, in general, bind to multiple values. Logical expressions and cursors are discussed in more detail in the ", "Agent Manual", ".) When evaluating the ", "context()", " method, the agent will consider all possible alternatives. Note that for every possible set of values that can satisfy the ", "context()", " method, a separate instance of the plan will be generated and will be available for execution. This concept of multiple possible bindings and plan instances is illustrated in the introductory beliefset exercise found in Practical 2.", "The ", "context()", " method takes the following form:", "To illustrate the use of ", "context()", " in a plan, the robot agent will have a ", "String", " data member called ", "paintColour", ", which stores the colour being used.", "In this example we will also use", "within a plan. This statement gives the plan access to the members and methods in the ", "Robot", " class interface. In this particular example, it will allow the plan to access the robot's ", "paintColour", " member (", "self.paintColour", ").", "1. Use the design tool to add a new plan called ", "PaintSpecifiedNewColour", " to the ", "Robot_AD", " diagram. This plan is to deal with ", "Paint", " events that request a specific colour, but which could not be handled by the ", "PaintSpecifiedCurrentColour", " plan, as the colour requested is not the same as the agent's current ", "paintColour", ". In the ", "PaintSpecifiedNewColour", " plan, the agent's ", "paintColour", " member must first be changed to the new colour. In addition, when the colour changes, it is necessary to give the part two coats of paint to ensure that no trace of the previous colour remains. Use the design tool to add the required links between the plan, the agent and the ", "Paint", " event as follows:", "Your design diagram should be similar to the following diagram:", "Figure 5: ", "The ", "Robot_AD", " design diagram with the ", "PaintSpecifiedCurrentColour", ", ", "PaintAnyColour", " and ", "PaintSpecifiedNewColour", " plans", "2. Use ", "Edit as a JACK File", " to modify the ", "Robot", " agent to:", "Ensure that the plans are declared in the following order:", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "3. Use the ", "Edit as a JACK File", " option to make the following changes to the new ", "PaintSpecifiedNewColour", " plan:", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "4. Use the ", "Edit as a JACK File", " option to edit the ", "PaintSpecifiedCurrentColour", " plan.", "Close the file to ensure that there are no conflicts between editing the file in the JDE browser and as a JACK file. In the editor window of the file, click the ", "Save", " button and then the ", "Close", " button.", "5. Modify the ", "PaintAnyColour", " plan so that it now prints the string ", "\"No colour specified. Painting the part\"", " followed by the robot's current ", "paintColour", ". To access the ", "paintColour", " member inside the plan, add a ", "#uses interface Robot self", " declaration at the beginning of the plan.", "If editing the file as a JACK file, save and close the file before continuing.", "6. Modify the ", "main()", " method in ", "Program.java", " so that it no longer passes a command line argument to the ", "paintPart()", " method but instead invokes the method several times as follows:", "Save and close the file to apply the changes before continuing.", "7. Save the project.", "8. Compile and run the program. Check that the output is correct.", "Illustrate the reposting of events when a plan fails.", "The way that an agent handles an event depends on the type of event. For example, when a normal event is received by an agent, the agent initiates a task to handle the event. This task involves selecting and executing the first plan that is both relevant and applicable to this event. With normal events the initial selection is the only plan that is executed. In the case of BDI events, the agent can apply more sophisticated reasoning to the plan selection, and can also attempt to achieve its goal using other applicable plans if a plan fails.", "This exercise illustrates how a ", "BDIGoalEvent", " will attempt every applicable plan until it succeeds. It will only fail when no more applicable plan instances remain to be tried. The ", "body()", " method in a plan is the plan's main reasoning method. It is executed whenever a plan is executed. Reasoning methods do not have the same execution structure as ordinary Java methods. Each statement in a reasoning method is treated like a boolean expression, and each semicolon between statements like an AND connector. This means that if any statement fails, then the reasoning method terminates immediately and fails. In this exercise you can make the plan fail by adding the following statement in its ", "body()", " method:", "1. Modify the ", "PaintSpecifiedNewColour", " plan so that it prints the painting message once and then fails (add ", "false;", " after the first print statement). To illustrate that the plan actually stops at that point, add ", "System.out.println(\"After false statement\");", " after the ", "false", " statement. This print statement should not be executed.", "If editing the file as a JACK file, save and close the file before continuing.", "2. Save the project.", "3. Compile and run the program.", "4. Add a ", "fail()", " reasoning method that prints the string ", "\"PaintSpecifiedNewColour plan failed\"", ".", "If editing the file as a JACK file, save and close the file before continuing.", "5. Save the project.", "6. Compile and run the program.", "1. Which plan is now responsible for printing the second paint message that corresponds to the second coat of paint?", "Provide the robot agent with a ", "Painting", " capability.", "The capability concept is a means of structuring reasoning elements of agents into 'clusters' that implement selected reasoning capabilities. This technique simplifies agent system design and allows code reuse and encapsulation of agent functionality. In this example, we encapsulate both the set of plans you have written so far and the ", "Paint", " event into a ", "Painting", " capability.", "Capabilities are described in the ", "Introduction to JACK", " notes. If necessary, read through the notes before beginning the exercise.", "1. Add a new design diagram called ", "Painting_DEP", ". This will be the DEP diagram for a new ", "Painting", " capability. Then", "Figure 6: ", "The ", "Painting_DEP", " design diagram with the ", "PaintSpecifiedCurrentColour", ", ", "PaintAnyColour", " and ", "PaintSpecifiedNewColour", " plans", "2. Now that the plans and event are encapsulated in the new capability, we should remove the links from the agent to the plans and declare that the ", "Robot", " agent has the ", "Painting", " capability. This can be achieved by:", "Figure 7: ", "The ", "Robot_AD", " design diagram with the ", "Robot", " agent and ", "Paint", " event", "Figure 8: ", "The ", "Robot_cap_hier", " design diagram with the ", "Robot", " agent and ", "Painting", " capability", "3. Edit the ", "Painting", " capability and check that the ", "#uses plan", " declarations are declared in the the following order:", "This is the same order as they were previously declared in the agent declaration. If editing the file as a JACK file, save and close the file before continuing.", "4. Save the project.", "5. Compile and run the application. Check that the output is correct. It should be similar to the following:", "Create a multi-agent system consisting of a robot agent and a part agent.", "In this exercise you will create a part agent that interacts with the robot agent. The part agent will have a ", "PaintRequesting", " capability that will enable it to send painting requests to the robot agent. The part agent will post itself ", "PaintRequest", " events (by the invocation of a ", "submitPaintRequest()", " method in the main Java thread). The ", "PaintRequest", " event will be handled by the part agent's ", "SendPaintCommand", " plan. The ", "SendPaintCommand", " plan will send a ", "Paint", " event to the robot agent.", "Note that the ", "Paint", " event must now be a ", "BDIMessageEvent", " (a message event is required if the event is to be sent between agents). We will also need to add", "to the ", "Paint", " event. BDI events have a default behaviour that determines what happens with respect to plan reconsideration, applicable plan set recalculation and meta-level reasoning (reasoning about which plan to choose). These default behaviours can be modified by setting behaviour attributes. In this example, we set the recover attribute to ", "repost", " which means that the event will be reposted on failure. The applicable plan set will be recomputed (with possibly different results/bindings \u2013 in this case our failed ", "PaintSpecifiedNewColour", " plan will have changed the agent's ", "paintColour", " member) and another applicable plan will be tried. This should become clearer when you run the example.", "7a \u2013 Organise the code into sub-folders in the JDE browser.", "Before we begin adding the definitions for our ", "Part", " agent, we will organise the code so that all the code related to the ", "Robot", " will be in ", "Robot", " sub-folders in the JDE browser.", "It is useful to organise the project in the browser according to entities that relate to the ", "Robot", " and entities that relate to the ", "Part", ". This can be achieved by right-clicking on a folder/container and selecting ", "Add Nested Container", ". The new nested container can be given an appropriate name (e.g. robot or part). Components can be dragged and dropped into the appropriate nested container (e.g. all the painting plans can be dragged into a nested robot container inside the ", "Plan Types", " folder).", "1. Organise the remainder of the project in the browser so that each folder has a nested robot folder containing the definitions related to the robot. (It is not always clear which package an event should belong to. We generally add them to the package of the agent that can handle the event.)", "2. Save the project. The browser window should look similar to the following:", "Figure 9: ", "The browser window with the project organised into nested containers", "3. Compile and run the application.", "7b \u2013 Create the Part agent and incorporate it into the application", "1. Create a new design diagram called ", "Part_AD", " and", "2. In the browser create a nested container for the Part agent in the ", "Event Types", " folder. Drag the ", "PaintRequest", " event into the ", "Part", " folder. As more components (plans etc.) are added for the ", "Part", " and ", "Robot", ", store them in appropriate nested folders in the browser.", "3. Create a new design diagram called ", "Part_cap_hier", " and", "4. Create a new diagram called ", "PaintRequesting_DEP", " and", "Figure 10: ", "The ", "PaintReqesting_DEP", " design diagram", "5. Edit the ", "PaintRequest", " event as follows. The event must", "If editing the file as a JACK file, save and close the file before continuing.", "6. Edit the ", "Part", " agent and add a ", "submitPaintRequest(String robot, String colour)", " method that will post a ", "PaintRequest", " event containing the name of the robot to send the paint request to and the colour that the part is to be painted. Use ", "postEventAndWait()", " to post the event.", "If editing the file as a JACK file, save and close the file before continuing.", "7. Edit the ", "SendPaintCommand", " plan as follows:", "If editing the file as a JACK file, save and close the file before continuing.", "8. Edit the ", "Paint", " event to extend ", "BDIMessageEvent", ", and set its ", "Recover", " behaviour attribute to be ", "repost", " (", "#set behavior Recover repost", ").", "If editing the file as a JACK file, save and close the file before continuing.", "9. Edit the ", "Robot", " agent and remove the ", "paintPart()", " method and the ", "#posts event Paint", " declaration.", "If editing the file as a JACK file, save and close the file before continuing.", "10. Modify the ", "main()", " method in ", "Program.java", " so that it:", "11. Comment out the ", "System.exit(0);", " statement in ", "Program.java", ".", "Save and close the file to apply the changes before continuing.", "12. Save the project.", "13. Compile the program.", "14. Predict what you would expect to be output by the program. Run the program. Are your predictions correct?", "1. What would happen if you had not added ", "#set behavior Recover repost", " to the ", "Paint", " event? Test your prediction by commenting out the ", "#set behavior", " statement.  Why wasn't this required when the ", "Paint", " event was a ", "BDIGoalEvent", "?", "2. Explain the order of the output statements.", "Make the part/robot messaging protocol two-way and demonstrate the use of the JACK Interaction Diagram.", "In this exercise the robot agent will send a message to the part agent when it has finished painting the part. The part agent will use a ", "DisplayFinished", " plan to handle the ", "Finished", " event and will print a message to indicate that it has been painted.", "Figure 11: ", "The ", "PaintReqesting_DEP", " design diagram with the ", "DisplayFinished", " plan", "As this is a message event, it can display information on an interaction diagram \u2013 include the following statement in the posting method", "where ", "c", " is the colour passed to the posting method and ", "message", " is the (inherited) ", "String", " data member that will be displayed on the interaction diagram.", "If editing the file as a JACK file, save and close the file before continuing.", "If editing the file as a JACK file, save and close the file before continuing.", "Figure 12: ", "The ", "Painting_DEP", " design diagram", "where ", "ev", " is the reference to the ", "Paint", " event being handled by the plan, and ", "fev", " is the reference used in the ", "#sends event Finished fev", " declaration in the plan. ", "from", " is an inherited ", "String", " data member.", "If editing the file as a JACK file, save and close the file before continuing.", "If editing the file as a JACK file, save and close the file before continuing.", "Save and close the file to apply the changes before continuing.", "1. Explain the order of the output from trace statements from the main program and the JACK agents.", "Modify the behaviour of the robot agent so that painting takes a specific period of time to complete.", "In the previous exercise, parts were painted the requested colours. However, painting only took the amount of time required to print out a statement indicating that the robot was painting the part a particular colour. We will discover some interesting effects if we allow the plans involved to 'sleep' for a short time while the robot paints the part. To achieve this, we use the reasoning method statement ", "@sleep", ".", "The ", "@sleep", " statement takes the following form:", "timeout", " represents the period of time that the agent must wait before continuing with the plan. The time-out period is specified in 'ticks' on the agent's clock. The actual time depends on the ", "Timer", " that the agent is using. If the timer is the real-time clock (the default), then it represents a sleep period in seconds.", "1. Modify the 'painting' plans so that they contain an ", "@sleep(5)", " statement to sleep for 5 seconds after they print the message to indicate that they are painting a part.", "If editing the files as JACK files, save and close them before continuing.", "2. Save the project.", "3. Compile and run the program with the interaction diagram.", "1. How do you explain the output?", "2. How can you ensure that the robot does not begin a new task to start painting another part while it is still 'busy'?", "Synchronise the message protocol between the part and the robot.", "In the previous example, we found that while the robot was painting a part, it was possible for it to receive requests to perform other tasks. If there is nothing in the plans to make them wait until the robot is not busy, the robot may begin a new task and change ", "paintColour", " before it has finished painting a particular part. There are various schemes you may have thought of to deal with this. Some of them may require features in JACK that we have not yet covered, such as using a beliefset to store the robot state and waiting until the robot is no longer busy before servicing the next request.", "In this exercise, we illustrate the use of ", "@reply", " to set up a protocol between the part and the robot. The part sends the request to the robot, then waits for a reply before continuing to the end of the ", "SendPaintCommand", " plan. The ", "SendPaintCommand", " plan is executed in response to the ", "PaintRequest", " event that is posted using ", "postEventAndWait()", " inside the ", "submitPaintRequest()", " method. As it uses ", "postEventAndWait()", ", the method will not return until the ", "SendPaintCommand", " plan has completed. This means that the next ", "submitPaintRequest()", " in the main thread will not be invoked until the part involved in the previous request has received a reply to indicate that it has been painted.", "Of course, if any other ", "Paint", " events are sent to the robot from elsewhere, it is still possible to have the problems we experienced in Exercise 9. In Exercise 11, we will use an alternative solution to avoid this problem.", "The ", "@reply", " statement takes the form:", "The ", "@reply", " statement is used by an agent to reply to a message that it has received from another agent. It replies to the sending agent with a message event which arrives as a data object on the reply queue of the original message. This is illustrated in the following code fragment:", "Note that the message event that is returned using ", "@reply", " does not trigger a new task or plan.", "1. Remove the ", "DisplayFinished", " plan from the project by removing it from the plans folder in the browser. This is achieved by right-clicking on the plan and selecting ", "Remove \"DisplayFinished\"", " from the pop-up menu. Note that you also need to remove the ", "#handles external event Finished", " declaration from the ", "PaintRequesting", " capability.", "2. Modify the ", "SendPaintCommand", " plan so that after it sends a ", "Paint", " message to the robot it waits for a reply. When it receives the reply it uses ", "getReply()", " to access the reply (which will be a ", "Finished", " event). It must then print a message to indicate that it (the agent name), has been painted a particular colour. The colour is available from the reply (i.e. the ", "Finished", " event).", "If editing the file as a JACK file, save and close the file before continuing.", "3. Modify the robot's paint plans, so that when they complete painting a part they use ", "@reply", " to reply with a ", "Finished", " event (which conveys the colour that the part was painted). Remove the ", "@send", " statements that were used to send the ", "Finished", " event in the earlier exercises.", "If editing the file as a JACK file, save and close the file before continuing.", "4. Save the project.", "5. Compile and run the program with the interaction diagram.", "Use a semaphore to ensure that the robot only attempts to paint one part at a time.", "In Exercise 10, the main program only sent a new paint request to the robot when the previous part had been painted. This was because the ", "submitPaintRequest", " methods invoked from the main Java thread used the ", "postEventAndWait", " method. The ", "submitPaintRequest", " method did not return until the part had received a reply to indicate that the paint process had been completed.  If this was guaranteed to be the only way that paint requests were sent to the robot, no conflict would arise. However, if any other paint requests were sent from the JACK thread, the robot could attempt to paint more than one part at the same time.", "An alternative technique to ensure that the robot only attempts to paint one part at a time is to use a semaphore. A semaphore is a synchronisation resource which can be used to establish mutual exclusion regions of processing in JACK plans and threads.  A semaphore is a binary resource that plans and threads may wait for and signal on when they have completed. Waiting entities queue on the semaphore and acquire the semaphore in FIFO order.", "The semaphore has a single constructor:", "Methods are provided to grab and release the semaphore. ", "signal()", " is used to release the semaphore. The semaphore is grabbed initially by the constructing thread (or plan) and must thus be released by a call to ", "signal()", ". To grab the semaphore from within a plan, use ", "planWait()", ". The ", "planWait()", " method returns a special JACK type, the ", "Cursor", ".", "The cursor concept originates from relational databases, where a query can return multiple tuples in the form of a result set. Access to the elements in this set is then provided through a cursor. In JACK, these concepts have been extended to provide cursors which not only operate in the conventional manner but also operate on the temporal evolution of a query. The latter type of cursor is typically used in JACK applications to determine when a particular condition becomes true. Cursors which provide this additional capability within JACK are implemented as ", "triggered cursors", ". Triggered cursors are not checked using a busy-wait loop \u2013 rather, they are only tested when the agent performs a modification action that impacts on the cursor. The cursor returned by the ", "planWait()", " method is triggered when the semaphore is grabbed by the plan.", "This means that a plan can use the ", "@waitFor", " reasoning statement to wait until the plan has been able to grab the semaphore before it begins painting the part.", "In this exercise we introduce a new ", "ProcessPaintRequest", " plan. This plan can only paint a part when it has the semaphore.  If it does not have the semaphore, it must wait until it gets the semaphore before it paints the part.", "1. Create the named data of type ", "Semaphore", " that is to be used to prevent the robot from attempting to paint more than one part at a time.", "2. Open the ", "Painting_DEP", " design diagram and", "Figure 13: ", "The ", "Painting_DEP", " design diagram with the ", "ProcessPaintRequest", " plan, ", "StartPainting", " event and ", "mutex", " named data", "3. Edit the ", "StartPainting", " event so that it:", "If editing the file as a JACK file, save and close the file before continuing.", "4. As the semaphore is grabbed initially by the constructing thread, it must also be released by a call to ", "signal()", ". The ", "#private data Semaphore mutex();", " declaration constructs the semaphore in the capability. ", "Painting", " capability. To release the semaphore after it has been constructed, edit the capability and override its ", "autorun", " method as follows:", "5. Edit the ", "ProcessPaintRequest", " plan as follows:", "If editing the file as a JACK file, save and close the file before continuing.", "6. Use the browser to remove the ", "@reply", " statements from the three 'painting' plans.", "7. Remove the ", "@waitFor", " reply and associated statements from the ", "Part", " agent's ", "SendPaintCommand", " plan.", "8. Open the ", "PaintRequesting_DEP", " design diagram and", "Figure 14: ", "The ", "PaintReqesting_DEP", " design diagram with the ", "DisplayFinished", " plan and ", "Finished", " event", "9. Edit the ", "DisplayFinished", " plan and", "If editing the file as a JACK file, save and close the file before continuing.", "10. Save the project.", "11. Compile and run the project.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "JACK beliefset relations are intended to be used for the maintenance of agent beliefs, which are central to the notion of BDI. Normal Java data structures can also be used for this purpose, but JACK beliefset relations have been designed specifically to work within the agent-oriented paradigm, and provide facilities not available with other data storage techniques. These additional facilities include:", "Note that JACK only provides the infrastructure for adding, removing and retrieving beliefs. If other capabilities are required (such as belief propagation), then they must be implemented by the user. Also note that beliefs are associated with one agent only \u2013 the notion of a collective belief structure which is maintained by more than one agent is not supported. JACK allows an agent's beliefs to be made available to other agents but with major restrictions regarding population and access.", "In JACK, beliefs are modelled as tuples. Every tuple must have a unique key which is composed of zero or more fields. In addition to the key, the tuple contains zero or more data fields. If the key contains zero fields, only one tuple is allowed in the beliefset. It is permissible for the key to be composed of all fields in the tuple.", "A JACK beliefset is populated using the ", "BeliefSet", " ", "add()", " method. Retraction and retrieval of beliefs also follow the relational model in that both functions support the notion of tuple specification. A tuple specification consists of components for each tuple field where each component can either be a value or a wildcard symbol (e.g. *) which indicates that any value for that field is acceptable.", "In JACK, tuple specification is implemented as an argument list consisting of JACK expressions (corresponding to values) and unbound logical members (corresponding to wildcards). Logical members follow the semantic behaviour of variables from logic programming languages such as Prolog, where variable binding occurs through the process of unification. Unification can potentially provide multiple bindings for the unbound logical members \u2013 JACK provides access to these bindings (if required) through a beliefset cursor. This access can be transparent to the user (e.g. when a beliefset query appears in a composite logical expression) or under user control. In the latter case, the cursor method ", "next()", " is available to provide access to the next binding.", "Once a logical member has been bound, its value cannot be changed and an accessor function (e.g. ", "getValue()", ") is required to access the value of the bound logical member.", "Belief retraction is achieved in JACK through the ", "remove()", " and ", "removeAll()", " methods.  Note that ", "remove()", " is a ", "BeliefSet", " method (and takes a tuple specification as its argument list) whereas ", "removeAll()", " is a ", "BeliefSetCursor", " method and takes no arguments.", "Belief retrieval is achieved in JACK through user defined query methods which take a tuple specification as their argument list. Overloading of query methods is permitted. A query method with an argument list consisting solely of (non-logical) JACK expressions is valid \u2013 it is used to determine whether or not a particular belief is held. JACK also supports (through the view construct) the retrieval of beliefs which are constructed from multiple beliefsets.", "Once asserted, a JACK belief cannot be modified directly. The only way to change a belief is to:", "JACK supports the posting of events when an agent's beliefs change (e.g. through an ", "add()", " or ", "remove()", "). The following beliefset callbacks are available for this purpose \u2013 ", "addfact()", ", ", "newfact()", ", ", "delfact()", ", ", "endfact()", " and ", "modfact()", ". If this capability is required in a particular application, the developer must provide implementations for the callbacks that are actually used.", "If you wish to populate a beliefset from a data file, then you can read records from a data file and explicitly add the records to the beliefset using ", "add()", ". Typically, you would perform this activity from within the beliefset constructor, with the filename passed as an argument.", "Alternatively, you can initialise tuple objects directly using the JACOB Object Modelling Language, which is described in the ", "JACK\u0099 ", " ", "Intelligent Agents", " ", "JACOB Manual", ". Beliefsets are provided with a ", "read()", " method which takes a JACOB file as its argument and populates the beliefset according to the contents of the file. JACOB can be used for initialising any JACK objects, not just beliefsets and is also used to exchange objects between processes. In this latter capacity, it provides a lightweight alternative to Java serialization and CORBA.", "The general form for a Closed World JACK beliefset definition is:", "The open world's beliefset relation definition takes the same form as that shown for the closed world except that in the first line ClosedWorld is replaced with OpenWorld.", "The following JACK beliefset could be used to maintain beliefs regarding politicians.", "An agent can then have read/write access to a beliefset of this type by including a declaration like the following in the agent definition:", "The agent might populate the beliefset through a plan called ", "NewMember", ":", "Other plans might then access the beliefset in various ways.", "Exercise 1", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "The solutions to the programming exercises can be found in the ", "practicals/jack_jde/solutions/practical1", " subdirectory. There is a separate directory for each of the exercises.", "Contents", " | ", "Parent Topic", " | ", "Previous Topic", " | ", "Next Topic", " ", "\n\u00a0", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nJDBCOutStream is an OutStream for transporting JACOB objects to a \n JDBC sink.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nInStream is a base class for JACOB input filtering.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThe JacobReader class is used to read in JACOB objects defined either \n in a file or a ", "String", " and translate them into \n ", "Base", " Objects.  It requires a \n ", "TypeDict", " to define the various objects it \n can read in.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nJDBCInStream is an InStream for reading JACOB Objects from a JDBC\n source.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nConverts data from an input file to a new format in an output file.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThe GetStream class is a utility that provides generic access to\n JACOB objects, i.e., to retrieve the field values through \"JACOB\n reflection\". An instance of GetStream is created, and accesible via\n the static member GetStream.instance.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nBinaryInstream is an InStream for JACOB Objects using\n a compact binary transport format.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nBinaryOutStream is an OutStream for JACOB Objects in binary\n transport format.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nXMLOutStream is an AsciiOutStram for JACOB Objects in an XML \n transport format.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nXMLInStream is an AsciiInStream for JACOB Objects fron an XML source.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThe StreamerSupport class is a base class for all JACOB streamer\n support classes that are generated by the JACOB builder. This class\n keeps a number of public members that constitute the runtime\n definition of the JACOB class concerned, and includes a few utility\n methods that are useful for \"JACOB reflection\".\n\n The JACOB streamer support object for a JACOB class is obtained\n through the getStreamer() method of that class.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nTypeDict objects define input JACOB dictionaries.  The dictionary is an \n association between tags and ", "StreamerSupport", " objects.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThe SetStream class is a utility that provides generic access to\n JACOB objects, i.e., to assign the field values through \"JACOB\n reflection\". An instance of SetStream is created, and accesible via\n the static member SetStream.instance.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nOutStream is a base class for JACOB output writing/filtering.\n\n These environment properties are recognized:\n \"JACOB.OutputType\" can be set to \"ascii\", \"binary\" or \"xml\".\n \"JACOB.WarnNonJACOB=true\" will warn when non-JACOB objects are\n embedded within a JACOB object.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nBaseListEnumeration is an implementation of the Java Enumeration inteface. \n It provides an additional method to those provided by the interface, which \n allows the element currently being pointed to by the Enumeration to be \n removed.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "BaseList", " is an implementation of the \n ", "Aggregate", " interface. Its intended \n use is as a container to hold an indeterminate number of Objects \n implementing the ", "Base", " interface,\n similar to a Java ", "Vector", ".\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "If the object in the second parameter cannot be found, this method \n will return null. Otherwise, the added Object is returned.", "If the given index is less than zero, this method will return null. \n However, if the index given is greater than the index of the last element \n in the ", "Aggregate", ", the new Object will simply be added to the \n end of the ", "Aggregate", ". Under normal circumstances, this \n method returns the Object added to the ", "Aggregate", ".", "If the object in the second parameter cannot be found, this method \n will return null. Otherwise, the added Object is returned.", "If the Object to replace does not exist in the ", "Aggregate", ", \n this method will return null. Otherwise, the Object that was added is \n returned.", "If the given Object does not exist in the ", "Aggregate", ", \n this method will return null. Otherwise, the removed Object is returned.", "If the given index is less than zero, or \n greater than the index of the last element in the ", "Aggregate", ", \n this method will return null. Otherwise, the removed Object is returned.", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "If the Object to replace does not exist in the ", "Aggregate", ", \n this method will return null. Otherwise, the Object that was added is \n returned.\n", "\n", "If the given Object does not exist in the ", "Aggregate", ", \n this method will return null. Otherwise, the removed Object is returned.\n", "\n", "If the object in the second parameter cannot be found, this method \n will return null. Otherwise, the added Object is returned.\n", "\n", "\n", "If the given index is less than zero, this method will return null. \n However, if the index given is greater than the index of the last element \n in the ", "Aggregate", ", the new Object will simply be added to the \n end of the ", "Aggregate", ". Under normal circumstances, this \n method returns the Object added to the ", "Aggregate", ".\n", "\n", "If the given index is less than zero, or \n greater than the index of the last element in the ", "Aggregate", ", \n this method will return null. Otherwise, the removed Object is returned.\n", "\n", "If the object in the second parameter cannot be found, this method \n will return null. Otherwise, the added Object is returned.\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThis is the base implementation for the System real time Clock class.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThis is the base implementation for clocks.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nApplication main entry for JACOB Object Browser.\n java aos.main.Jacob [[<data-file>]... [-t <dict-file>]...]...\n where ", "<data-file>", " is a data file or a collection of \n data files, and ", "<dict-file>", " is a dictionary or multiple\n dictionaries associated with the preceding data file(s).\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nApplication main entry for processing JACOB Object definitions.\n It is invoked by a command line:\n ", "\n Use \"java aos.main.JacobBuild [options] [target]... where the ", " \n targets ", " are the list of one of more api files to process.\n\n Use \"java.aos.main.JacobBuild -help\" or refer to the JACOB manual\n for a full list of options.\n ", "\n Use \"java.aos.main.JacobBuild -convert -help\" for a full list of\n options for converting a JACOB file into another JACOB file format.\n The supported JACOB file formats are ASCII, XML and Binary.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nSimClock is a timer for simulation time.  It is ticked manually.\n You can set and adjust the time but it will not advance by itself.\n Typically this is connected to some external time source which\n itself may or may not be connected to a real time source.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nThis is is simple gui for controlling a dilated clock\n", "\n\n", "\n", "\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\nA timer filter that provides time dilation.  It can allow time to pass\n at normal pace, but it can also slow down, speed up or pause time if\n required.\n", "\n\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n", "\n", "\n\n\n", "\n\n\n", "\n\n", "\n", "\n\n", "\n\n\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", "\n\n", "\n", " ", "US Government Restricted Rights", " The JACK Modules and relevant Software Material have been developed entirely at private expense and are accordingly provided with RESTRICTED RIGHTS.  Use, duplication, or disclosure by Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013 or subparagraph (c)(1) and (2) of the Commercial Computer Software Restricted Rights and 48 CFR 52.2270-19, as applicable.", "\n"], "emails": ["jack-support@aosgrp.com", "info@gadget-software.com", "info@gadget-software.com"], "addresses": ["580 Elizabeth Street Melbourne, VI", "5 Typographical conventions 1.6 Platform-specific GU"], "social_media_links": [], "telephone_numbers": ["+61 (0) 3 9349 5055", "+61 (0) 3 9349 5088", "252.227-7013", "52.2270-19", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "1              -1              400          400", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "+61 3 9349 5055", "+61 3 9349 5088", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088", "252.227-7013", "52.2270-19", "+61 3 9349 5055", "+61 3 9349 5088"], "lda_resutls": [[0, "0.086*\"class\" + 0.052*\"declaration\" + 0.052*\"capability\" + 0.045*\"form\" + 0.035*\"belief\" + 0.032*\"follow\" + 0.023*\"take\" + 0.022*\"provide\" + 0.022*\"view\" + 0.020*\"construct\""], [1, "0.061*\"team\" + 0.040*\"use\" + 0.036*\"agent\" + 0.034*\"tuple\" + 0.032*\"datum\" + 0.022*\"contain\" + 0.021*\"sub\" + 0.020*\"folder\" + 0.020*\"perform\" + 0.016*\"model\""], [2, "0.082*\"file\" + 0.052*\"object\" + 0.047*\"definition\" + 0.031*\"follow\" + 0.025*\"value\" + 0.023*\"beliefset\" + 0.023*\"package\" + 0.021*\"use\" + 0.018*\"create\" + 0.018*\"type\""], [3, "0.079*\"table\" + 0.065*\"describe\" + 0.045*\"paint\" + 0.041*\"part\" + 0.037*\"topic\" + 0.033*\"cursor\" + 0.030*\"test\" + 0.027*\"previous\" + 0.023*\"operation\" + 0.020*\"information\""], [4, "0.046*\"logical\" + 0.042*\"return\" + 0.034*\"fail\" + 0.034*\"remove\" + 0.032*\"true\" + 0.025*\"query\" + 0.024*\"find\" + 0.024*\"button\" + 0.020*\"would\" + 0.019*\"false\""], [5, "0.089*\"statement\" + 0.061*\"name\" + 0.058*\"add\" + 0.041*\"task\" + 0.039*\"time\" + 0.034*\"instance\" + 0.031*\"new\" + 0.030*\"agent\" + 0.027*\"condition\" + 0.024*\"project\""], [6, "0.158*\"method\" + 0.064*\"reasoning\" + 0.050*\"role\" + 0.033*\"field\" + 0.032*\"figure\" + 0.027*\"chapter\" + 0.023*\"level\" + 0.021*\"select\" + 0.020*\"example\" + 0.019*\"require\""], [7, "0.085*\"right\" + 0.062*\"software\" + 0.052*\"set\" + 0.050*\"restrict\" + 0.050*\"government\" + 0.041*\"provide\" + 0.041*\"applicable\" + 0.038*\"relevant\" + 0.033*\"develop\" + 0.031*\"private\""], [8, "0.133*\"plan\" + 0.116*\"event\" + 0.099*\"agent\" + 0.029*\"post\" + 0.026*\"use\" + 0.021*\"type\" + 0.021*\"handle\" + 0.021*\"message\" + 0.018*\"send\" + 0.013*\"execute\""], [9, "0.041*\"component\" + 0.030*\"window\" + 0.029*\"design\" + 0.029*\"run\" + 0.026*\"application\" + 0.026*\"list\" + 0.025*\"program\" + 0.024*\"robot\" + 0.024*\"section\" + 0.023*\"next\""]], "kpe_resutls": [["set", 0.01873349171723184], ["class getstream", 0.01692728813275039], ["specif product", 0.013200662088507974], ["agent orient softwar", 0.011941370234958929], ["class convert", 0.011101402486042132], ["hashcod", 0.011033292949185335], ["ao", 0.01023982154137684], ["webbot manual tabl", 0.009733005154596812], ["form", 0.009018077528379997], ["jack", 0.00886981636449672]], "rake_resutls": [[66.10119047619047, "automated driving systems news subscription news subscription subscription successful come"], [61.083333333333336, "liu chung sing leung vishal chopra founder team leader"], [56.71896955503513, "news subscription news subscription subscription successful aos participates"], [47.68519717259524, "jse class teamachieve teamachieve verifysyntax gcodegen buildfsm package aos"], [45.46010570510412, "licence renewal jack user group agent training courses product support"], [44.13519765442865, "contents frame alert jack intelligent agents \u00ae agent manual table"], [41.088745039625806, "queries agent training courses jack user group licence renewal"], [38.67945802434854, "contents jack intelligent agents \u00ae jack sim manual table"], [37.766249760556704, "contents jack intelligent agents \u00ae design tool manual table"], [37.3667275378828, "contents jack intelligent agents \u00ae development environment manual table"], [36.50800528156115, "contents frame alert jack intelligent agents \u00ae tracing"], [35.90424723961105, "jack jack sim \u2122 iwatchdog \u2122 autonomous vehicles ahead"], [35.73319375861343, "remove jack files option actually renames old generated files"], [35.21812725257075, "gen intelligent software agent technology kelpie leaves avalon"], [34.54807692307692, "jarvis j ., ronnquist r ., mcfarlane"], [34.483729679530114, "jack \u0099 intelligent agents supports two agent reasoning models"], [34.00834891065894, "contents jack intelligent agents \u00ae jacob manual table"], [33.987021857923494, "form submission form submission form submission full name"], [33.87658855014441, "contents jack \u0099 intelligent agents teams practicals table"], [33.650037681658056, "contents jack intelligent agents \u00ae teams manual table"], [33.53236368898406, "contents jack intelligent agents \u00ae webbot manual table"], [33.48557356992761, "may seem like ordinary expert system behaviour \u2013"], [33.01157933173872, "press kreutzer w ., system simulation programming styles"], [32.59813268200441, "highest precedence signatures \u2013 lower precedence signatures become"], [32.38702580634837, "last anonymous role usage declaration form provides direct access"], [31.66440422322775, "web sites whose privacy practices may differ"], [31.625818157291242, "setup method performs various essential setup operations internal"], [30.956277056277056, "bae systems \u2019 optionally crewed combat vehicle"], [30.891156462585034, "protecting valuable assets requires persistent vigilance"], [30.796557330970856, "visual modelling approach \u2013 even though developers would wish"], [29.784657207534966, "distributed systems whose component entities exhibit complex internal behaviours"], [29.2290775839999, "jack applications invariably involve multiple agents interacting asynchronously"], [29.076034237200712, "jack \u0099 intelligent agents agent practicals table"], [28.402605638848062, "jack intelligent agents \u00ae design tracing tool"], [28.389702710857968, "jack \u0099 intelligent agents development environment manual"], [28.16894754031304, "design tracing configuration window enables design tracing settings"], [28.055762929318785, "jack intelligent agents \u00ae plan tracing tool"], [27.779905287493474, "private data semaphore mutex (); declaration constructs"], [27.672915395077624, "logical methods include specific jack agent language statements"], [27.369012909372522, "introduce two new posting methods startwatch ()"], [27.305555555555557, "running monte carlo style randomised simulations"], [27.138326052300755, "complex context () methods may include cursor expressions"], [26.713922042282896, "infrastructure visualisation model development involves two phases \u2013"], [26.309599497406307, "jack sim \u2122 comprises three major components"], [26.252665207209045, "automated driving systems aos developing next"], [26.235674143208392, "transform object jarvis j ., fletcher"], [26.217573815855918, "add plan type dialog window allows plan documentation"], [26.065657555156896, "air traffic management system jackteams \u2122 developing"], [25.815934065934066, "jarvis et al ., 2005 )."], [25.782877959927138, "new high precision dual gnss modules"]], "guided_lda_resutls": [["graphical", "generated", "environment", "first", "multiple", "initialisation", "send", "modules", "selection", "posting"], ["tool", "add", "also", "information", "create", "statements", "declarations", "open", "values", "material"], ["note", "specified", "diagram", "private", "web", "editing", "ii", "right", "252", "currently"], ["may", "software", "language", "number", "plans", "container", "teams", "remove", "following", "commercial"], ["event", "jde", "menu", "used", "type", "jacob", "components", "two", "manual", "contain"], ["file", "jack", "agents", "plan", "reference", "component", "posted", "interface", "fields", "right"], ["plan", "must", "behaviour", "section", "process", "tracing", "click", "bar", "method", "step"], ["new", "one", "government", "context", "program", "project", "oriented", "robot", "attribute", "name"], ["agent", "form", "time", "field", "aos", "compiler", "defined", "command", "text", "appearance"], ["jack", "name", "code", "relevant", "agents", "logical", "execution", "true", "list", "structure"], ["java", "described", "message", "objects", "methods", "model", "level", "however", "elements", "shown"], ["data", "table", "method", "role", "cursor", "servlet", "member", "design", "dfars", "complex"], ["statement", "used", "parameters", "need", "general", "part", "48", "associated", "thread", "automatically"], ["figure", "method", "code", "value", "selected", "normal", "package", "perform", "posts", "available"], ["user", "restricted", "required", "uses", "types", "next", "change", "control", "current", "disclosure"], ["plans", "editor", "operations", "different", "contains", "type", "state", "determine", "clicking", "method"], ["team", "application", "event", "events", "chapter", "declaration", "access", "view", "mode", "handle"], ["plan", "following", "example", "beliefset", "method", "within", "provided", "applicable", "object", "option"], ["agent", "object", "window", "using", "role", "instance", "file", "capability", "rights", "methods"], ["reasoning", "class", "definition", "set", "design", "task", "browser", "run", "data", "button"]], "textrank_resutls": [[0.089252587612538, 5, "news subscription news subscription subscription"], [0.08607371623926147, 1, "news subscription news subscription subscription successful aos participates"], [0.08486111214648724, 1, "missile defence news subscription news subscription subscription successful jack"], [0.08247991312686087, 2, "class"], [0.0815758395266262, 1, "class hierarchy"], [0.07996909711191245, 1, "automated driving systems news subscription news subscription subscription"], [0.07900172518746415, 11, "__"], [0.07845600664862684, 1, "class instream"], [0.0780983947674286, 1, "class visualizer"], [0.07785447530295553, 1, "class jackruntimeerror"], [0.07780985186479944, 1, "class jdbcinstream"], [0.07763079649287975, 1, "class streamersupport"], [0.07763079649287975, 1, "class teamachieve"], [0.07743783394415957, 1, "class outstream"], [0.07739050363820286, 1, "class timerhandle"], [0.07736593513008243, 1, "class space"], [0.0773410133916045, 1, "class dilationcontroller"], [0.07733327786657392, 1, "class teammessage"], [0.07733327786657392, 1, "class dilatedclock"], [0.07727852995638732, 1, "class memorybuffer"], [0.07725315983023401, 1, "class simclock"], [0.07721895067728413, 1, "class jacob"], [0.07666972085948888, 1, "class jacobreader"], [0.07666972085948888, 1, "class getstream"], [0.07666972085948888, 1, "class binaryoutstream"], [0.07666972085948888, 1, "class xmlinstream"], [0.07666972085948888, 1, "class baselist"], [0.07666972085948888, 1, "class eventmessage"], [0.07666972085948888, 1, "class defaultteamstarting"], [0.07666972085948888, 1, "class baseclock"], [0.07666972085948888, 1, "class xorarea"], [0.07421602259130766, 1, "__type"], [0.07421602259130766, 1, "__field_names"], [0.07421602259130766, 1, "__field_inherited"], [0.07421602259130766, 1, "__init1"], [0.07421602259130766, 1, "__init2"], [0.07325268262480443, 1, "news subscription news subscription subscription successful agent technology cojack autonomous systems agent based impact analysis"], [0.06706582882365439, 6, "contents jack intelligent agents"], [0.06651795722491503, 1, "next-gen intelligent software agent technology news subscription news subscription subscription successful seminar"], [0.06534719860889418, 1, "class hierarchy\n \n \n \nclass visualizerfields"], [0.0645783492104472, 4, "jack intelligent agents group"], [0.06386532299899587, 3, "jack jack sim"], [0.06236309215649049, 1, "intelligent agent software products"], [0.05926812502248675, 1, "intelligent agents agent practicals table"], [0.05772177669661666, 21, "aos aos"], [0.057351338581353856, 1, "intelligent software agent technology"], [0.05726556012246542, 2, "aos products"], [0.05704102657422896, 1, "_icon"], [0.05704102657422896, 1, "_comment"], [0.05704102657422896, 1, "_display_names"]], "textrank_summery__resutls": ["successful Come and see the Kelpie\u2122 at Avalon!", "successful Australian Bushfires", "\u2019s Human Machine Team Development Workshops, 1st and 2nd July News Subscription News Subscription Subscription successful Kelpie autonomous testing to commence News Subscription News Subscription Subscription successful AOS attends", "ADM Congress 2020", "Come and see the Kelpie\u2122 at Avalon!"], "wordcloud_resutls": [["agent", 1.0], ["plan", 0.8106280193236715], ["will", 0.5516908212560386], ["used", 0.43671497584541064], ["object", 0.41642512077294686], ["event", 0.36231884057971014], ["one", 0.3516908212560386], ["method", 0.3333333333333333], ["use", 0.33043478260869563], ["reasoning method", 0.2792270531400966], ["example", 0.2772946859903382], ["application", 0.26859903381642514], ["team", 0.2541062801932367], ["may", 0.24734299516908212], ["name", 0.24347826086956523], ["file", 0.24057971014492754], ["type", 0.24057971014492754], ["class", 0.2357487922705314], ["beliefset", 0.2251207729468599], ["provide", 0.21835748792270532], ["Restricted Rights", 0.2144927536231884], ["component", 0.2135265700483092], ["JACK", 0.21159420289855072], ["using", 0.20579710144927535], ["statement", 0.20579710144927535], ["Note", 0.19903381642512077], ["option", 0.19903381642512077], ["system", 0.1748792270531401], ["declaration", 0.1748792270531401], ["sub team", 0.17391304347826086], ["required", 0.17294685990338166], ["field", 0.1671497584541063], ["must", 0.1642512077294686], ["new", 0.15942028985507245], ["Java", 0.15555555555555556], ["JACK Agent", 0.15265700483091788], ["user", 0.15072463768115943], ["two", 0.15072463768115943], ["JDE browser", 0.1497584541062802], ["contain", 0.14879227053140096], ["role", 0.14492753623188406], ["project", 0.14202898550724638], ["code", 0.14202898550724638], ["capability", 0.13816425120772946], ["task", 0.13816425120772946], ["Figure", 0.13719806763285025], ["reference", 0.13429951690821257], ["element", 0.13333333333333333], ["given", 0.13140096618357489], ["time", 0.13140096618357489], ["value", 0.13140096618357489], ["instance", 0.13043478260869565], ["definition", 0.13043478260869565], ["information", 0.1294685990338164], ["type definition", 0.1294685990338164], ["within", 0.1246376811594203], ["process", 0.12270531400966184], ["allow", 0.12173913043478261], ["create", 0.11980676328502415], ["number", 0.11884057971014493], ["need", 0.11690821256038647], ["created", 0.11497584541062802], ["first", 0.11400966183574879], ["behaviour", 0.11400966183574879], ["change", 0.11400966183574879], ["link", 0.11400966183574879], ["add", 0.11304347826086956], ["available", 0.11207729468599034], ["tuple", 0.11207729468599034], ["way", 0.11014492753623188], ["step", 0.10917874396135266], ["window", 0.10917874396135266], ["defined", 0.10821256038647344], ["parameter", 0.10821256038647344], ["default", 0.1072463768115942], ["list", 0.10531400966183575], ["include", 0.10531400966183575], ["specified", 0.10531400966183575], ["design", 0.10241545893719807], ["particular", 0.10144927536231885], ["different", 0.10048309178743961], ["current", 0.10048309178743961], ["interface", 0.0966183574879227], ["either", 0.0966183574879227], ["execution", 0.09468599033816426], ["JACOB", 0.09371980676328502], ["action", 0.09371980676328502], ["added", 0.09371980676328502], ["folder", 0.0927536231884058], ["part", 0.09082125603864734], ["require", 0.09082125603864734], ["condition", 0.08985507246376812], ["String", 0.08985507246376812], ["Agent Language", 0.08985507246376812], ["member", 0.08888888888888889], ["node", 0.08888888888888889], ["define", 0.08792270531400966], ["form", 0.08695652173913043], ["model", 0.08599033816425121], ["button", 0.08502415458937199]], "lda_mallet_resutls": {"Topic_0": ["provide", "class", "set", "define", "software", "table", "datum", "applicable", "relevant", "restrict"], "Topic_1": ["application", "follow", "describe", "figure", "run", "section", "chapter", "step", "container", "make"], "Topic_2": ["file", "generate", "change", "edit", "line", "open", "current", "editor", "code", "argument"], "Topic_3": ["method", "statement", "plan", "reasoning", "include", "call", "view", "fail", "execution", "graphical"], "Topic_4": ["agent", "time", "model", "system", "behaviour", "achieve", "bdi", "goal", "simulation", "environment"], "Topic_5": ["event", "agent", "plan", "post", "instance", "capability", "handle", "message", "execute", "give"], "Topic_6": ["design", "option", "create", "window", "trace", "project", "tool", "user", "mode", "display"], "Topic_7": ["type", "definition", "select", "element", "reference", "note", "follow", "folder", "menu", "list"], "Topic_8": ["team", "role", "task", "component", "declaration", "require", "form", "perform", "link", "belief"], "Topic_9": ["object", "add", "member", "beliefset", "condition", "return", "logical", "relation", "field", "tuple"]}, "wordcloud_resultsbi": ["reasoning_method", "sub_team", "type_definition", "event_agent", "agent_plan", "team_role", "file_file", "event_event", "event_plan", "message_event", "plan_event", "agent_agent", "plan_instance", "agent_event", "design_tool", "cfr_applicable", "commercial_computer", "computer_software", "dfar_subparagraph", "disclosure_government", "duplication_disclosure", "expense_restricted", "government_subject", "material_private", "private_expense", "relevant_software", "restricted_right", "restriction_dfar", "right_cfr", "right_duplication", "software_material", "software_right", "subject_restriction", "subparagraph_commercial", "section_chapter", "command_line", "plan_plan", "agent_type", "applicable_plan", "government_right", "right_relevant", "table_table", "graphical_reasoning", "definition_file", "event_type", "agent_language", "right_clicking", "plan_agent", "posting_method", "method_plan", "event_declaration", "logical_member", "right_click", "design_diagram", "design_tracing", "servlet_container", "editor_window", "method_statement", "bdi_event", "instance_event", "object_object", "intelligent_agent", "meta_level", "compiler_utility", "belief_connection", "plan_relevant", "applicable_government", "method_agent", "scenario_definition", "team_team", "data_file", "graphical_plan", "plan_graph", "generic_term", "table_component", "term_section", "interaction_diagram", "agent_definition", "task_window", "level_reasoning", "more_detail", "statement_statement", "team_sub", "base_class", "member_method", "plan_tool", "role_team", "agent_class", "agent_name", "object_type", "role_container", "statement_form", "robot_agent", "statement_plan", "team_belief", "agent_capability", "agent_software", "appearance_object", "beliefset_relation", "logical_expression"]}]